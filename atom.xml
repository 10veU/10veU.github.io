<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Wang-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://10veU.github.io/"/>
  <updated>2021-09-08T15:05:05.568Z</updated>
  <id>https://10veU.github.io/</id>
  
  <author>
    <name>XiaoJie Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker学习（二）获取Docker</title>
    <link href="https://10veU.github.io/2021/09/08/Docker%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E8%8E%B7%E5%8F%96Docker/"/>
    <id>https://10veU.github.io/2021/09/08/Docker学习（二）获取Docker/</id>
    <published>2021-09-08T17:04:41.000Z</published>
    <updated>2021-09-08T15:05:05.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker学习（二）获取Docker"><a href="#Docker学习（二）获取Docker" class="headerlink" title="Docker学习（二）获取Docker"></a>Docker学习（二）获取Docker</h1><p>您可以在多个平台(Mac/Windows/Linux)上<a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener">下载</a>并安装 Docker。</p><h2 id="1-在Windows上安装Docker-Desktop前置条件"><a href="#1-在Windows上安装Docker-Desktop前置条件" class="headerlink" title="1. 在Windows上安装Docker Desktop前置条件"></a>1. 在Windows上安装Docker Desktop前置条件</h2><p>对于仍在微软服务时间表内的 Windows 10版本，Docker 只支持 Windows 上的 Docker 桌面。</p><h3 id="1-1-系统需求"><a href="#1-1-系统需求" class="headerlink" title="1.1 系统需求"></a>1.1 系统需求</h3><h4 id="WSL-Windows-Subsystem-for-Linux-2后端"><a href="#WSL-Windows-Subsystem-for-Linux-2后端" class="headerlink" title="WSL(Windows Subsystem for Linux) 2后端"></a>WSL(Windows Subsystem for Linux) 2后端</h4><ul><li>Windows 10 64bit: 家庭版或者专业版2004（build 19041）或者更高版本<br> Windows 10 64bit: 企业版或者教育版1909（build 18363） 或者更高版本</li><li>在Windows上启用WSL2特性，更多细节请参考<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Miscrosoft documentation</a>.</li><li>在Windows 10上成功运行WSL 2需要一下先决条件：<br>64位处理器和Second Level Address Translation(SLAT)（二级地址转换）<br>4GB系统内存<br>必须在BIOS设置中启用BIOS级虚拟化支持。更多信息参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled" target="_blank" rel="noopener">Virtualization</a>.</li><li>下载并安装Linux内核更新包。<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package" target="_blank" rel="noopener">在 Windows 10 上安装 WSL | Microsoft Docs</a><h4 id="Hyper-V-后端和Windows容器"><a href="#Hyper-V-后端和Windows容器" class="headerlink" title="Hyper-V 后端和Windows容器"></a>Hyper-V 后端和Windows容器</h4></li><li>Windows 10 64-bit: 专业版2004 (build 19041) 或者更高版本<br>  Windows 10 64bit: 企业版或者教育版1909（build 18363） 或者更高版本</li><li>必须启用 Hyper-V 和 Containers Windows 特性</li><li>在Windows 10上成功运行WSL 2需要一下先决条件：<ul><li>64位处理器和Second Level Address Translation(SLAT)（二级地址转换）</li><li>4GB系统内存</li><li>必须在BIOS设置中启用BIOS级虚拟化支持。更多信息参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled" target="_blank" rel="noopener">Virtualization</a>.<h4 id="Docker-Desktop-Installer包含哪些内容？"><a href="#Docker-Desktop-Installer包含哪些内容？" class="headerlink" title="Docker Desktop Installer包含哪些内容？"></a>Docker Desktop Installer包含哪些内容？</h4>Docker Desktop包含<a href="https://docs.docker.com/engine/" target="_blank" rel="noopener">Docker Engine</a>，Docker CLI client，<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker Compose</a>，Docker Content Trust，<a href="https://github.com/kubernetes/kubernetes/" target="_blank" rel="noopener">Kubernetes</a>和<a href="https://github.com/docker/docker-credential-helpers/" target="_blank" rel="noopener">Credential Helper</a>。<br>使用 Docker Desktop 创建的容器和镜像在安装它的计算机上的所有用户帐户之间共享。这是因为所有 Windows 帐户都使用相同的 VM 来构建和运行容器。请注意，在使用 Docker Desktop WSL 2后端时，不可能在用户帐户之间共享容器和镜像。<br>嵌套的虚拟化场景，比如在 VMWare 或 Parallels 实例上运行 Docker Desktop 可能可以使用，但这并不能保证。有关的更多信息，请参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios" target="_blank" rel="noopener">在嵌套虚拟化场景中运行 Docker 桌面</a>。<h4 id="关于Windows容器"><a href="#关于Windows容器" class="headerlink" title="关于Windows容器"></a>关于Windows容器</h4></li></ul></li><li><a href="https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers" target="_blank" rel="noopener">在Windows容器之间切换</a></li><li><a href="https://github.com/docker/labs/blob/master/windows/windows-containers/README.md" target="_blank" rel="noopener">开始使用windows容器（Lab）</a></li><li><a href="https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports" target="_blank" rel="noopener">适用于Windows的Docker容器平台的文章和博客</a></li></ul><h3 id="1-2-Install-Docker-Desktop-on-Windows"><a href="#1-2-Install-Docker-Desktop-on-Windows" class="headerlink" title="1.2 Install Docker Desktop on Windows"></a>1.2 Install Docker Desktop on Windows</h3><h4 id="查看自己的电脑系统是否满足系统需求"><a href="#查看自己的电脑系统是否满足系统需求" class="headerlink" title="查看自己的电脑系统是否满足系统需求"></a>查看自己的电脑系统是否满足系统需求</h4><p>开始-设置-系统-关于，如下示例：<br><strong>设备规格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">设备名称ESR-20151030WHY</span><br><span class="line">处理器Intel(R) Core(TM) i5-4200U CPU @ 1.60GHz   2.30 GHz</span><br><span class="line">机带 RAM8.00 GB</span><br><span class="line">设备 ID9E4CA172-84E3-48EB-8909-8E0CCD2D66A1</span><br><span class="line">产品 ID00330-50000-00000-AAOEM</span><br><span class="line">系统类型64 位操作系统, 基于 x64 的处理器</span><br><span class="line">笔和触控没有可用于此显示器的笔或触控输入</span><br></pre></td></tr></table></figure><p><strong>Windows规格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">版本Windows 10 专业版</span><br><span class="line">版本号21H1</span><br><span class="line">安装日期‎2021/‎7/‎12</span><br><span class="line">操作系统内部版本19043.1083</span><br><span class="line">体验Windows Feature Experience Pack 120.2212.3530.0</span><br></pre></td></tr></table></figure><p><strong><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Enable the Windows Subsystem for Linux</a></strong></p><ol><li>以管理员身份打开 PowerShell 并运行:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure></li></ol><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line"></span><br><span class="line">部署映像服务和管理工具</span><br><span class="line">版本: 10.0.19041.844</span><br><span class="line"></span><br><span class="line">映像版本: 10.0.19043.1083</span><br><span class="line"></span><br><span class="line">启用一个或多个功能</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">操作成功完成。</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure><p><img src="docker_02_01.png" alt="docker install"></p><ol start="2"><li>Check requirements for running WSL 2<br>要更新到 wsl2，您必须运行 Windows 10.</li></ol><ul><li>For x64 systems: Version 1903 or higher, with Build 18362 or higher.</li><li>For ARM64 systems: Version 2004 or higher, with Build 19041 or higher.</li><li>Builds lower than 18362 do not support WSL 2. Use the <a href="https://www.microsoft.com/software-download/windows10" target="_blank" rel="noopener">Windows Update Assistant</a> to update your version of Windows.<br>To check your version and build number, select Windows logo key + R, type winver, select OK. <a href="http://ms-settings:windowsupdate/" target="_blank" rel="noopener">Update to the latest Windows version</a> in the Settings menu.</li></ul><ol start="3"><li>Enable Virtual Machine feature<br>在安装 wsl2之前，您必须启用虚拟机平台的可选特性。您的计算机将需要虚拟化能力来使用这个特性。<br>以管理员身份打开 PowerShell 并运行:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure></li></ol><p>重新启动计算机以完成 WSL 安装并更新到 wsl2。</p><ol start="4"><li>Download the Linux kernel update package<br>下载最新软件包:</li></ol><ul><li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener">WSL2 Linux kernel update package for x64 machines 针对 x64机器的 WSL2 Linux 内核更新包</a></li><li>运行上一步中下载的更新包。(双击运行——系统将提示您提高权限，选择“是”以批准此安装。)</li></ul><ol start="5"><li>将 WSL 2 设置为默认版本<br>打开 PowerShell 并运行以下命令，在安装新的 Linux 发行版时将 WSL 2设置为默认版本:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; wsl --set-default-version 2</span><br><span class="line">有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>检查系统的处理器，系统RAM，BIOS中是否开启了虚拟化</strong><br>打开 PowerShell 并运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; systeminfo</span><br><span class="line"></span><br><span class="line">主机名:           ESR-20151030WHY</span><br><span class="line">OS 名称:          Microsoft Windows 10 专业版</span><br><span class="line">OS 版本:          10.0.19043 暂缺 Build 19043</span><br><span class="line">OS 制造商:        Microsoft Corporation</span><br><span class="line">OS 配置:          独立工作站</span><br><span class="line">OS 构建类型:      Multiprocessor Free</span><br><span class="line">注册的所有人:     微软用户</span><br><span class="line">注册的组织:       微软中国</span><br><span class="line">产品 ID:          00330-50000-00000-AAOEM</span><br><span class="line">初始安装日期:     2021/7/12, 21:17:33</span><br><span class="line">系统启动时间:     2021/8/1, 16:05:23</span><br><span class="line">系统制造商:       LENOVO</span><br><span class="line">系统型号:         80EQCTO1WW</span><br><span class="line">系统类型:         x64-based PC</span><br><span class="line">处理器:           安装了 1 个处理器。</span><br><span class="line">                  [01]: Intel64 Family 6 Model 69 Stepping 1 GenuineIntel ~1600 Mhz</span><br><span class="line">BIOS 版本:        LENOVO 9DCN26WW(V2.07), 2014/9/23</span><br><span class="line">Windows 目录:     C:\WINDOWS</span><br><span class="line">系统目录:         C:\WINDOWS\system32</span><br><span class="line">启动设备:         \Device\HarddiskVolume1</span><br><span class="line">系统区域设置:     zh-cn;中文(中国)</span><br><span class="line">输入法区域设置:   zh-cn;中文(中国)</span><br><span class="line">时区:             (UTC+08:00) 北京，重庆，香港特别行政区，乌鲁木齐</span><br><span class="line">物理内存总量:     8,120 MB</span><br><span class="line">可用的物理内存:   4,186 MB</span><br><span class="line">虚拟内存: 最大值: 16,312 MB</span><br><span class="line">虚拟内存: 可用:   11,908 MB</span><br><span class="line">虚拟内存: 使用中: 4,404 MB</span><br><span class="line">页面文件位置:     C:\pagefile.sys</span><br><span class="line">域:               WorkGroup</span><br><span class="line">登录服务器:       \\ESR-20151030WHY</span><br><span class="line">修补程序:         安装了 4 个修补程序。</span><br><span class="line">                  [01]: KB5003254</span><br><span class="line">                  [02]: KB5000736</span><br><span class="line">                  [03]: KB5004945</span><br><span class="line">                  [04]: KB5003742</span><br><span class="line">网卡:             安装了 2 个 NIC。</span><br><span class="line">                  [01]: Realtek PCIe GBE Family Controller</span><br><span class="line">                      连接名:      本地连接</span><br><span class="line">                      状态:        媒体连接已中断</span><br><span class="line">                  [02]: Qualcomm Atheros AR956x Wireless Network Adapter</span><br><span class="line">                      连接名:      无线网络连接</span><br><span class="line">                      启用 DHCP:   是</span><br><span class="line">                      DHCP 服务器: 192.168.0.1</span><br><span class="line">                      IP 地址</span><br><span class="line">                        [01]: 192.168.0.195</span><br><span class="line">                        [02]: fe80::78dd:61d6:a6e8:e5d4</span><br><span class="line">Hyper-V 要求:     已检测到虚拟机监控程序。将不显示 Hyper-V 所需的功能。</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure><p><img src="docker_02_02.png" alt="cpu"></p><h2 id="2-在-Windows-上安装-Docker-桌面"><a href="#2-在-Windows-上安装-Docker-桌面" class="headerlink" title="2. 在 Windows 上安装 Docker 桌面"></a>2. 在 Windows 上安装 Docker 桌面</h2><ul><li>双击 Docker Desktop Installer.exe 运行安装程序。</li><li>当提示时，确保启用 Hyper-V Windows 特性或者安装 WSL 2所需的 Windows 组件选项在 Configuration 页面上被选中。<br><img src="docker_02_03.png" alt="docker configuration"><br><img src="docker_02_04.png" alt="docker configuration"><br><img src="docker_02_05.png" alt="docker configuration"></li><li>按照安装向导上的说明授权安装程序并继续安装。<br><img src="docker_02_06.png" alt="docker configuration"></li><li>安装成功后，单击“关闭”完成安装过程。<br><img src="docker_02_07.png" alt="doccker configuration"></li><li>如果您的管理帐户与您的用户帐户不同，则必须将该用户添加到 docker-users 组中。以管理员身份运行计算机管理并导航到 <code>Local Users and Groups &gt; Groups &gt; docker-users</code>。右击可将用户添加到组中。注销并重新登录以使更改生效。<h2 id="3-启动Docker桌面"><a href="#3-启动Docker桌面" class="headerlink" title="3. 启动Docker桌面"></a>3. 启动Docker桌面</h2>点击Docker Desktop图标即可启动。<br><img src="docker_02_08.png" alt="docker configuration"><br><img src="docker_02_09.png" alt="docker configuration"><br>当状态栏中的鲸图标保持稳定时，Docker 桌面就会启动并运行，并且可以从任何终端窗口访问。要了解更多信息，请参见<a href="https://docs.docker.com/docker-for-windows/#docker-settings-dialog" target="_blank" rel="noopener">Docker设置</a>。<h2 id="4-快速入门指南"><a href="#4-快速入门指南" class="headerlink" title="4. 快速入门指南"></a>4. 快速入门指南</h2>要根据需要运行快速启动指南，右键单击通知区域(或系统托盘)中的 Docker 图标，以打开 Docker Desktop 菜单，然后选择快速启动指南。</li></ul><h2 id="5-更新"><a href="#5-更新" class="headerlink" title="5. 更新"></a>5. 更新</h2><p>从 Docker Desktop 3.0.0开始，Docker Desktop 的更新将作为以前版本的 delta 更新提供。当更新可用时，dockerdesktop 会显示一个图标，指示更新版本的可用性。您可以选择何时开始下载和安装过程。<br><img src="docker_02_10.png" alt="docker configuration"><br>单击“下载更新”当您准备好下载更新时。这将在后台下载更新。下载更新后，单击 Update 并从 Docker 菜单重新启动。这将安装最新更新并重新启动 Docker Desktop 以使更改生效。</p><h2 id="6-卸载Docker-Desktop"><a href="#6-卸载Docker-Desktop" class="headerlink" title="6. 卸载Docker Desktop"></a>6. 卸载Docker Desktop</h2><p>从Windows卸载Docker Desktop:</p><ul><li>点击Windows的开始菜单，选择设置-应用-应用和功能</li><li>在应用列表中选择Docker Desktop，选择卸载</li><li>点击卸载确认你的选择。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://10veU.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://10veU.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习（一）概述</title>
    <link href="https://10veU.github.io/2021/09/08/Docker%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E8%BF%B0/"/>
    <id>https://10veU.github.io/2021/09/08/Docker学习（一）概述/</id>
    <published>2021-09-08T15:06:56.000Z</published>
    <updated>2021-09-08T15:05:05.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker学习（一）概述"><a href="#Docker学习（一）概述" class="headerlink" title="Docker学习（一）概述"></a>Docker学习（一）概述</h1><p>Docker 是一个用于开发、发布和运行应用程序的开放平台。Docker 使您能够将应用程序与基础结构分离开来，从而可以快速交付软件。使用 Docker，您可以像管理应用程序一样管理基础结构。通过利用 Docker 的快速发布、测试和部署代码的方法，可以显著减少编写代码和在生产环境中运行代码之间的延迟。<br><a href="https://www.docker.com/" target="_blank" rel="noopener">🐳Docker官网</a><br><a href="https://docs.docker.com/" target="_blank" rel="noopener">🐳官方文档</a></p><h2 id="1-Docker平台"><a href="#1-Docker平台" class="headerlink" title="1. Docker平台"></a>1. Docker平台</h2><p>Docker 提供了在称为容器的松散隔离环境中打包和运行应用程序的能力。隔离和安全性允许您在给定的主机上同时运行多个容器。容器是轻量级的，包含运行应用程序所需的所有内容，因此不需要依赖于主机上当前安装的内容。您可以轻松地在工作时共享容器，并确保与您共享的每个人都使用相同的工作方式。<br>Docker提供了工具和平台来管理容器的生命周期:  </p><ul><li>使用容器开发应用程序及其支持组件；</li><li>容器成为分发和测试应用程序的单元；</li><li>准备就绪后，将应用程序部署到生产环境中，作为容器或已编排的服务。无论您的生产环境是本地数据中心、云提供商，还是两者的混合体，这都是一样的。<h2 id="2-Docker可以做什么？"><a href="#2-Docker可以做什么？" class="headerlink" title="2. Docker可以做什么？"></a>2. Docker可以做什么？</h2></li><li>应用程序的快速、一致的交付</li><li>响应式部署和扩展</li><li>在同一个硬件上运行更多的工作负载</li></ul><h2 id="3-Docker体系结构"><a href="#3-Docker体系结构" class="headerlink" title="3. Docker体系结构"></a>3. Docker体系结构</h2><p>Docker 使用<code>client-Server</code>体系结构。Docker client与 Docker daemon进行对话，后者执行<strong>构建、运行和分发 Docker 容器</strong>的繁重工作。Docker client与 Docker daemon可以在同一个系统上运行，或者您可以将Docker client连接到远程Docker daemon。Docker client和Docker daemon使用 REST API、 UNIX 套接字或网络接口进行通信。另一个Docker client是  Docker Compose，它允许您处理由一组容器组成的应用程序。<br><img src="docker_platform.png" alt="Docker"></p><h3 id="3-1-Docker守护进程（Docker-daemon）"><a href="#3-1-Docker守护进程（Docker-daemon）" class="headerlink" title="3.1 Docker守护进程（Docker daemon）"></a>3.1 Docker守护进程（Docker daemon）</h3><p>Docker daemon(dockerd)监听 Docker API 请求并管理 Docker 对象，如镜像、容器、网络和数据卷（用于保存持久化数据）。守护进程还可以与其他守护进程通信，以管理 Docker 服务。</p><h3 id="3-2-Docker客户端（Docker-client）"><a href="#3-2-Docker客户端（Docker-client）" class="headerlink" title="3.2 Docker客户端（Docker client）"></a>3.2 Docker客户端（Docker client）</h3><p>Docker client(Docker)是许多 Docker 用户与 Docker 交互的主要方式。当您使用诸如 docker run 之类的命令时，客户端将这些命令发送给 dockerd，后者执行这些命令。Docker 命令使用 Docker API。Docker 客户端可以与多个守护进程通信。</p><h3 id="3-3-Docker注册中心（Docker-registries）"><a href="#3-3-Docker注册中心（Docker-registries）" class="headerlink" title="3.3 Docker注册中心（Docker registries）"></a>3.3 Docker注册中心（Docker registries）</h3><p>Dockerregistry 存储 Docker images。Docker Hub 是任何人都可以使用的公共注册中心，Docker 默认配置为在 Docker Hub 上查找镜像。你甚至可以运行自己的私人注册中心。<br>当您使用 docker pull 或 docker 运行命令时，所需的映像将从您配置的注册中心中提取出来。当您使用 docker push 命令时，您的映像将被推送到您配置的注册中心。</p><h3 id="3-4-Docker对象（Docker-objects）"><a href="#3-4-Docker对象（Docker-objects）" class="headerlink" title="3.4 Docker对象（Docker objects）"></a>3.4 Docker对象（Docker objects）</h3><p>当你使用 Docker 时，你正在创建和使用镜像、容器、网络、数据卷、插件和其他对象。</p><h4 id="镜像（images"><a href="#镜像（images" class="headerlink" title="镜像（images)"></a>镜像（images)</h4><p>镜像是一个只读模板，其中包含创建 Docker 容器的说明。通常，一个镜像基于另一个图像，并带有一些额外的定制。例如，你可以构建一个镜像基于 ubuntu 镜像，但是你也要安装Apache HTTP Server 和你的应用程序，以及运行你的应用程序所需的配置细节。<br>您可以创建自己的镜像，也可以只使用其他人创建并在注册表中发布的镜像。要构建您自己的镜像，您需要创建一个 Dockerfile，它使用一个简单的语法来定义创建映像和运行映像所需的步骤。Dockerfile 中的每条指令都在镜像中创建一个图层。当您更改 Dockerfile 并重新生成图像时，只会重新生成已更改的图层。与其他虚拟化技术相比，这是使镜像如此轻量化、小巧和快速的部分原因。</p><h4 id="容器（Containers）"><a href="#容器（Containers）" class="headerlink" title="容器（Containers）"></a>容器（Containers）</h4><p>容器是镜像的可运行实例。您可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器。您可以将容器连接到一个或多个网络，将存储器附加到容器上，甚至可以根据容器的当前状态创建新镜像。<br>默认情况下，容器与其他容器及其主机相对隔离较好。您可以控制容器的网络、存储或其他基础子系统与其他容器或主机的隔离程度。<br>容器是由其镜像以及创建或启动时提供给它的任何配置选项定义的。当一个容器被移除时，任何对其状态的更改，如果没有存储在持久性存储中的话，都会消失。</p><ul><li>示例 <code>docker run</code> 命令<pre><code class="bash">$ docker run -i -t ubuntu /bin/bash</code></pre>当您运行此命令时，会发生以下情况(假设您使用的是默认注册中心配置) :</li></ul><ol><li>如果你本地没有 ubuntu 镜像，Docker 会从你配置的注册中心中提取它，就像你手动运行 docker pull  ubuntu 一样。</li><li>Docker 创建一个新容器，就像您已经手动运行了一个 docker container create命令一样。</li><li>Docker 将一个读写文件系统分配给容器，作为它的最后一层。这允许正在运行的容器在其本地文件系统中创建或修改文件和目录。</li><li>由于您没有指定任何网络选项，因此 Docker 创建一个网络接口将容器连接到默认网络。这包括为容器分配一个 IP 地址。默认情况下，容器可以使用主机的网络连接连接到外部网络。</li><li>Docker 启动容器并执行/bin/bash。因为容器是交互式运行的，并且连接到您的终端(由于-i 和-t 标志) ，所以您可以在将输出记录到终端的同时使用键盘提供输入。</li><li>当键入 exit 以终止/bin/bash 命令时，容器将停止，但不会被删除。你可以重新启动或者删除它。<h2 id="4-Docker使用的基础技术"><a href="#4-Docker使用的基础技术" class="headerlink" title="4. Docker使用的基础技术"></a>4. Docker使用的基础技术</h2>并利用 Linux 内核的几个特性来实现其功能。Docker 使用namespaces技术提供称为容器的隔离工作区。运行容器时，Docker 为该容器创建一组名称空间。<br>这些名称空间提供了一个隔离层。容器的每个方面都运行在一个单独的名称空间中，它的访问受到该名称空间的限制。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://10veU.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://10veU.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://10veU.github.io/2021/09/08/hello-world/"/>
    <id>https://10veU.github.io/2021/09/08/hello-world/</id>
    <published>2021-09-08T15:05:05.588Z</published>
    <updated>2021-09-08T15:05:05.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一切始于<code>Hello World</code>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="其他" scheme="https://10veU.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="HelloWorld" scheme="https://10veU.github.io/tags/HelloWorld/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud之Consul 服务注册中心</title>
    <link href="https://10veU.github.io/2021/09/01/Spring-Cloud%E4%B9%8BConsul-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>https://10veU.github.io/2021/09/01/Spring-Cloud之Consul-服务注册中心/</id>
    <published>2021-09-01T19:30:44.000Z</published>
    <updated>2021-09-08T15:05:05.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Cloud之Consul-服务注册中心"><a href="#Spring-Cloud之Consul-服务注册中心" class="headerlink" title="Spring Cloud之Consul 服务注册中心"></a>Spring Cloud之Consul 服务注册中心</h1><h2 id="1-什么是Consul"><a href="#1-什么是Consul" class="headerlink" title="1.什么是Consul?"></a>1.什么是Consul?</h2><p>Consul 是 HashiCorp 公司推出的开源产品，是一种服务网格(Service Mesh)解决方案。用于实现分布式系统的服务发现、服务隔离、服务配置，这些功能中的每一个都可以根据需要单独使用，也可以同时使用所有功能以构建完整的服务网格(Service Mesh)。Consul 官网目前主要推 Consul 在服务网格(Service Mesh)中的使用。</p><p>与其它分布式服务注册与发现的方案相比，Consul 的方案更“一站式”——内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具。Consul 本身使用 go 语言开发，具有跨平台、运行高效等特点，也非常方便和 Docker 配合使用。</p><blockquote><p>Service Mesh可参考下面的文章<br><a href="https://zhuanlan.zhihu.com/p/61901608" target="_blank" rel="noopener">什么是Service Mesh？</a></p></blockquote><h2 id="2-Consul的主要特性"><a href="#2-Consul的主要特性" class="headerlink" title="2. Consul的主要特性"></a>2. Consul的主要特性</h2><p>Consul 的主要特点是：</p><ul><li><strong>服务发现</strong>：Consul 的客户端可以注册一个服务，例如 api 或 mysql，其他客户端可以使用 Consul 来发现给定服务的提供者。使用 DNS 或 HTTP，应用程序可以轻松找到它们所依赖的服务。</li><li><strong>健康检查</strong>：Consul 客户端可以提供任意数量的健康检查，或者与给定的服务相关联（“网络服务器是否返回 200 OK”），或者与本地节点（“内存利用率是否低于 90%”）相关联。操作员可以使用此信息来监控集群健康状况，并且服务发现组件可以使用它来将流量路由到不健康的主机之外。  </li><li><strong>KV 存储</strong>：应用程序可以将 Consul 的分层键/值存储用于多种目的，包括动态配置、功能标记、协调、领导选举等。简单的 HTTP API 使其易于使用。</li><li><strong>安全的服务通信</strong>：Consul 可以为服务生成和分发 TLS 证书，以建立相互的 TLS 连接。意图可用于定义允许哪些服务进行通信。可以通过实时更改意图轻松管理服务分段，而不是使用复杂的网络拓扑和静态防火墙规则。</li><li><strong>多数据中心</strong>：Consul 支持开箱即用的多个数据中心。这意味着 Consul 的用户不必担心构建额外的抽象层以扩展到多个区域。</li></ul><p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其非常适合现代、弹性的基础设施。</p><h2 id="3-Consul的基础架构"><a href="#3-Consul的基础架构" class="headerlink" title="3. Consul的基础架构"></a>3. Consul的基础架构</h2><p>Consul是一个分布式系统，设计用于在一组节点上运行。节点可以是物理服务器、云实例、虚拟机或容器。连接在一起，运行在上面的节点集称为<strong>数据中心</strong>。在数据中心中，Consul可以在两种模式下运行: <strong>服务端模式</strong>和<strong>客户端模式</strong>。服务器代理为Consul维护一致的状态。客户端是一个运行在每个服务运行节点上的轻量级进程。一个数据中心将有3-5个服务器和许多客户机。<br><img src="DataCenter.png" alt="数据中心">  </p><h3 id="从大视角分析Consul的架构"><a href="#从大视角分析Consul的架构" class="headerlink" title="从大视角分析Consul的架构"></a>从大视角分析Consul的架构</h3><p><img src="consul-arch.png" alt="consul-arch"><br>首先，图中有两个数据中心，分别为 Datacenter1 和 Datacenter2 。Consul 非常好的支持多个数据中心，每个数据中心内，有客户端和服务器端，服务器一般为 3~5 个，这样可以在稳定和性能上达到平衡，因为更多的机器会使数据同步很慢。不过客户端是没有限制的，可以有成千上万个。</p><p>　　数据中心内的所有节点都会加入到 Gossip (流言)协议。这就意味着有一个 Gossip 池，其中包含这个数据中心所有的节点。客户端不需要去配置服务器地址信息，发现服务工作会自动完成。检测故障节点的工作不是放在服务器端，而是分布式的；这使得失败检测相对于本地化的心跳机制而言，更具可拓展性。在选择 leader 这种重要的事情发生的时候，数据中心被用作消息层来做消息广播。</p><p>　　每个数据中心内的服务器都是单个 Raft 中节点集的一部分。这意味着他们一起工作，选择一个单一的领导者——一个具有额外职责的选定的服务器。leader 负责处理所有查询和事物。事物也必须作为同步协议的一部分复制到节点集中的所有节点。由于这个要求，当非 leader 服务器接收到 RPC 请求时，就会将请求其转发给集群 leader。</p><p>　　服务器端节点同时也作为 WAN Gossip 池的一部分，WAN 池和 LAN 池不同的是，它针对网络高延迟做了优化，而且只包含其他Consul 服务器的节点。这个池的目的是允许数据中心以最少的消耗方式发现对方。启动新的数据中心与加入现有的 WAN Gossip 一样简单。因为这些服务器都在这个池中运行，它还支持跨数据中心请求。当服务器收到对不同数据中心的请求时，它会将其转发到正确数据中心中的随机服务器。那个服务器可能会转发给本地的 leader。</p><p>　　这样会使数据中心的耦合非常低。但是由于故障检测，连接缓存和复用，跨数据中心请求相对快速可靠。</p><p>　　总的来说，数据不会在不同的数据中心之间做复制备份。当收到一个请求处于别的数据中心的资源时，本地的 Consul 服务器会发一个 RPC 请求到远端的 Consul 服务器，然后返回结果。如果远端数据中心处于不可用状态，那么这么资源也会不可用，但这不影响本地的数据中心。在一些特殊的情况下，有限的数据集会被跨数据中心复制备份，比如说 Consul 内置的 ACL 复制能力，或者像 consul-replicate 这样的外部工具。</p><h2 id="4-Consul的工作原理"><a href="#4-Consul的工作原理" class="headerlink" title="4. Consul的工作原理"></a>4. Consul的工作原理</h2><p><img src="consul_service.png" alt="consul_service"></p><h3 id="服务发现以及注册"><a href="#服务发现以及注册" class="headerlink" title="服务发现以及注册"></a>服务发现以及注册</h3><p>当服务 Producer 启动时，会将自己的 Ip/host 等信息通过发送请求告知 Consul，Consul 接收到 Producer 的注册信息后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康。</p><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>当 Consumer 请求 Product 时，会先从 Consul 中拿到存储 Product 服务的 IP 和 Port 的临时表(temp table)，从temp table 表中任选一个· Producer 的 IP 和 Port， 然后根据这个 IP 和 Port，发送访问请求；temp table 表只包含通过了健康检查的 Producer 信息，并且每隔 10s（默认）更新。</p><h2 id="5-Consul的安装"><a href="#5-Consul的安装" class="headerlink" title="5. Consul的安装"></a>5. Consul的安装</h2><p>Eureka 其实就是个 Servlet 程序，跑在 Servlet 容器中；Consul 则是用 go 语言编写的第三方工具需要单独安装使用。<br><a href="https://www.consul.io/downloads" target="_blank" rel="noopener">Download Consul</a></p><h3 id="Windows下单节点安装"><a href="#Windows下单节点安装" class="headerlink" title="Windows下单节点安装"></a>Windows下单节点安装</h3><p>下载一个Consul的windows安装包<br><img src="consul_package.png" alt="consul_package"><br>cd到对应的目录下，使用cmd启动Consul。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -dev表示开发模式运行，另外还有 -server 表示服务模式运行</span><br><span class="line">consul agent -dev -client=0.0.0.0</span><br></pre></td></tr></table></figure><blockquote><p>Consul在开发模式下启动本地代理，这是一种内存服务器模式，为了方便使用，启用了一些常见特性(尽管存在安全风险) ，并且关闭了所有持久性选项。这种模式不安全也不可伸缩，但是不需要额外的配置就可以轻松地实验大多数领事的功能。</p></blockquote><p>为了方便启动，也可以在 consul.exe 同级目录下创建一个脚本来启动，脚本内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev -client=0.0.0.0</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>执行脚本之后看到如下信息：<br><img src="consul_run.png" alt="consul run"><br>访问管理后台：<a href="http://localhost:8500/" target="_blank" rel="noopener">http://localhost:8500/</a> 看到下图意味着我们的 Consul 服务启动成功了。</p><h2 id="6-Consul入门案例"><a href="#6-Consul入门案例" class="headerlink" title="6. Consul入门案例"></a>6. Consul入门案例</h2><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p><a href="https://gitee.com/I10veU/springcloud-demo" target="_blank" rel="noopener">基础环境</a><br><strong>注册中心</strong><br> <code>consule.exe</code>（从Consul官网下载）<br><strong>服务提供者</strong><br><code>spring-cloud-demo-service-provider</code><br><strong>服务消费者</strong><br><code>spring-cloud-demo-service-consumer</code>  </p><h4 id="服务接入注册中心"><a href="#服务接入注册中心" class="headerlink" title="服务接入注册中心"></a>服务接入注册中心</h4><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud consul 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring boot actuator 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置 Consul 注册中心</span></span><br><span class="line"><span class="attr">  consul:</span></span><br><span class="line">    <span class="comment"># 注册中心的访问地址</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8500</span></span><br><span class="line">    <span class="comment"># 服务发现相关配置</span></span><br><span class="line"><span class="attr">    discovery:</span></span><br><span class="line"><span class="attr">      register:</span> <span class="literal">false</span>                               <span class="comment"># 是否需要注册</span></span><br><span class="line"><span class="attr">      instance-id:</span> <span class="string">$&#123;spring.application.name&#125;</span>    <span class="comment"># 注册实例 id（必须唯一）</span></span><br><span class="line"><span class="attr">      service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span>      <span class="comment"># 服务名称</span></span><br><span class="line"><span class="attr">      port:</span> <span class="string">$&#123;server.port&#125;</span>                          <span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span>                       <span class="comment"># 是否使用 ip 地址注册</span></span><br><span class="line"><span class="attr">      ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span> <span class="comment"># 服务请求 ip</span></span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>访问<a href="http://localhost:9090/order/1" target="_blank" rel="noopener">http://localhost:9090/order/1</a>结果如下：<br><img src="service_result.png" alt="service_result"></p><h2 id="7-Consul集群部署"><a href="#7-Consul集群部署" class="headerlink" title="7. Consul集群部署"></a>7. Consul集群部署</h2><p><a href="https://learn.hashicorp.com/tutorials/consul/deployment-guide?in=consul/production-deploy" target="_blank" rel="noopener">Deployment Guide</a></p><hr><p>参考资料：<br><a href="https://www.consul.io/" target="_blank" rel="noopener">Consul官网</a><br><a href="https://blog.csdn.net/qwe86314/article/details/95094751" target="_blank" rel="noopener">Consul注册中心介绍</a><br><a href="https://zhuanlan.zhihu.com/p/61901608" target="_blank" rel="noopener">什么是Service Mesh</a><br><a href="https://www.servicemesher.com/" target="_blank" rel="noopener">Service Mesh中文社区</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="https://10veU.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/tags/Spring-Cloud/"/>
    
      <category term="注册中心" scheme="https://10veU.github.io/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建免费个人博客</title>
    <link href="https://10veU.github.io/2019/10/09/Hexo-GitHub%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://10veU.github.io/2019/10/09/Hexo-GitHub搭建免费个人博客/</id>
    <published>2019-10-09T16:42:07.000Z</published>
    <updated>2021-09-08T15:05:05.572Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head><meta name="generator" content="Hexo 3.9.0">     <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script>     <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script> </head> <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.11.2/css/all.css">  <h1 id="Hexo-GitHub免费搭建个人博客"><a href="#Hexo-GitHub免费搭建个人博客" class="headerlink" title="Hexo+GitHub免费搭建个人博客"></a>Hexo+GitHub免费搭建个人博客</h1><blockquote><p>作者：大大蜡笔小小新    </p></blockquote><h2 id="1-Hexo框架的介绍"><a href="#1-Hexo框架的介绍" class="headerlink" title="1.  Hexo框架的介绍"></a>1. <i class="fas fa-blog"></i> Hexo框架的介绍</h2><p><code>Hexo</code>的官方介绍：<code>A fast,simple&amp;powerful blog framework</code>。  </p><p><code>Hexo</code>框架具有以下特点：  </p><ul><li>快速搭建</li><li>支持<code>Markdown</code>语法  </li><li>支持一键部署  </li><li>丰富的主题和插件  </li></ul><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.  环境准备"></a>2. <i class="fas fa-home"></i> 环境准备</h2><h3 id="2-1申请一个GitHub账户"><a href="#2-1申请一个GitHub账户" class="headerlink" title="2.1申请一个GitHub账户"></a>2.1申请一个<code>GitHub</code>账户</h3><p>  <a href="https://github.com/" target="_blank" rel="noopener"><code>GitHub</code>账户申请</a></p><p>  <a href="https://help.github.com/cn" target="_blank" rel="noopener"><code>GitHub</code>疑问解答</a></p><h3 id="2-2搭建Hexo需要的环境"><a href="#2-2搭建Hexo需要的环境" class="headerlink" title="2.2搭建Hexo需要的环境"></a>2.2搭建<code>Hexo</code>需要的环境</h3><p>  如何安装<code>Hexo</code>及安装<code>Hexo</code>需要的环境，可以参考<code>Hexo</code>官方文档  </p><p>  <a href="https://hexo.io/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a>  </p><h3 id="2-3环境验证"><a href="#2-3环境验证" class="headerlink" title="2.3环境验证"></a>2.3环境验证</h3><p><code>Node.js</code>和<code>Git</code>安装是否成功?  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 <span class="number">10</span>.<span class="number">0</span>.<span class="number">17134</span>.<span class="number">590</span>]  </span><br><span class="line">(c) <span class="number">2018</span> Microsoft Corporation。保留所有权利。    </span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">lenovopc</span>&gt;<span class="title">node</span> -<span class="title">v</span>  </span></span><br><span class="line"><span class="function"><span class="title">v8</span>.11.2    </span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">lenovopc</span>&gt;<span class="title">npm</span> -<span class="title">v</span>  </span></span><br><span class="line"><span class="function">5.6.0</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">E</span>:\<span class="title">Git</span>&gt;<span class="title">git</span> --<span class="title">version</span>  </span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">version</span> 2.16.2.<span class="title">windows</span>.1  </span></span><br><span class="line"><span class="function"><span class="title">E</span>:\<span class="title">Git</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Node.js</code>和<code>npm</code>的关系  </p><blockquote><p><i class="fas fa-quote-left fa-3x fa-pull-left"></i><code>Node.js</code>是<code>javascript</code>的一种运行环境，是对<code>Google V8</code>引擎进行的封装。是一个服务器端的<code>javascript</code>的解释器。<br> 包含关系:<code>Node.js</code>中含有<code>npm</code>，比如说你安装好<code>Node.js</code>，你打开<code>cmd</code>输入<code>npm -v</code>会发现npm的版本号，说明<code>npm</code>已经安装好。<br>引用大神的总结:<br>其实<code>npm</code>是<code>Node.js</code>的包管理器（<code>package manager</code>）。我们在<code>Node.js</code>上开发时，会用到很多别人已经写好的<code>javascript</code>代码，<br>如果每当我们需要别人的代码时，都根据名字搜索一下，下载源码，解压，再使用，会非常麻烦。于是就出现了包管理器<code>npm</code>。<br>大家把自己写好的源码上传到<code>npm</code>官网上，如果要用某个或某些个，直接通过<code>npm</code>安装就可以了，不用管那个源码在哪里。<br>并且如果我们要使用模块<code>A</code>，而模块<code>A</code>又依赖模块<code>B</code>，模块<code>B</code>又依赖模块<code>C</code>和<code>D</code>，此时<code>npm</code>会根据依赖关系， 把所有依赖的包都下载下来并且管理起来。试想如果这些工作全靠我们自己去完成会多么麻烦！其实就是类似于<code>Java</code>中的<code>Maven</code>。  </p></blockquote><h2 id="3-下载及安装Hexo"><a href="#3-下载及安装Hexo" class="headerlink" title="3.  下载及安装Hexo"></a>3. <i class="fas fa-cloud-download-alt"></i> 下载及安装Hexo</h2><h3 id="3-1下载及安装Hexo"><a href="#3-1下载及安装Hexo" class="headerlink" title="3.1下载及安装Hexo"></a>3.1下载及安装<code>Hexo</code></h3><p>  在<code>cmd</code>终端窗口执行下载安装命令  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>  安装完成如下图：  </p><p>  <img src="%E5%AE%89%E8%A3%85Hexo.png" alt="安装Hexo"></p><p>  执行命令判断<code>Hexo</code>安装是否成功</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>  安装成功如下：  </p><p>  <img src="%E5%AE%89%E8%A3%85Hexo%E6%88%90%E5%8A%9F.png" alt="安装Hexo成功"></p><h3 id="3-2初始化博客"><a href="#3-2初始化博客" class="headerlink" title="3.2初始化博客"></a>3.2初始化博客</h3><blockquote><p>以下操作尽可能都在<code>Git</code>终端操作</p></blockquote><p>  首先在自己本地磁盘创建一个安装目录，这里以<code>Hexo</code>为例；</p><p>  <img src="Hexo%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.png" alt="Hexo安装目录"></p><p>  切换到此文件夹目录下执行初始化命令  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>  <img src="Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%AD.png" alt="Hexo初始化中"></p><p>  如果你未自己手动创建文件夹，也可通过以下的命令去初始化<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="comment">// 进入博客文件夹，&lt;folder&gt;为文件夹的名称</span></span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line"><span class="comment">// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>  初始化完成  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">// 生成网页。</span></span><br><span class="line">hexo s <span class="comment">// 将生成的网页放在了本地服务器。</span></span><br></pre></td></tr></table></figure><p>  <img src="%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%8C%E6%88%90.png" alt="初始化完成"></p><p>  通过提示的信息，访问本地服务器  </p><p>  <img src="%E5%8D%9A%E5%AE%A2.png" alt="博客"></p><h2 id="4-配置博客"><a href="#4-配置博客" class="headerlink" title="4.  配置博客"></a>4. <i class="fas fa-cog fa-spin"></i> 配置博客</h2><p>当然，目前的博客界面不是很美观，如果想做的比较有点逼格，当然还是得个性化定制下，我们可以去<code>Hexo</code>官网下载自己喜欢的主题。  </p><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官方主题</a></p><p>选择你喜欢的主题，复制它的链接，<code>clone</code>到本地博客的<code>themes</code>目录下  </p><p><img src="%E5%85%8B%E9%9A%86%E4%B8%BB%E9%A2%98%E4%B8%AD.png" alt="克隆主题中"></p><p><img src="%E4%B8%BB%E9%A2%98%E5%85%8B%E9%9A%86%E5%AE%8C%E6%88%90.png" alt="主题克隆完成"></p><p><img src="%E5%85%8B%E9%9A%86%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%B8%BB%E9%A2%98.png" alt="克隆到本地的主题"></p><p>配置博客我们首先就得了解博客文件结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|node_modules:node.js的相关组件</span><br><span class="line">|scaddolds: 定义的一些东西，固定的</span><br><span class="line">|soorce: Markdown博客文档</span><br><span class="line">|themes: 一些主题</span><br><span class="line">|主题名-|</span><br><span class="line">       |主题内容（包含README.md,config.yml）</span><br><span class="line">|config: 配置文件（博客全局配置）</span><br><span class="line">|db.json: 生成的一些东西</span><br><span class="line">|package.json:  当前npm的相关的包</span><br><span class="line">|package-lock.json: npm管理的一些东西</span><br></pre></td></tr></table></figure><p>按照主题的<code>README.md</code>文档进行配置。<br>例如我使用的博客主题是<a href="https://github.com/Sariay/hexo-theme-Annie" target="_blank" rel="noopener">Annie</a>  </p><h2 id="5-博客个性化设置"><a href="#5-博客个性化设置" class="headerlink" title="5.  博客个性化设置"></a>5. <i class="fas fa-user-cog"></i> 博客个性化设置</h2><p>我们按照自己选择的<code>Hexo</code>主题进行配置后，如果想根据自己的喜好做相应的修改当然也是可以的。比如可以给博客添加图片、视频、音乐播放器等等。  </p><h3 id="5-1博客中添加图片1"><a href="#5-1博客中添加图片1" class="headerlink" title="5.1博客中添加图片1"></a>5.1博客中添加图片<a href="https://vwin.github.io/2018/08/07/Hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">1</a></h3><p>博客中的图片添加有以下几种方式：</p><h4 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h4><ul><li>绝对路径<br>直接在主题下的<code>img</code>（存储图片文件夹，不同的主题存储图片的名称可能不同）文件夹下(themes/所选主题文件夹/source/img),<code>/img/图片名称.jpg</code>这张图片，就可以使用以下方式访问： <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](/img/图片名称.jpg)</span><br></pre></td></tr></table></figure></li></ul><p>eg:<br><img src="/img/wechat.jpg" alt="wechat">   </p><ul><li>相对路径<br>图片除了可以放在统一的<code>img</code>文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置博客根目录下的<code>_config.yml</code>来生成。  </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将_config.yml文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>文件夹中，文章就可以使用相对路径引用图片资源了。<code>_posts/post_name/图片名称.jpg</code>这张图片可以用以下方式访问：  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](图片名称.jpg)</span><br></pre></td></tr></table></figure><p>eg:<br><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="微信公众号">  </p><h4 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h4><p>除了在本地存储图片，还可以将图片上传到一些免费的 <code>CDN</code>服务中。因国内访问<code>GitHub</code>速度较慢，所以将突破放到国内图床上，然后引用外链接是常用的方法。<br>常用图床总结：<a href="https://sspai.com/post/40499" target="_blank" rel="noopener">https://sspai.com/post/40499</a><br>常用的图床有：七牛云、腾讯云、微博图床等。  </p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>使用<code>github</code>存储博客图片</p><ol><li>创建一个空的仓库  </li><li>将图片<code>push</code>到仓库中</li><li>点击图片进去，有个<code>download</code>，右键复制链接</li><li>将链接插入文章<br>引用格式：  </li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![logo](https://github.com/xxxx/xx.jpg)</span><br><span class="line">```  </span><br><span class="line">#### 使用插件  </span><br><span class="line"> <span class="number">1</span>. 首先把`blog（hexo）`目录下的`_config.yml`里的`psot_asset_folder:`设置为`true`</span><br><span class="line"> <span class="number">2</span>. 在`blog（hexo）`目录下执行:  </span><br><span class="line">```<span class="built_in">cmd</span>  </span><br><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>blog（hexo）</code>目录下<code>Git Bash Here</code>，运行<code>hexo n &quot;博客文章名&quot;</code>来生成<code>md</code>博客时，会在<code>_post</code>目录下看到一个与博客同名的文件夹。  </li><li>将想要上传的图片先扔到文件夹下，然后在博客中使用<code>markdown</code>的格式引入图片：  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![你想要输入的替代文字](xxxx/图片名.jpg)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p></blockquote><h3 id="5-2博客中添加视频2"><a href="#5-2博客中添加视频2" class="headerlink" title="5.2博客中添加视频2"></a>5.2博客中添加视频<a href="https://baijiahao.baidu.com/s?id=1623914788952059989&wfr=spider&for=pc" target="_blank" rel="noopener">2</a></h3><blockquote><p>以<code>bilibili</code>为例，B站无广告   </p></blockquote><ul><li>去B站获取视频外链<br><img src="%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E5%A4%96%E9%93%BE.png" alt="获取视频外链">  </li><li>在文章中插入视频外链<br>我们知道在<code>md</code>中可以直接插入<code>html</code>代码。这里我们就插入视频外链。代码如下：  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=68662896&amp;cid=118997493&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到效果令人很不满意。  </p><ul><li>修改代码，美化播放器样式。<br>代码如下：  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative; width: 100%; height: 0;padding-bottom: 75%;"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=68662896&amp;cid=118997493&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"position: absolute; width: 100%; height: 100%; left: 0; top: 0;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3博客中添加网易云音乐歌单"><a href="#5-3博客中添加网易云音乐歌单" class="headerlink" title="5.3博客中添加网易云音乐歌单"></a>5.3博客中添加网易云音乐歌单</h3><ul><li>（以 Chrome 为例，其他浏览器类似）打开歌单页面，在“生成外链播放器”上右击，点击检查（审查元素 <code>ctrl+shift+i</code>）；<br><img src="%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE.png" alt="网易云音乐外链"></li><li>接着找到生成外链播放器这段文字直接双击复制前面的<code>/outchain/0/170792779/</code><br><img src="%E5%A4%96%E9%93%BEid.png" alt="外链id">  </li><li>然后修改歌单链接示例：<a href="http://music.163.com/#/outchain/0/170792779/（可以修改自己喜欢的播放器尺寸，播放模式后再复制代码）" target="_blank" rel="noopener">http://music.163.com/#/outchain/0/170792779/（可以修改自己喜欢的播放器尺寸，播放模式后再复制代码）</a><br><img src="%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95.png" alt="网易云音乐歌单">    </li></ul><blockquote><p>由于版权限制，好多歌曲可能在播放器中无法播放，毕竟没有收费，将就用吧！😂</p></blockquote><h3 id="5-4博客中实现在线联系功能"><a href="#5-4博客中实现在线联系功能" class="headerlink" title="5.4博客中实现在线联系功能"></a>5.4博客中实现在线联系功能</h3><p>在线联系功能可以使访客及时，快捷的与博主交流，也能帮助博主及时的解决访客提出的博文中的问题。<code>Hexo</code>实现在线联系功能主要有以下两种方式:  </p><h4 id="DaoVoice实现在线联系"><a href="#DaoVoice实现在线联系" class="headerlink" title="DaoVoice实现在线联系"></a>DaoVoice实现在线联系</h4><ul><li><p>注册登录<code>DaoVoice</code><br><a href="http://dashboard.daovoice.io/get-started?invite_code=75159429" target="_blank" rel="noopener">注册登录DaoVoice</a>  </p></li><li><p><code>DaoVoice</code>接入<br><a href="http://guide.daocloud.io/daovoice/daovoice-9151028.html" target="_blank" rel="noopener"><code>DaoVoice</code>接入</a>  </p></li><li><p><code>Daovoice</code>绑定微信（可选）<br><code>DaoVoice</code>虽然可以很好的与访客交流，但是还是不能像微信聊天一样方便，所以我们绑定微信，瞬间秒回访客消息，不再等待！<br><img src="DaoVoice%E7%BB%91%E5%AE%9A%E5%BE%AE%E4%BF%A1.png" alt="DaoVoice绑定微信"></p><h4 id="HEXO的博客添加gitter在线交流"><a href="#HEXO的博客添加gitter在线交流" class="headerlink" title="HEXO的博客添加gitter在线交流"></a>HEXO的博客添加gitter在线交流</h4><p><a href="https://blog.csdn.net/u011606307/article/details/89504541" target="_blank" rel="noopener">给基于HEXO的博客添加gitter在线交流</a></p><h2 id="6-持续集成Hexo博客"><a href="#6-持续集成Hexo博客" class="headerlink" title="6.  持续集成Hexo博客"></a>6. <i class="fab fa-dev"></i> 持续集成Hexo博客</h2><h4 id="6-1使用Jenkins持续集成Hexo博客3"><a href="#6-1使用Jenkins持续集成Hexo博客3" class="headerlink" title="6.1使用Jenkins持续集成Hexo博客3"></a>6.1使用Jenkins持续集成Hexo博客<a href="https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/" target="_blank" rel="noopener">3</a></h4><p><a href="http://www.sevenyuan.cn/2019/03/18/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90Hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">使用Jenkins持续集成Hexo博客</a>  </p><h4 id="6-2用TravisCI持续集成Hexo博客"><a href="#6-2用TravisCI持续集成Hexo博客" class="headerlink" title="6.2用TravisCI持续集成Hexo博客"></a>6.2用TravisCI持续集成Hexo博客</h4><p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI个人免费站点</a><br><a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI企业收费站点</a>  </p><h5 id="6-2-1核心概念"><a href="#6-2-1核心概念" class="headerlink" title="6.2.1核心概念"></a>6.2.1核心概念</h5></li><li><p>什么是持续集成（CI）？<a href="https://docs.travis-ci.com/user/for-beginners/#breaking-the-build" target="_blank" rel="noopener">4</a><br>CI(<code>Continuous Integration</code>)翻译为持续集成。<br>持续集成是经常合并小的代码更改的实践，而不是在开发周期结束时合并大的更改。目的是通过以较小的增量开发和测试来构建更健康的软件。这就是<code>Travis CI</code>出现的地方。<br>作为一个持续集成平台，<code>Travis CI</code>通过自动构建和测试代码更改来支持您的开发过程，并提供有关更改成功的即时反馈。<code>Travis CI</code>还可以通过管理部署和通知来自动化开发过程的其他部分。  </p><h5 id="6-2-2准备条件"><a href="#6-2-2准备条件" class="headerlink" title="6.2.2准备条件"></a>6.2.2准备条件</h5><p>要开始使用Travis CI，请确保您具有：</p></li><li><p>一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>的帐户。  </p></li><li><p><a href="https://help.github.com/en/github/importing-your-projects-to-github" target="_blank" rel="noopener">托管在GitHub上的项目</a>的所有者权限。  </p><ul><li>博客源码仓库  </li><li>博客部署仓库  <h5 id="6-2-3-关联仓库"><a href="#6-2-3-关联仓库" class="headerlink" title="6.2.3 关联仓库"></a>6.2.3 关联仓库</h5>使用GitHub登录到<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI个人免费站点</a><br><img src="travis_login.png" alt="travis login"><br>关联到持续集成的仓库<br><img src="repo.png" alt="持续集成的仓库">  </li></ul></li></ul><p><strong>配置 Access Token</strong><br>如下图，Environment Variables 区域就是用来添加权限信息的。我们需要填写一个Token的名称和值，该名称可以在配置文件中以 ${变量名} 来引用，该Token我们需要从Github中获取。<br><img src="travis_setting.png" alt><br><strong>从Github获取Access Token</strong><br>在Github的setting页面，左侧面板选择Developer settings然后Personal access tokens, 右上角点击Generate new token。生成token时候需要确定访问scope，这里我们选择我们的repo即可。<br><img src="travis_token.png" alt><br>重要：生成的token只有第一次可见，一定要保存下来备用。<br><img src="token.png" alt="token"><br><strong>在Travis CI中配置</strong><br>将上面获取到的token添加到 Environment Variables 部分，值为该 token ,而名称即为上面设置的 Travis_Token (请更改为个人所设置名称)。不勾选后面的 Display value in build log . 否则会在日志文件中暴露你的 token 信息，而日志文件是公开可见的。</p><p>至此我们已经配置好了要构建的仓库和访问的token，接下来就是如何构建的问题了。<br><strong>配置.travis.yml（如果没有，新建)</strong><br>我个人的.travis.yml 可供参考</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定构建环境是Node.js，当前版本是稳定版</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr"> global:</span></span><br><span class="line"><span class="attr">   - URL_REPO:</span> <span class="string">github.com/10veU/10veU.github.io.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置钩子只检测blog-source分支的push变动</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置缓存文件</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在构建之前安装hexo环境</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装git插件和搜索功能插件</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清缓存，生成网页操作</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  github_token:</span> <span class="string">$GH_TOKEN</span>  <span class="comment"># Set in the settings page of your repository, as a secure variable</span></span><br><span class="line"><span class="attr">  keep_history:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  local-dir:</span> <span class="string">public</span></span><br><span class="line"><span class="comment"># configure notifications (email, IRC, campfire etc)</span></span><br><span class="line"><span class="comment"># please update this section to your needs!</span></span><br><span class="line"><span class="comment"># https://docs.travis-ci.com/user/notifications/</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">514084647</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">  on_success:</span> <span class="string">change</span></span><br><span class="line"><span class="attr">  on_failure:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>注意：需要将配置文件中的 GH_TOKEN 换成我们自己设定的名称，这里我的配置应该是 Travis_token 即 - git push –force –quiet “https://${Travis_token}@${GH_REF}” master:master # GH_TOKEN是在Travis中配置token的名称。 还要更改 GH_REF 中我们的博客仓库的地址。<br><img src="travis_success.png" alt="travis_success"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo博客" scheme="https://10veU.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="GitHub" scheme="https://10veU.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://10veU.github.io/tags/Hexo/"/>
    
      <category term="博客" scheme="https://10veU.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
