<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Wang-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://10veU.github.io/"/>
  <updated>2021-12-06T12:28:19.001Z</updated>
  <id>https://10veU.github.io/</id>
  
  <author>
    <name>XiaoJie Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://10veU.github.io/2021/12/06/hello-world/"/>
    <id>https://10veU.github.io/2021/12/06/hello-world/</id>
    <published>2021-12-06T12:28:19.001Z</published>
    <updated>2021-12-06T12:28:19.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一切始于<code>Hello World</code>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="其他" scheme="https://10veU.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="HelloWorld" scheme="https://10veU.github.io/tags/HelloWorld/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程（一） 基础篇</title>
    <link href="https://10veU.github.io/2021/12/01/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://10veU.github.io/2021/12/01/Java并发编程（一）-基础篇/</id>
    <published>2021-12-01T16:02:38.000Z</published>
    <updated>2021-12-06T12:28:18.981Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java并发编程（一）-基础篇"><a href="#Java并发编程（一）-基础篇" class="headerlink" title="Java并发编程（一） 基础篇"></a>Java并发编程（一） 基础篇</h1><h2 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a>1. 进程和线程</h2><h3 id="1-1-什么是进程（Process）"><a href="#1-1-什么是进程（Process）" class="headerlink" title="1.1 什么是进程（Process）"></a>1.1 什么是进程（Process）</h3><p><strong>进程是操作系统进行资源分配的最小单位</strong>。因为现在的操作系统都是多任务的操作系统，多任务操作系统是允许多个进程在一个cpu上运行的。对于每一个进程而言，都有自己独立的代码和数据空间，这个称之为进程的上下文，cpu从一个进程切换到另外一个进程所做的动作称为进程的上下文切换。操作系统通过频繁的切换进程来实现cpu资源的有效分配，并看起来像在同时运行一样。   进程的上下文切换和进程间的通信需要有较多的开销，为了执行更多的任务，提升系统的效率，引入了线程。一个进程可以有一个或者多个线程所组成。  </p><h3 id="1-2-什么是线程（Thread）"><a href="#1-2-什么是线程（Thread）" class="headerlink" title="1.2 什么是线程（Thread）"></a>1.2 什么是线程（Thread）</h3><p><strong>线程是cpu调度的最小单位</strong>，是进程中的一部分，它由进程所创建产生，一个进程下的线程共享该进程的资源和程序代码。受操作系统的影响，每个操作系统能同时运行的进程数目是有限的，每个进程能够开启的线程数目也是有上限的，在同一个cpu核心上，多个线程以抢占或者主动让出时间片的形式轮流执行。基于同一段代码可以创建多个线程，这些线程共享进程的数据空间，但每个线程有独立的运行栈和程序计数器。</p><h2 id="2-并发与并行"><a href="#2-并发与并行" class="headerlink" title="2. 并发与并行"></a>2. 并发与并行</h2><p><img src="thread.png" alt="并发与并行"></p><h3 id="2-1-什么是并发（Concurrent）"><a href="#2-1-什么是并发（Concurrent）" class="headerlink" title="2.1 什么是并发（Concurrent）"></a>2.1 什么是并发（Concurrent）</h3><p>单核CPU下，线程实际还是<code>串行执行</code>的。操作系统中有一个组件叫做任务调度器，将CPU的时间片（windows下时间片最小约为 15 毫秒）分给不同的程序使用，只是由于CPU在线程间（时间片很短）的切换非常快，人类感觉是同时运行的。总结为一句话就是：<code>微观串行，宏观并行</code>，一般会将这种 线程轮流使用 CPU 的做法称为<strong>并发(concurrent)</strong>。</p><h3 id="2-2-什么是并行（Parallel）"><a href="#2-2-什么是并行（Parallel）" class="headerlink" title="2.2 什么是并行（Parallel）"></a>2.2 什么是并行（Parallel）</h3><p>多核CPU下，每个核（core）都可以调度运行线程，这时候线程可以是<strong>并行</strong>的。</p><p>⾕歌著名⼯程师罗布·派克（Rob Pike）说过，“并发就是同时应对 （Dealing With）多件事情的能⼒，并⾏是同时执⾏（Doing）多件事情的 能⼒”。</p><h2 id="3-为什么使用多线程"><a href="#3-为什么使用多线程" class="headerlink" title="3. 为什么使用多线程"></a>3. 为什么使用多线程</h2><ul><li>更好地利用单个 CPU<br>最常见的原因之一是能够更好地利用计算机中的资源。例如，如果一个线程正在等待对通过网络发送的请求的响应，则另一个线程在此期间可以使用 CPU 执行其他操作。此外，如果计算机具有多个 CPU，或者 CPU 具有多个执行内核，则多线程处理还可以帮助应用程序利用这些额外的 CPU 内核。  </li><li>更好地利用多个 CPU 或 CPU 内核<br>如果计算机包含多个 CPU 或 CPU 包含多个执行内核，则需要使用多个线程，以便应用程序能够利用所有 CPU 或 CPU 内核。单个线程最多只能使用单个 CPU，正如我上面提到的，有时甚至不能完全使用单个 CPU。  </li><li>在响应能力方面提供更好的用户体验<br>使用多线程的另一个原因是提供更好的用户体验。例如，如果您单击 GUI 中的按钮，这会导致通过网络发送请求，则哪个线程执行此请求很重要。如果使用也更新 GUI 的同一线程，则在 GUI 线程等待请求响应时，用户可能会遇到 GUI”挂起”。相反，这样的请求可以由后台线程执行，因此 GUI 线程在此期间可以自由地响应其他用户请求。  </li><li>在公平性方面提供更好的用户体验<br>第四个原因是在用户之间更公平地共享计算机的资源。例如，假设一个服务器接收来自客户端的请求，并且只有一个线程来执行这些请求。如果客户端发送的请求需要很长时间才能处理，则所有其他客户端的请求都必须等到该请求完成。通过让每个客户端的请求由其自己的线程执行，那么没有一个任务可以完全垄断CPU。  <h2 id="4-Java线程"><a href="#4-Java线程" class="headerlink" title="4.Java线程"></a>4.Java线程</h2><h3 id="4-1-创建和运行线程"><a href="#4-1-创建和运行线程" class="headerlink" title="4.1 创建和运行线程"></a>4.1 创建和运行线程</h3><h4 id="4-1-1-直接使用Thread"><a href="#4-1-1-直接使用Thread" class="headerlink" title="4.1.1 直接使用Thread"></a>4.1.1 直接使用Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Test01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 任务代码</span></span><br><span class="line">                log.debug(<span class="string">"running"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 线程命名</span></span><br><span class="line">        t.setName(<span class="string">"t1"</span>);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-1-2-使用Runnable配合Thread"><a href="#4-1-2-使用Runnable配合Thread" class="headerlink" title="4.1.2 使用Runnable配合Thread"></a>4.1.2 使用Runnable配合Thread</h4><blockquote><p>把<code>线程</code>和<code>任务（要执行的代码）</code>分开</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Test02"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.debug(<span class="string">"running"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(runnable,<span class="string">"t2"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        log.debug(<span class="string">"running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用lambda简化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">"running1"</span>), <span class="string">"t"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        log.debug(<span class="string">"running1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Thread与Runnable的关系"><a href="#Thread与Runnable的关系" class="headerlink" title="Thread与Runnable的关系"></a>Thread与Runnable的关系</h5><p><code>Thread</code>类中有个<code>Runnable</code>类型的属性，不论是直接使用<code>Thread</code>创建并运行线程还是通过<code>Runnable</code>配合<code>Thread</code>的方式创建运行线程，都是调用<code>Thread</code>的<code>run()</code>方法，其<code>run()</code>方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If this thread was constructed using a separate</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;Runnable&lt;/code&gt; object's &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class="line"><span class="comment">     * otherwise, this method does nothing and returns.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #start()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #stop()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只不过该线程是使用单独的 <code>Runnable</code> 运行对象构造的，则调用该 <code>Runnable</code> 对象的 <code>run</code> 方法；否则，此方法不执行任何操作并返回。<br><code>Thread</code> 的子类应该覆盖这个方法。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>使用<code>Runnable</code>可以把线程和任务分开</li><li>使用 Runnable 更容易与线程池等高级 API 配合</li><li>使用 Runnable 让任务类脱离了 Thread 继承体系，更灵活（一般建议组合关系优于继承关系）  <h4 id="4-1-3-FutureTask配合Thread"><a href="#4-1-3-FutureTask配合Thread" class="headerlink" title="4.1.3 FutureTask配合Thread"></a>4.1.3 FutureTask配合Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Test03"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建任务对象</span></span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(()-&gt;&#123;</span><br><span class="line">            log.debug(<span class="string">"running"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask,<span class="string">"t"</span>).start();</span><br><span class="line">        <span class="comment">// 主线程阻塞，同步等待futureTask执行结果</span></span><br><span class="line">        String res = futureTask.get();</span><br><span class="line">        log.debug(<span class="string">"结果是：&#123;&#125;"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-查看进程线程的方法"><a href="#4-2-查看进程线程的方法" class="headerlink" title="4.2 查看进程线程的方法"></a>4.2 查看进程线程的方法</h3><h4 id="4-2-1-Windows"><a href="#4-2-1-Windows" class="headerlink" title="4.2.1 Windows"></a>4.2.1 Windows</h4><p>任务管理器  </p><ul><li>可以查看进程和线程数，也可以用来杀死进程<br>cmd窗口  </li><li><code>tasklist</code> 查看所有进程</li><li><code>tasklist | findstr &lt;PID/应用名&gt;</code> 查找进程</li><li><code>taskkill</code> 杀死进程</li></ul><h4 id="4-2-2-Linux"><a href="#4-2-2-Linux" class="headerlink" title="4.2.2 Linux"></a>4.2.2 Linux</h4><ul><li><code>ps -fe</code> 查看所有进程</li><li><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li><li><code>kill</code> 杀死进程</li><li><code>top</code> 按大写 H 切换是否显示线程</li><li><code>top -H -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li></ul><h4 id="4-2-3-Java"><a href="#4-2-3-Java" class="headerlink" title="4.2.3 Java"></a>4.2.3 Java</h4><p>命令式</p><ul><li><code>jps</code> 命令查看所有 Java 进程</li><li><code>jstack &lt;PID&gt;</code> 查看某个 Java 进程（PID）的所有线程状态</li></ul><p>图形化工具jconsole<br>jconsole 远程监控配置</p><ul><li>需要以如下方式运行你的 java 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java </span><br><span class="line">-Djava.rmi.server.hostname=10.160.13.111  #远程服务器ip，即本机ip</span><br><span class="line">-Dcom.sun.management.jmxremote #允许JMX远程调用</span><br><span class="line">-Dcom.sun.management.jmxremote.port=3214  #自定义jmx 端口号</span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false  # 是否需要ssl 安全连接方式</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false #是否需要秘钥</span><br><span class="line">-jar test.jar</span><br></pre></td></tr></table></figure><ul><li>修改 /etc/hosts 文件将 127.0.0.1 映射至主机名</li><li>如果要认证访问，还需要做如下步骤</li><li>复制 jmxremote.password 文件</li><li>修改 jmxremote.password 和 jmxremote.access 文件的权限为 600 即文件所有者可读写</li><li>连接时填入 controlRole（用户名），R&amp;D（密码）<h2 id="5-线程运行原理"><a href="#5-线程运行原理" class="headerlink" title="5. 线程运行原理"></a>5. 线程运行原理</h2><h3 id="5-1-栈与栈帧"><a href="#5-1-栈与栈帧" class="headerlink" title="5.1 栈与栈帧"></a>5.1 栈与栈帧</h3><code>Java Virtual Machine Stacks</code>（Java 虚拟机栈）<br>我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？其实就是线程，每个线程启动后，虚拟机就会为其分配一块栈内存。  </li><li>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存  </li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法<h4 id="5-1-1-栈帧Debug"><a href="#5-1-1-栈帧Debug" class="headerlink" title="5.1.1 栈帧Debug"></a>5.1.1 栈帧Debug</h4>测试代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Debug测试栈帧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.FrameTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FramesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method1(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x+<span class="number">1</span>;</span><br><span class="line">        Object m = method2();</span><br><span class="line">        log.debug(m.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object n = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在IntelliJ IDEA中Debug启动，可以查看栈帧运行数据。<br><img src="%E6%A0%88%E5%B8%A7.png" alt="栈帧"></p><h5 id="多线程Debug"><a href="#多线程Debug" class="headerlink" title="多线程Debug"></a>多线程Debug</h5><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.FramesTest01 "</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FramesTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                method1(<span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.setName(<span class="string">"t"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        method1(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x+<span class="number">1</span>;</span><br><span class="line">        Object m = method2();</span><br><span class="line">        log.debug(m.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object n = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IntelliJ IDEA中右键断点，设置断点模式为<code>Thread</code>模式，才可以<code>Debug</code>跟踪线程。<br><img src="%E6%96%AD%E7%82%B9.png" alt="断点"><br>还可以在<code>Debug</code>控制台切换线程，查看不同线程的栈帧信息<br><img src="debug.png" alt="debug">  </p><h4 id="5-1-2-图解栈帧"><a href="#5-1-2-图解栈帧" class="headerlink" title="5.1.2 图解栈帧"></a>5.1.2 图解栈帧</h4><p><img src="%E5%9B%BE%E8%A7%A3%E6%A0%88%E5%B8%A7.png" alt="图解栈帧"></p><h3 id="5-2-线程上下文切换（Thread-Context-Switch）"><a href="#5-2-线程上下文切换（Thread-Context-Switch）" class="headerlink" title="5.2 线程上下文切换（Thread Context Switch）"></a>5.2 线程上下文切换（Thread Context Switch）</h3><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码</p><ul><li>线程的 cpu 时间片用完</li><li>垃圾回收</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法  </li></ul><p>当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念就是程序计数器（Program Counter Register），它的作用是记住下一条 jvm 指令的执行地址，是线程私有的</p><ul><li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</li><li>Context Switch 频繁发生会影响性能</li></ul><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadContextSwitchTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadContextSwitchTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;method1(<span class="number">20</span>),<span class="string">"t1"</span>).start();</span><br><span class="line">        method1(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x+<span class="number">1</span>;</span><br><span class="line">        Object m = method2();</span><br><span class="line">        log.debug(m.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object n = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-图解上下文切换"><a href="#5-2-1-图解上下文切换" class="headerlink" title="5.2.1 图解上下文切换"></a>5.2.1 图解上下文切换</h4><p><img src="%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.png" alt="上下文切换"><br><img src="%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A21.png" alt="上下文切换"></p><h2 id="6-线程常用方法"><a href="#6-线程常用方法" class="headerlink" title="6. 线程常用方法"></a>6. 线程常用方法</h2><table><thead><tr><th>序号</th><th>方法名</th><th>静态方法</th><th>功能说明</th><th>注意</th></tr></thead><tbody><tr><td>1</td><td>start()</td><td></td><td>启动一个新线程，在新的线程 运行run方法中的代码</td><td>start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。 每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException</td></tr><tr><td>2</td><td>run()</td><td></td><td>新线程启动后会调用的方法</td><td>如果在构造Thread对象时传递了Runnable参数，则新线程启动后会调用Runnable中的run方法， 否则默认不执行任何操作。但可以创建Thread的子类对象，来覆盖默认行为</td></tr><tr><td>3</td><td>join()</td><td></td><td>等待线程运行结束</td><td></td></tr><tr><td>4</td><td>join(long n)</td><td></td><td>等待线程运行结束，最多等待n毫秒</td><td></td></tr><tr><td>5</td><td>getId()</td><td></td><td>获取线程长整型的id</td><td>id唯一</td></tr><tr><td>6</td><td>getName()</td><td></td><td>获取线程名</td><td></td></tr><tr><td>7</td><td>setName(String)</td><td></td><td>修改线程名</td><td></td></tr><tr><td>8</td><td>getPriority()</td><td></td><td>获取线程优先级</td><td></td></tr><tr><td>9</td><td>setPriority(int)</td><td></td><td>修改线程优先级</td><td>java中规定线程优先级是1—10的整数，较大的优先级能提高该线程被CPU调度的机率</td></tr><tr><td>10</td><td>getState()</td><td></td><td>获取线程状态</td><td>Java中线程状态时6个enum表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITTING,TERMINATED</td></tr><tr><td>11</td><td>isInterrupted()</td><td></td><td>判断是否被打断</td><td>不会清除 打断标记</td></tr><tr><td>12</td><td>isAlive()</td><td></td><td>线程是否存活（还没有运行完毕）</td><td></td></tr><tr><td>13</td><td>interrupt()</td><td></td><td>打断线程</td><td>如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出InterruptedException, 并清除打断标记； 如果打断的正在运行的线程，则会设置打断标记； park的线程被打断，也会设置打断标记</td></tr><tr><td>14</td><td>interrupted()</td><td>static</td><td>判断当前线程是否被打断</td><td>会清除 打断标记</td></tr><tr><td>15</td><td>currentThread()</td><td>static</td><td>获取当前正在执行的线程</td><td></td></tr><tr><td>16</td><td>sleep(long n)</td><td>static</td><td>让当前执行的线程休眠n毫秒，休眠时让出CPU 的时间片给其他线程</td><td></td></tr><tr><td>17</td><td>yield()</td><td>static</td><td>提示线程调度器让出当前线程对CPU的使用</td><td>主要是为了测试和调试</td></tr></tbody></table><h3 id="6-1-start与run"><a href="#6-1-start与run" class="headerlink" title="6.1 start与run"></a>6.1 start与run</h3><h4 id="调用run"><a href="#调用run" class="headerlink" title="调用run"></a>调用run</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">"running"</span>), <span class="string">"t"</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is &#123;&#125;"</span>,t.getName(),t.getState().toString());</span><br><span class="line">        <span class="comment">// 调用run</span></span><br><span class="line">        t.run();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is &#123;&#125;"</span>,t.getName(),t.getState().toString());</span><br><span class="line">        log.debug(<span class="string">"Do Other Thing!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span>:<span class="number">56</span>:<span class="number">52</span> [main] c.ThreadMethodTest - t is NEW</span><br><span class="line"><span class="number">22</span>:<span class="number">56</span>:<span class="number">52</span> [main] c.ThreadMethodTest - running</span><br><span class="line"><span class="number">22</span>:<span class="number">56</span>:<span class="number">52</span> [main] c.ThreadMethodTest - t is NEW</span><br><span class="line"><span class="number">22</span>:<span class="number">56</span>:<span class="number">52</span> [main] c.ThreadMethodTest - <span class="keyword">Do</span> Other Thing!</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="调用start"><a href="#调用start" class="headerlink" title="调用start"></a>调用start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">"running"</span>), <span class="string">"t"</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is &#123;&#125;"</span>,t.getName(),t.getState().toString());</span><br><span class="line">        <span class="comment">// 调用start</span></span><br><span class="line">        t.start();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is &#123;&#125;"</span>,t.getName(),t.getState().toString());</span><br><span class="line">        log.debug(<span class="string">"Do Other Thing!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span>:<span class="number">57</span>:<span class="number">47</span> [main] c.ThreadMethodTest - t is NEW</span><br><span class="line"><span class="number">22</span>:<span class="number">57</span>:<span class="number">47</span> [main] c.ThreadMethodTest - t is RUNNABLE</span><br><span class="line"><span class="number">22</span>:<span class="number">57</span>:<span class="number">47</span> [main] c.ThreadMethodTest - <span class="keyword">Do</span> Other Thing!</span><br><span class="line"><span class="number">22</span>:<span class="number">57</span>:<span class="number">47</span> [t] c.ThreadMethodTest - running</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>直接调用 run 是在主线程中执行了 run，没有启动新的线程</li><li>使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码<h3 id="6-2-sleep与yield"><a href="#6-2-sleep与yield" class="headerlink" title="6.2 sleep与yield"></a>6.2 sleep与yield</h3><h4 id="调用sleep"><a href="#调用sleep" class="headerlink" title="调用sleep"></a>调用sleep</h4></li><li>调用 <code>sleep</code> 会让当前线程从 <code>Running</code> 进入 <code>Timed Waiting</code> 状态（阻塞）<br>代码示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"&#123;&#125; state is &#123;&#125;"</span>, Thread.currentThread().getName(), Thread.currentThread().getState());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; state is &#123;&#125;"</span>,t.getName(),t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span>:<span class="number">24</span>:<span class="number">33</span> [t] c.ThreadMethodTest01 - t state is RUNNABLE</span><br><span class="line"><span class="number">23</span>:<span class="number">24</span>:<span class="number">34</span> [main] c.ThreadMethodTest01 - t state is TIMED_WAITING</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>其它线程可以使用 <code>interrupt</code> 方法打断正在睡眠的线程，这时 <code>sleep</code> 方法会抛出 <code>InterruptedException</code><br>代码示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest02"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="string">"t"</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.debug(<span class="string">"Sleep..."</span>);</span><br><span class="line">                log.debug(<span class="string">"&#123;&#125; state is&#123;&#125;"</span>,Thread.currentThread().getName(),Thread.currentThread().getState());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.debug(<span class="string">"Interrupted..."</span>);</span><br><span class="line">                    log.debug(<span class="string">"&#123;&#125; state is&#123;&#125;"</span>,Thread.currentThread().getName(),Thread.currentThread().getState());</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        t.interrupt();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; state is &#123;&#125;"</span>,t.getName(),t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">27</span> [t] c.ThreadMethodTest02 - Sleep...</span><br><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">27</span> [t] c.ThreadMethodTest02 - t state isRUNNABLE</span><br><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">28</span> [t] c.ThreadMethodTest02 - Interrupted...</span><br><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">28</span> [main] c.ThreadMethodTest02 - t state is TIMED_WAITING</span><br><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">28</span> [t] c.ThreadMethodTest02 - t state isRUNNABLE</span><br><span class="line"><span class="function">java.lang.InterruptedException: <span class="title">sleep</span> <span class="title">interrupted</span></span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Native</span> <span class="title">Method</span>)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">com.java.demo.threadmethod.ThreadMethodTest02</span>$1.<span class="title">run</span>(<span class="title">ThreadMethodTest02.java</span>:14)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</span></span><br></pre></td></tr></table></figure><ul><li>睡眠结束后的线程未必会立刻得到执行</li><li>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性 </li></ul><p>代码示例:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.ThreadMethodTest03"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"sleep..."</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        log.debug(<span class="string">"end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">09</span>:<span class="number">42</span>:<span class="number">42</span> [main] c.ThreadMethodTest03 - sleep...</span><br><span class="line"><span class="number">09</span>:<span class="number">42</span>:<span class="number">45</span> [main] c.ThreadMethodTest03 - end...</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="调用yield"><a href="#调用yield" class="headerlink" title="调用yield"></a>调用yield</h4><ul><li>调用 <code>yield</code> 会让当前线程从 <code>Running</code> 进入 <code>Runnable</code> 就绪状态，然后调度执行其它线程</li><li>具体的实现依赖于操作系统的任务调度器</li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li>表面上看<code>sleep</code>和<code>yield</code>都是让当前线程不要运行，把机会让给其他线程。</li><li>调用 <code>sleep</code> 会让当前线程从 <code>Running</code> 进入 <code>Timed Waiting</code> 状态（阻塞）;调用 <code>yield</code> 会让当前线程从 <code>Running</code> 进入 <code>Runnable</code> 就绪状态，然后调度执行其它线程;CPU不会为阻塞状态的线程分配时间片。</li><li>sleep可以设置休眠时间，而且调用之后线程肯定不会运行；yield调用之后不一定让出机会给其他线程，依赖CPU的任务调度器，换句话说，就是礼让其他线程。<h3 id="6-3-线程优先级"><a href="#6-3-线程优先级" class="headerlink" title="6.3. 线程优先级"></a>6.3. 线程优先级</h3></li><li>线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</li><li>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用<br>使用yield<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.ThreadMethodTest04"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable task1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"------&gt; 1 is "</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable task2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    Thread.yield();</span><br><span class="line">                    System.out.println(<span class="string">"          ------&gt;2 is "</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(task1, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(task2, <span class="string">"t2"</span>);</span><br><span class="line">        <span class="comment">// 设置线程优先级</span></span><br><span class="line">        <span class="comment">//t1.setPriority(Thread.MIN_PRIORITY);</span></span><br><span class="line">        <span class="comment">//t2.setPriority(Thread.MAX_PRIORITY);</span></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56583</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56584</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56585</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">123858</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">123859</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">123860</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">123861</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56586</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56587</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56588</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56589</span></span><br></pre></td></tr></table></figure><p>使用线程优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.ThreadMethodTest04"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable task1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"------&gt; 1 is "</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable task2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    <span class="comment">// Thread.yield();</span></span><br><span class="line">                    System.out.println(<span class="string">"          ------&gt;2 is "</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(task1, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(task2, <span class="string">"t2"</span>);</span><br><span class="line">        <span class="comment">// 设置线程优先级</span></span><br><span class="line">        t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245173</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245174</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151852</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151853</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151854</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151855</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151856</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151857</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151858</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151859</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151860</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151861</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151862</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151863</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151864</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151865</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151866</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151867</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245175</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245176</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245177</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245178</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245179</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245180</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245181</span></span><br></pre></td></tr></table></figure><h3 id="6-4-应用案例-之-sleep限制对CPU的使用"><a href="#6-4-应用案例-之-sleep限制对CPU的使用" class="headerlink" title="6.4 应用案例 之 sleep限制对CPU的使用"></a>6.4 应用案例 之 sleep限制对CPU的使用</h3><p>在没有利用 <code>cpu</code> 来计算时，不要让 <code>while(true)</code> 空转浪费 <code>cpu</code>，这时可以使用 <code>yield</code> 或 <code>sleep</code> 来让出 <code>cpu</code> 的使用权给其他程序<br>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> Thread.sleep(<span class="number">50</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以用 wait 或 条件变量达到类似的效果</li><li>不同的是，后两种都需要加锁，并且需要相应的唤醒操作，一般适用于要进行同步的场景</li><li><code>sleep</code> 适用于无需锁同步的场景<br>结果验证：<br><img src="sleep01.png" alt="sleep限制CPU使用"><br><img src="sleep02.png" alt="sleep限制CPU使用"><br><img src="sleep03.png" alt="sleep限制CPU使用"><br><img src="sleep04.png" alt="sleep限制CPU使用">  </li></ul><h3 id="6-5-join方法详解"><a href="#6-5-join方法详解" class="headerlink" title="6.5 join方法详解"></a>6.5 join方法详解</h3><h4 id="6-5-1-为什么需要join"><a href="#6-5-1-为什么需要join" class="headerlink" title="6.5.1 为什么需要join"></a>6.5.1 为什么需要join</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c. ThreadMethodTest05"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest05</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is start..."</span>,Thread.currentThread().getName());</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"&#123;&#125; is start..."</span>, Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"&#123;&#125; is end..."</span>, Thread.currentThread().getName());</span><br><span class="line">            r = <span class="number">10</span>;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"r is &#123;&#125;"</span>,r);</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is end..."</span>,Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [main] c. ThreadMethodTest05 - main is <span class="built_in">start</span>...</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [main] c. ThreadMethodTest05 - r is <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [main] c. ThreadMethodTest05 - main is end...</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [t1] c. ThreadMethodTest05 - t1 is <span class="built_in">start</span>...</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [t1] c. ThreadMethodTest05 - t1 is end...</span><br></pre></td></tr></table></figure><p>分析原因：  </p><blockquote><p>因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出 r=10<br>而主线程一开始就要打印 r 的结果，所以只能打印出 r=0<br>解决方法：  </p><ul><li>用 sleep 行不行？为什么？<br>不可行！因为主线程不知道t1多久执行完，不可预知。</li><li>用 join，加在 t1.start() 之后即可</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.join();</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [main] c. ThreadMethodTest05 - main is <span class="built_in">start</span>...</span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [t1] c. ThreadMethodTest05 - t1 is <span class="built_in">start</span>...</span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [t1] c. ThreadMethodTest05 - t1 is end...</span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [main] c. ThreadMethodTest05 - r is <span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [main] c. ThreadMethodTest05 - main is end...</span><br></pre></td></tr></table></figure><h4 id="6-5-2-有时效的join"><a href="#6-5-2-有时效的join" class="headerlink" title="6.5.2 有时效的join"></a>6.5.2 有时效的join</h4><ul><li>等够时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> r1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> r2 = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            r1 = <span class="number">10</span>;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        t1.start();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join begin"</span>,t1.getName());</span><br><span class="line">        <span class="comment">// t1.join(TimeUnit.SECONDS.toSeconds(1000));</span></span><br><span class="line">        t1.join(TimeUnit.SECONDS.toSeconds(<span class="number">3000</span>));</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join end"</span>,t1.getName());</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"r1: &#123;&#125;,r2: &#123;&#125;, cost: &#123;&#125;"</span>,r1,r2,end - start);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">23</span>:<span class="number">16</span> [main] c.ThreadMethodTest06 - t1 join begin</span><br><span class="line"><span class="number">15</span>:<span class="number">23</span>:<span class="number">18</span> [main] c.ThreadMethodTest06 - t1 join end</span><br><span class="line"><span class="number">15</span>:<span class="number">23</span>:<span class="number">18</span> [main] c.ThreadMethodTest06 - r1: <span class="number">10</span>,r2: <span class="number">0</span>, cost: <span class="number">2009</span></span><br></pre></td></tr></table></figure><ul><li>没等够时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> r1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> r2 = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            r1 = <span class="number">10</span>;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        t1.start();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join begin"</span>,t1.getName());</span><br><span class="line">        t1.join(TimeUnit.SECONDS.toSeconds(<span class="number">1000</span>));</span><br><span class="line">        <span class="comment">// t1.join(TimeUnit.SECONDS.toSeconds(3000));</span></span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join end"</span>,t1.getName());</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"r1: &#123;&#125;,r2: &#123;&#125;, cost: &#123;&#125;"</span>,r1,r2,end - start);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">28</span>:<span class="number">20</span> [main] c.ThreadMethodTest06 - t1 join begin</span><br><span class="line"><span class="number">15</span>:<span class="number">28</span>:<span class="number">21</span> [main] c.ThreadMethodTest06 - t1 join end</span><br><span class="line"><span class="number">15</span>:<span class="number">28</span>:<span class="number">21</span> [main] c.ThreadMethodTest06 - r1: <span class="number">0</span>,r2: <span class="number">0</span>, cost: <span class="number">1020</span></span><br></pre></td></tr></table></figure><h3 id="6-6-应用案例-之-join实现同步"><a href="#6-6-应用案例-之-join实现同步" class="headerlink" title="6.6 应用案例 之 join实现同步"></a>6.6 应用案例 之 join实现同步</h3><p>以调用方角度来讲，</p><ul><li>需要等待结果返回，才能继续运行就是<strong>同步</strong></li><li>不需要等待结果返回，就能继续运行就是<strong>异步</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            r1 = <span class="number">10</span>;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            r2 = <span class="number">20</span>;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join begin..."</span>,t1.getName());</span><br><span class="line">        t1.join();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join end!"</span>,t1.getName());</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join begin..."</span>,t2.getName());</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join end!"</span>,t2.getName());</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"r1 : &#123;&#125;,r2 : &#123;&#125;, cost : &#123;&#125;"</span>,r1,r2,end-start);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">24</span> [main] c.ThreadMethodTest06 - t1 join begin...</span><br><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">25</span> [main] c.ThreadMethodTest06 - t1 join end!</span><br><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">25</span> [main] c.ThreadMethodTest06 - t2 join begin...</span><br><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">26</span> [main] c.ThreadMethodTest06 - t2 join end!</span><br><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">26</span> [main] c.ThreadMethodTest06 - r1 : <span class="number">10</span>,r2 : <span class="number">20</span>, cost : <span class="number">2001</span></span><br></pre></td></tr></table></figure><h3 id="6-7-interrupt方法详解"><a href="#6-7-interrupt方法详解" class="headerlink" title="6.7 interrupt方法详解"></a>6.7 interrupt方法详解</h3><h4 id="6-7-1-打断sleep、wait、join（阻塞）的线程"><a href="#6-7-1-打断sleep、wait、join（阻塞）的线程" class="headerlink" title="6.7.1 打断sleep、wait、join（阻塞）的线程"></a>6.7.1 打断sleep、wait、join（阻塞）的线程</h4><p>打断阻塞的线程, 会清空打断状态，以 <code>sleep</code> 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest07"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; 打断标记为：&#123;&#125;"</span>,t1.getName(),t1.isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">java.lang.InterruptedException: <span class="title">sleep</span> <span class="title">interrupted</span></span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Native</span> <span class="title">Method</span>)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Thread.java</span>:340)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.util.concurrent.TimeUnit.sleep</span>(<span class="title">TimeUnit.java</span>:386)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">com.java.demo.threadmethod.ThreadMethodTest07.lambda</span>$<span class="title">main</span>$0(<span class="title">ThreadMethodTest07.java</span>:12)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.run</span>(<span class="title">Thread.java</span>:748)</span></span><br><span class="line"><span class="function">16:20:54 [<span class="title">main</span>] <span class="title">c.ThreadMethodTest07</span> - <span class="title">t1</span> 打断标记为：<span class="title">false</span></span></span><br></pre></td></tr></table></figure><h4 id="6-7-2-打断正常的线程"><a href="#6-7-2-打断正常的线程" class="headerlink" title="6.7.2 打断正常的线程"></a>6.7.2 打断正常的线程</h4><p>打断正常运行的线程, 不会清空打断状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> interrupted = Thread.currentThread().isInterrupted();</span><br><span class="line">                <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">                    log.debug(<span class="string">"&#123;&#125; 打断标记 ：&#123;&#125;"</span>,Thread.currentThread().getName(),interrupted);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">09</span> [t1] c.ThreadMethodTest - t1 打断标记 ：true</span><br></pre></td></tr></table></figure><h4 id="6-7-2-打断park线程"><a href="#6-7-2-打断park线程" class="headerlink" title="6.7.2 打断park线程"></a>6.7.2 打断park线程</h4><p>打断 park 线程, 不会清空打断状态<br>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           log.debug(<span class="string">"park..."</span>);</span><br><span class="line">           LockSupport.park();</span><br><span class="line">           log.debug(<span class="string">"unpark..."</span>);</span><br><span class="line">           log.debug(<span class="string">"打断状态：&#123;&#125;"</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">       &#125;, <span class="string">"t1"</span>);</span><br><span class="line">       t1.start();</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">       t1.interrupt();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>输出结果:  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">44</span>:<span class="number">07</span> [t1] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">44</span>:<span class="number">08</span> [t1] c.ThreadMethodTest09 - unpark...</span><br><span class="line"><span class="number">13</span>:<span class="number">44</span>:<span class="number">08</span> [t1] c.ThreadMethodTest09 - 打断状态：true</span><br></pre></td></tr></table></figure><p>如果打断标记已经是 true, 则 park 会失效<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                log.debug(<span class="string">"park..."</span>);</span><br><span class="line">                LockSupport.park();</span><br><span class="line">                log.debug(<span class="string">"打断状态：&#123;&#125;"</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">46</span>:<span class="number">59</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br></pre></td></tr></table></figure><blockquote><p>提示<br>可以使用 <code>Thread.interrupted()</code> 清除打断状态</p></blockquote><h3 id="6-8-终止模式-之-两阶段终止模式（Two-phase-Termination）"><a href="#6-8-终止模式-之-两阶段终止模式（Two-phase-Termination）" class="headerlink" title="6.8 终止模式 之 两阶段终止模式（Two-phase Termination）"></a>6.8 终止模式 之 两阶段终止模式（Two-phase Termination）</h3><p>在一个线程 <code>T1</code> 中如何“优雅”终止线程 T2？这里的【优雅】指的是给 T2 一个“料理后事”的机会。</p><h4 id="6-8-1-错误思路"><a href="#6-8-1-错误思路" class="headerlink" title="6.8.1 错误思路"></a>6.8.1 错误思路</h4><ul><li>使用线程对象的 stop() 方法停止线程<blockquote><p>stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁</p></blockquote></li><li>使用 System.exit(int) 方法停止线程<blockquote><p>目的仅是停止一个线程，但这种做法会让整个程序都停止</p></blockquote></li></ul><h4 id="6-8-2-两阶段终止（Two-phase-Termination）模式"><a href="#6-8-2-两阶段终止（Two-phase-Termination）模式" class="headerlink" title="6.8.2 两阶段终止（Two-phase Termination）模式"></a>6.8.2 两阶段终止（Two-phase Termination）模式</h4><p>停止线程是一个目标简单而实现却不那么简单的任务。首先，Java没有提供直接的API用于停止线程（stop方法不提倡）。此外，停止线程还有一些额外的细节需要考虑，如待停止的线程处于阻塞（如等待锁）或者等待状态（等待其他线程），尚有未处理完的任务等。<br><code>Two-phase Termination</code>模式通过将停止线程这个动作分解为<strong>准备阶段</strong>和<strong>执行阶段</strong>这两个阶段，提供了一种通用的用于“优雅”(是指可以等要停止的线程在其处理完待处理的任务后才停止，而不是强行停止)地停止线程的方法。  </p><ul><li>准备阶段<br>该阶段的主要动作是“通知”目标线程（欲停止的线程）准备进行通知。这一步可以设置一个标志变量用于指示目标线程可以准备停止了。  </li><li>执行阶段<br>该阶段的主要动作是检查准备阶段所设置的线程停止标志和信号，在此基础上决定线程停止的时机，并进行适当的“清理”操作。  </li></ul><p><img src="%E4%B8%A4%E6%AE%B5%E7%BB%88%E6%AD%A2%E6%A8%A1%E5%BC%8F.png" alt="两段终止模式"><br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止模式 之 两阶段终止模式-利用 isInterrupted</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTerminationTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTerminationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TwoPhaseTermination twoPhaseTermination = <span class="keyword">new</span> TwoPhaseTermination();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        twoPhaseTermination.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监控线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTermination"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTermination</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">              Thread currentThread = Thread.currentThread();</span><br><span class="line">              <span class="keyword">if</span> (currentThread.isInterrupted())&#123;</span><br><span class="line">                  log.debug(<span class="string">"料理后事..."</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 阻塞中被打断</span></span><br><span class="line">                  log.debug(<span class="string">"执行监控记录..."</span>);        <span class="comment">// 正常情况被打断</span></span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">                  <span class="comment">// sleep中的线程被打断会将打断标记设置为false，所以需要重新设置</span></span><br><span class="line">                  currentThread.interrupt();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="string">"monitor"</span>);</span><br><span class="line">        monitor.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">13</span>:<span class="number">59</span> [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line"><span class="number">10</span>:<span class="number">14</span>:<span class="number">00</span> [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line"><span class="number">10</span>:<span class="number">14</span>:<span class="number">01</span> [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line"><span class="function">java.lang.InterruptedException: <span class="title">sleep</span> <span class="title">interrupted</span></span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Native</span> <span class="title">Method</span>)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Thread.java</span>:340)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.util.concurrent.TimeUnit.sleep</span>(<span class="title">TimeUnit.java</span>:386)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">com.java.demo.threadmethod.TwoPhaseTermination.lambda</span>$<span class="title">start</span>$0(<span class="title">ThreadMethodTest09.java</span>:37)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.run</span>(<span class="title">Thread.java</span>:748)</span></span><br><span class="line"><span class="function">10:14:02 [<span class="title">monitor</span>] <span class="title">c.TwoPhaseTermination</span> - 料理后事...</span></span><br></pre></td></tr></table></figure><h3 id="6-9-不推荐的方法"><a href="#6-9-不推荐的方法" class="headerlink" title="6.9 不推荐的方法"></a>6.9 不推荐的方法</h3><p>还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁。  </p><table><thead><tr><th>序号</th><th>方法名</th><th>静态方法</th><th>功能说明</th><th>注意</th></tr></thead><tbody><tr><td>1</td><td>stop()</td><td></td><td>停止线程运行</td><td></td></tr><tr><td>2</td><td>suspend()</td><td></td><td>挂起（暂停）线程运行</td><td></td></tr><tr><td>3</td><td>resume()</td><td></td><td>恢复线程运行</td><td></td></tr></tbody></table><h3 id="6-10-守护线程"><a href="#6-10-守护线程" class="headerlink" title="6.10 守护线程"></a>6.10 守护线程</h3><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 守护线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest10"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"开始运行..."</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"开始运行..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"运行结束..."</span>);</span><br><span class="line">        &#125;, <span class="string">"daemon"</span>);</span><br><span class="line">        <span class="comment">// 设置该线程为守护线程</span></span><br><span class="line">        t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">"运行结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">12</span>:<span class="number">08</span> [main] c.ThreadMethodTest10 - 开始运行...</span><br><span class="line"><span class="number">14</span>:<span class="number">12</span>:<span class="number">08</span> [daemon] c.ThreadMethodTest10 - 开始运行...</span><br><span class="line"><span class="number">14</span>:<span class="number">12</span>:<span class="number">09</span> [main] c.ThreadMethodTest10 - 运行结束...</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><br>垃圾回收器线程就是一种守护线程<br>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等<br>待它们处理完当前请求</p></blockquote><h2 id="7-线程状态"><a href="#7-线程状态" class="headerlink" title="7. 线程状态"></a>7. 线程状态</h2><h3 id="7-1-五种状态（操作系统层面）"><a href="#7-1-五种状态（操作系统层面）" class="headerlink" title="7.1 五种状态（操作系统层面）"></a>7.1 五种状态（操作系统层面）</h3><p><img src="%E4%BA%94%E7%A7%8D%E7%8A%B6%E6%80%81.png" alt="五种状态">  </p><ul><li>初始状态<blockquote><p>仅是在语言层面创建了线程对象，还未与操作系统线程关联</p></blockquote></li><li>可运行状态（就绪状态）<blockquote><p>指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</p></blockquote></li><li>运行状态<blockquote><p>指获取了 CPU 时间片运行中的状态<br>当 CPU 时间片用完，会从<strong>运行状态</strong>转换至<strong>可运行状态</strong>，会导致线程的上下文切换</p></blockquote></li><li>阻塞状态  <blockquote><p>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入<strong>阻塞状态</strong><br>等BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至<strong>可运行状态</strong><br>与<strong>可运行状态</strong>的区别是，对<strong>阻塞状态</strong>的线程来说只要它们一直不唤醒，调度器就一直不会考虑<br>调度它们</p></blockquote></li><li>终止状态  <blockquote><p>表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p></blockquote><h3 id="7-2-六种状态（Java-API层面）"><a href="#7-2-六种状态（Java-API层面）" class="headerlink" title="7.2 六种状态（Java API层面）"></a>7.2 六种状态（Java API层面）</h3></li></ul><p>这是从 Java API 层面来描述的<br>根据 Thread.State 枚举，分为六种状态<br><img src="%E5%85%AD%E7%A7%8D%E7%8A%B6%E6%80%81.png" alt="六种状态">  </p><ul><li><code>NEW</code> 线程刚被创建，但是还没有调用 <code>start()</code> 方法  </li><li><code>RUNNABLE</code> 当调用了 start() 方法之后，注意，Java API 层面的 <code>RUNNABLE</code> 状态涵盖了 操作系统 层面的</li></ul><p><strong>可运行状态</strong>、<strong>运行状态</strong>和<strong>阻塞状态</strong>（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）  </p><ul><li><code>BLOCKED</code> ， <code>WAITING</code> ， <code>TIMED_WAITING</code> 都是 <code>Java API</code> 层面对<strong>阻塞状态</strong>的细分，后面会在状态转换一节详述</li><li><code>TERMINATED</code> 当线程代码运行结束<br>代码示例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadStateTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"running..."</span>);</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        Thread t3= <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"running..."</span>);</span><br><span class="line">        &#125;, <span class="string">"t3"</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        Thread t4= <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadStateTest.class)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t4"</span>);</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">        Thread t5= <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t2.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t5"</span>);</span><br><span class="line">        t5.start();</span><br><span class="line"></span><br><span class="line">        Thread t6= <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadStateTest.class)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t6"</span>);</span><br><span class="line">        t6.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"t1 state is "</span> + t1.getState());</span><br><span class="line">        System.out.println(<span class="string">"t2 state is "</span> + t2.getState());</span><br><span class="line">        System.out.println(<span class="string">"t3 state is "</span> + t3.getState());</span><br><span class="line">        System.out.println(<span class="string">"t4 state is "</span> + t4.getState());</span><br><span class="line">        System.out.println(<span class="string">"t5 state is "</span> + t5.getState());</span><br><span class="line">        System.out.println(<span class="string">"t6 state is "</span> + t6.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果：  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">07</span>:<span class="number">50</span> [t3] c.ThreadStateTest - running...</span><br><span class="line">t1 state is NEW</span><br><span class="line">t2 state is RUNNABLE</span><br><span class="line">t3 state is TERMINATED</span><br><span class="line">t4 state is TIMED_WAITING</span><br><span class="line">t5 state is WAITING</span><br><span class="line">t6 state is BLOCKED</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="http://tutorials.jenkov.com/java-concurrency/index.html#why-multithreading" target="_blank" rel="noopener">Java Concurrency and Multithreading Tutorial</a><br><a href="https://zhuanlan.zhihu.com/p/82423236" target="_blank" rel="noopener">【操作系统】进程与线程</a><br><a href="https://www.bilibili.com/video/BV16J411h7Rd" target="_blank" rel="noopener">黑马程序员全面深入学习Java并发编程，JUC并发编程全套教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://10veU.github.io/categories/Java/"/>
    
      <category term="并发编程" scheme="https://10veU.github.io/categories/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://10veU.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://10veU.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发编程" scheme="https://10veU.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO</title>
    <link href="https://10veU.github.io/2021/11/26/Java-NIO/"/>
    <id>https://10veU.github.io/2021/11/26/Java-NIO/</id>
    <published>2021-11-26T14:10:57.000Z</published>
    <updated>2021-12-06T12:28:18.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h1><h2 id="1-Java-NIO概述"><a href="#1-Java-NIO概述" class="headerlink" title="1. Java NIO概述"></a>1. Java NIO概述</h2><p>Java NIO(New IO Non Blocking IO)是从<code>java1.4</code>版本开始引入的一个新的IO API,可以<strong>替代标准的Java IO API</strong>。<code>NIO</code>与原来的<code>IO</code>有同样的作用和目的，但是使用的方式完全不同，<code>NIO</code>支持面向缓冲区的、基于通道的IO操作。<code>NIO</code>将以更加高效的方式进行文件的读写操作。</p><h3 id="IO-VS-NIO"><a href="#IO-VS-NIO" class="headerlink" title="IO VS NIO"></a>IO VS NIO</h3><p><img src="IO.png" alt="IO"><br><img src="NIO.png" alt="NO">  </p><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>面向流（Stream Oriented）</td><td>面向缓冲区（Buffer Oriented）</td></tr><tr><td>阻塞IO（Blocking IO）</td><td>非阻塞IO（Non Bloking IO）</td></tr><tr><td>无</td><td>选择器（Selectors）</td></tr></tbody></table><h2 id="2-通道（Channel）和缓冲区（Buffer）"><a href="#2-通道（Channel）和缓冲区（Buffer）" class="headerlink" title="2. 通道（Channel）和缓冲区（Buffer）"></a>2. 通道（Channel）和缓冲区（Buffer）</h2><p>通道(<code>Channel</code>)表示打开到IO设备（例如：文件、套接字）的连接。若需要使用NIO系统，需要获取用于连接IO设备的通道以及用于容纳数据的缓冲区。然后操作缓冲区，对数据进行处理。<br>简而言之，<code>Channel</code>负责传输，<code>Buffer</code>负责存储。  </p><h3 id="2-1-缓冲区（Buffer）"><a href="#2-1-缓冲区（Buffer）" class="headerlink" title="2.1 缓冲区（Buffer）"></a>2.1 缓冲区（Buffer）</h3><p>在Java NIO中负责数据的存储，缓冲区就是数组，用于存储不同数据类型的数据。</p><h4 id="2-1-1-缓冲区基本操作"><a href="#2-1-1-缓冲区基本操作" class="headerlink" title="2.1.1 缓冲区基本操作"></a>2.1.1 缓冲区基本操作</h4><p>根据数据类型的而不同（<code>boolean</code>除外），提供了相应类型的缓冲区  </p><ul><li><code>ByteBuffer</code>  </li><li><code>CharBuffer</code>  </li><li><code>ShortBuffer</code>  </li><li><code>IntBuffer</code>  </li><li><code>LongBuffer</code>  </li><li><code>FloatBuffer</code>  </li><li><code>DoubleBuffer</code>  </li></ul><p>上述缓冲区的管理方式几乎一致，通过<code>allocate()</code>获取缓冲区。  </p><p>缓冲区存取数据的两个核心方法  </p><ul><li><code>put()</code> 存入数据到缓冲区</li><li><code>get()</code> 获取缓冲区中的数据</li></ul><p>缓冲区中的四个核心属性</p><blockquote><p>Invariants: mark &lt;= position &lt;= limit &lt;= capacity  </p></blockquote><ul><li><code>private int mark = -1;</code> 标记，表示记录当前position的位置，可以通过rset()恢复到mark的位置</li><li><code>private int position = 0;</code> 位置， 表示缓冲区中正在操作数据的位置。</li><li><code>private int limit;</code>  界限，缓冲区中可以操作数据的大小。（limit后面的数据是不能进行操作的）</li><li><code>private int capacity;</code>  容量，缓冲器中最大存储数据的容量。一旦声明，无法改变。  </li></ul><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String s = <span class="string">"abcde"</span>;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        buffer.put(s.getBytes());</span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()];</span><br><span class="line">        buffer.get(dst,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mark()标记</span></span><br><span class="line">        buffer.mark();</span><br><span class="line"></span><br><span class="line">        buffer.get(dst,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst,<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + buffer.position());</span><br><span class="line">        <span class="comment">// 判断缓冲区是否有可操作的数据</span></span><br><span class="line">        <span class="keyword">if</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(buffer.remaining());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// reset() 恢复到mark的位置</span></span><br><span class="line">        buffer.reset();</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断缓冲区是否有可操作的数据</span></span><br><span class="line">        <span class="keyword">if</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(buffer.remaining());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 分配一个指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------- allocate() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line">        <span class="comment">// 使用put()将数据存入到缓冲区</span></span><br><span class="line">        String str= <span class="string">"ABCDE"</span>;</span><br><span class="line">        byteBuffer.put(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"---------- put() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line">        <span class="comment">// 切换数据模式</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        System.out.println(<span class="string">"---------- flip() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line">        <span class="comment">// 使用get()方法读取缓冲区中的方法</span></span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuffer.limit()];</span><br><span class="line">        byteBuffer.get(dst);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst,<span class="number">0</span>,dst.length));</span><br><span class="line">        System.out.println(<span class="string">"---------- get() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// rewind() 可重复读</span></span><br><span class="line">        byteBuffer.rewind();</span><br><span class="line">        System.out.println(<span class="string">"---------- rewind() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空缓冲区，但是缓冲区中的数据依然存在，但是处于“被遗忘状态”</span></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line">        System.out.println(<span class="string">"---------- clear() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line"></span><br><span class="line">        byteBuffer.get(dst);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst,<span class="number">0</span>,dst.length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-直接缓冲区-VS-非直接缓冲区"><a href="#2-1-2-直接缓冲区-VS-非直接缓冲区" class="headerlink" title="2.1.2 直接缓冲区 VS 非直接缓冲区"></a>2.1.2 直接缓冲区 VS 非直接缓冲区</h4><blockquote><p><strong>非直接缓冲区</strong>，通过<code>allocate()</code>方法非直接缓冲区，将缓冲区建立在<code>JVM</code>的内存中。<br><strong>直接缓冲区</strong>，通过<code>allocateDirect()</code>方法分配直接缓冲区，将缓冲区建立在物理内存中。可以提高效率。 </p></blockquote><p><img src="%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.jpeg" alt="直接缓冲区"><br><img src="%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.jpeg" alt="非直接缓冲区"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line">        System.out.println(byteBuffer.isDirect());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-通道（Channel）"><a href="#2-2-通道（Channel）" class="headerlink" title="2.2 通道（Channel）"></a>2.2 通道（Channel）</h3><p>通道（<code>Channel</code>）由<code>java.nio.channels</code>包定义的。<code>Channel</code>表示IO源与目标打开的连接。<code>Channel</code>类似于传统的“流”。只不过<code>Channel</code>本身不能直接访问数据，<code>Channel</code>只能与<code>Buffer</code>进行交互。</p><h4 id="2-2-1-Channel的原理与获取"><a href="#2-2-1-Channel的原理与获取" class="headerlink" title="2.2.1 Channel的原理与获取"></a>2.2.1 Channel的原理与获取</h4><p>应用程序与磁盘之间的数据写入或者读出，都需要由用户地址空间和内存地址空间之间来回复制数据，内存地址空间中的数据通过操作系统层面的IO接口，完成与磁盘的数据存取。在应用程序调用这些系统IO接口时，由CPU完成一系列调度、任务分配，早先这些IO接口都是由CPU独立负责。所以当发生大规模读写请求时，CPU的占用率很高。<br><img src="Channel_01.png" alt="Channel"><br>之后，操作系统为了避免CPU完全被各种IO接口调用占用，引入了DMA（直接存储器存储）。当应用程序对操作系统发出一个读写请求时，会由DMA先向CPU申请权限，申请到权限之后，内存地址空间与磁盘之间的IO操作就全由DMA来负责操作。这样，在读写请求的过程中，CPU不需要再参与，CPU去做其他事情。当然，DMA来独立完成数据在磁盘与内存空间中的来去，需要借助于DMA总线。但是当DMA总线过多时，大量的IO操作也会造成总线冲突，即也会影响最终的读写性能。<br><img src="Channel_02.png" alt="Channel"><br>为了避免DMA总线冲突对性能的影响，后来便有了通道的方式。通道，它是一个完全独立的处理器。CPU是中央处理器，通道本身也是一个处理器，专门负责IO操作。既然是处理器，通道有自己的IO命令，与CPU无关。它更适用于大型的IO操作，性能更高。<br><img src="Channel_03.png" alt="Channel"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>直接存储器DMA有独立总线。</li><li>但在大量数据面前，可能会存在总线冲突，还是需要CPU来处理。</li><li>通道是一个独立的处理器</li><li>DMA方式还是需要向CPU申请DMA总线的。</li><li>通道有自己的处理器，适合与大量IO请求的场景，数据传输直接通过通道进行传输，不再需要请求CPU  </li></ul><h4 id="2-2-2-Channel的基本操作"><a href="#2-2-2-Channel的基本操作" class="headerlink" title="2.2.2 Channel的基本操作"></a>2.2.2 Channel的基本操作</h4><h5 id="通道的主要实现类"><a href="#通道的主要实现类" class="headerlink" title="通道的主要实现类"></a>通道的主要实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.nio.channels.Channel接口</span><br><span class="line">    |-- FileChannel 用于本地文件数据传输</span><br><span class="line">  |-- SocketChannel 用于网络，TCP</span><br><span class="line">  |-- ServerSocketChannel 用于网络，TCP</span><br><span class="line">  |-- DatagramChannel 用于网络，UDP</span><br></pre></td></tr></table></figure><h5 id="获取通道"><a href="#获取通道" class="headerlink" title="获取通道"></a>获取通道</h5><ol><li>Java针对支持通道的类提供了<code>getChannel()</code>方法<br>本地IO</li></ol><ul><li>FileInputStream/FileOutputStream</li><li>RandomAccessFile<br>网络IO</li><li>Socket</li><li>ServerSocket</li><li>DatagramSocket</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用通道完成文件的复制(非直接缓冲区)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel inChannel = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"classpath://../resource/channel/1.png"</span>);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"classpath://../resource/channel/2.png"</span>);</span><br><span class="line">            <span class="comment">// 1. 获取通道</span></span><br><span class="line">            inChannel = fileInputStream.getChannel();</span><br><span class="line">            outChannel = fileOutputStream.getChannel();</span><br><span class="line">            <span class="comment">// 2. 分配指定大小的缓冲区</span></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="comment">// 3. 将通道中的数据放入缓冲区</span></span><br><span class="line">            <span class="keyword">while</span>(inChannel.read(byteBuffer) != -<span class="number">1</span>)&#123;</span><br><span class="line">                byteBuffer.flip(); <span class="comment">// 切换到读取数据模式</span></span><br><span class="line">                <span class="comment">// 4. 将缓冲区的数据写入到通道中</span></span><br><span class="line">                outChannel.write(byteBuffer);</span><br><span class="line">                byteBuffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outChannel != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (inChannel !=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fileOutputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fileInputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在JDK1.7中的NIO.2针对各个通道童工了静态方法<code>open()</code>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用通道完成文件的复制（直接缓冲区，内存映射文件）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\1.png"</span>), StandardOpenOption.READ);</span><br><span class="line">        <span class="comment">// 注意：StandardOpenOption的CREATE_NEW代表如果已存在则创建失败；CREATE代表如果已存在则覆盖</span></span><br><span class="line">        <span class="comment">// FileChannel outChannel = FileChannel.open(Paths.get("classpath://../resource/channel/3.png"), StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);</span></span><br><span class="line">        <span class="comment">//注意：因为下面从通道得到的映射文件缓冲区的映射模式是读写模式，而这个outChannel只有写的打开选项，所以是不够，还要加入读配置。</span></span><br><span class="line">        FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\3.png"</span>), StandardOpenOption.WRITE, StandardOpenOption.READ,StandardOpenOption.CREATE_NEW);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内存映射文件</span></span><br><span class="line">        <span class="comment">//这种利用通道通过映射文件建立直接缓冲区的方式和用缓冲区allocateDirect(int)的方式，两者的原理是一模一样的！</span></span><br><span class="line">        <span class="comment">//只是申请直接缓冲区的方式不同。</span></span><br><span class="line">        <span class="comment">//申请的空间都在物理内存中。</span></span><br><span class="line">        <span class="comment">//注意：申请直接缓冲区，仅仅适用于ByteBuffer缓冲区类型，其他缓冲区类型不支持。</span></span><br><span class="line">        <span class="comment">//与之前的通过流获得的通道不同，这种通过映射文件的方式是直接把数据通过映射文件放到物理内存中，还需要通道进行传输吗？是不是就不用了吧。我现在只需要直接向直接缓冲区中放就可以了，不需要通道。</span></span><br><span class="line">        <span class="comment">//所以与之前相比，获取通道的操作都省去了，直接操作缓冲区即可。</span></span><br><span class="line">        MappedByteBuffer inMappedByteBuffer = inChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, inChannel.size());</span><br><span class="line">        MappedByteBuffer outMappedByteBuffer = outChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, inChannel.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接使用缓冲区进行数据的读写操作</span></span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[inMappedByteBuffer.limit()];</span><br><span class="line">        inMappedByteBuffer.get(dst);</span><br><span class="line">        outMappedByteBuffer.put(dst);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭通道</span></span><br><span class="line">        inChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在JDK1.7中的NIO.2的Files工具类的<code>newByteChannel()</code>  <h5 id="通道之间数据传输"><a href="#通道之间数据传输" class="headerlink" title="通道之间数据传输"></a>通道之间数据传输</h5></li></ol><ul><li>transTo()</li><li>transFrom()  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通道之间数据传输（直接缓冲区）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\1.png"</span>), StandardOpenOption.READ);</span><br><span class="line">        FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\4.png"</span>), StandardOpenOption.WRITE, StandardOpenOption.READ,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inChannel.transferTo(0,inChannel.size(),outChannel);</span></span><br><span class="line">        outChannel.transferFrom(inChannel,<span class="number">0</span>,inChannel.size());</span><br><span class="line">        inChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="分散（Scatter）与聚集-Gather"><a href="#分散（Scatter）与聚集-Gather" class="headerlink" title="分散（Scatter）与聚集(Gather)"></a>分散（Scatter）与聚集(Gather)</h5><blockquote><p>分散读取（<code>Scatter Reads</code>）,将通道中数据分散到多个缓冲区中<br>聚集写入（<code>Gather Writes</code>）,将多个缓冲区中的数据聚集到通道中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分散和聚集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"classpath://../resource/channel/1.txt"</span>,<span class="string">"rw"</span>);</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line">        <span class="comment">// 2. 分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer1 = ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">        ByteBuffer byteBuffer2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 3. 分散读取</span></span><br><span class="line">        ByteBuffer[] byteBuffers = &#123;byteBuffer1, byteBuffer2&#125;;</span><br><span class="line">        channel.read(byteBuffers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ByteBuffer byteBuffer:byteBuffers) &#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffers[<span class="number">0</span>].array(),<span class="number">0</span>,byteBuffers[<span class="number">0</span>].limit()));</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffers[<span class="number">1</span>].array(),<span class="number">0</span>,byteBuffers[<span class="number">1</span>].limit()));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 聚集写入</span></span><br><span class="line">        RandomAccessFile randomAccessFile1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">"classpath://../resource/channel/2.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        FileChannel channel1 = randomAccessFile1.getChannel();</span><br><span class="line">        channel1.write(byteBuffers);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="字符集（Charset）"><a href="#字符集（Charset）" class="headerlink" title="字符集（Charset）"></a>字符集（Charset）</h5><ul><li>编码，字符串-&gt;字节数组</li><li>解码，字节数组-&gt;字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> CharacterCodingException </span>&#123;</span><br><span class="line">        Charset gbkCharset = Charset.forName(<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 获取编码器</span></span><br><span class="line">        CharsetEncoder gbkEncoder = gbkCharset.newEncoder();</span><br><span class="line">        <span class="comment">// 获取解码器</span></span><br><span class="line">        CharsetDecoder gbkDecoder = gbkCharset.newDecoder();</span><br><span class="line"></span><br><span class="line">        CharBuffer charBuffer = CharBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        charBuffer.put(<span class="string">"你好，世界！"</span>);</span><br><span class="line">        charBuffer.flip();</span><br><span class="line">        <span class="comment">// 编码</span></span><br><span class="line">        ByteBuffer byteBuffer = gbkEncoder.encode(charBuffer);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteBuffer.limit(); i++) &#123;</span><br><span class="line">            System.out.println(byteBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解码</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        CharBuffer charBuffer1 = gbkDecoder.decode(byteBuffer);</span><br><span class="line">        System.out.println(charBuffer1.toString());</span><br><span class="line">        System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Charset utf8Charset = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">// CharsetDecoder charsetDecoder = utf8Charset.newDecoder();</span></span><br><span class="line">        <span class="comment">//CharBuffer decode = charsetDecoder.decode(byteBuffer);</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        CharBuffer decode = utf8Charset.decode(byteBuffer);</span><br><span class="line">        System.out.println(decode.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Charset&gt; charsetMap = Charset.availableCharsets();</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Charset&gt;&gt; entrySet = charsetMap.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String,Charset&gt; entry: entrySet) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"="</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-NIO-阻塞与非阻塞"><a href="#3-NIO-阻塞与非阻塞" class="headerlink" title="3. NIO-阻塞与非阻塞"></a>3. NIO-阻塞与非阻塞</h2><p> 传统的 IO 流都是阻塞式的。也就是说，当一个线程调用 <code>read()</code> 或 <code>write()</code>时，该线程被阻塞，直到有一些数据被读取或写入，该线程在此期间不能执行其他任务。<br> <img src="%E4%BC%A0%E7%BB%9FIO.png" alt="传统IO"><br> 因此，在完成网络通信进行 IO 操作时，由于线程会阻塞，所以服务器端必须为每个客户端都提供一个独立的线程进行处理，当服务器端需要处理大量客户端时，性能急剧下降。<br> <img src="%E4%BC%A0%E7%BB%9FIO%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt="传统IO多线程"><br> Java NIO 是非阻塞模式的。当线程从某通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。线程通常将非阻塞 IO 的空闲时间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入和输出通道。因此， NIO 可以让服务器端使用一个或有限几个线程来同时处理连接到服务器端的所有客户端。<br> <img src="NIO%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%96%B9%E5%BC%8F.png" alt="NIO非阻塞方式"><br> 选择器和通道的关系：通道注册到选择器上，选择器监控通道。<br> 当某一个通道上，某一个事件准备就绪时，那么选择器才会将这个通道分配到服务器端一个或多个线程上，再继续运行。比如说当客户端发送一些数据给服务器端，只有当客户端的所有数据都准备就绪时，选择器才会将这个注册的通道分配到服务器端的一个或者多个线程上。那就意味这，如果客户端的线程没有将数据准备就绪时，服务器端的线程可以执行其他任务，而不必阻塞在那里。  </p><h3 id="3-1-选择器（Selector）与通道（Channel）的关系"><a href="#3-1-选择器（Selector）与通道（Channel）的关系" class="headerlink" title="3.1 选择器（Selector）与通道（Channel）的关系"></a>3.1 选择器（Selector）与通道（Channel）的关系</h3><p>选择器（<code>Selector</code>） 是 <code>SelectableChannle</code> 对象的多路复用器， <code>Selector</code>可以同时监控多个 <code>SelectableChannel</code> 的 IO 状况，也就是说，利用 Selector可使一个单独的线程管理多个 <code>Channel</code>。 <code>Selector</code> 是非阻塞 IO 的核心。<br><img src="SelectableChannel.png" alt="SelectableCahnnel"><br><strong>注意：</strong> FileChannel切换为非阻塞模式！！！非阻塞模式是相对于网络IO而言的。选择器主要监控网络Channel。  （FileChannel不是可作为选择器复用的通道！FileChannel不能注册到选择器Selector！FileChannel不能切换到非阻塞模式！FileChannel不是SelectableChannel的子类！）  </p><h3 id="3-2-网络NIO示例（阻塞式-TCP协议）"><a href="#3-2-网络NIO示例（阻塞式-TCP协议）" class="headerlink" title="3.2 网络NIO示例（阻塞式 TCP协议）"></a>3.2 网络NIO示例（阻塞式 TCP协议）</h3><h4 id="阻塞IO模式：客户端向服务端发送文件"><a href="#阻塞IO模式：客户端向服务端发送文件" class="headerlink" title="阻塞IO模式：客户端向服务端发送文件"></a>阻塞IO模式：客户端向服务端发送文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.selector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、使用NIO完成网络通信的三个核心概念</span></span><br><span class="line"><span class="comment"> * 1. 通道（Channel）,负责连接</span></span><br><span class="line"><span class="comment"> *      java.nio.channels.Channel接口</span></span><br><span class="line"><span class="comment"> *          |-- SelectableChannel</span></span><br><span class="line"><span class="comment"> *              |--SocketChannel          TCP</span></span><br><span class="line"><span class="comment"> *              |-- ServerSocketChannel   TCP</span></span><br><span class="line"><span class="comment"> *              |-- DatagramChannel       UDP</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *              |--Pipe.SinkChannel</span></span><br><span class="line"><span class="comment"> *              |--Pipe.SourceChannel</span></span><br><span class="line"><span class="comment"> *    注意：FileChannel切换为非阻塞模式！！！非阻塞模式是相对于网络IO而言的。选择器主要监控网络Channel。</span></span><br><span class="line"><span class="comment"> * 2. 缓冲区（Buffer）,负责数据的存取</span></span><br><span class="line"><span class="comment"> * 3. 选择器（Selector）,是SelectableChannel的多路复用器。用于监控SelectableChannel的IO状况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingNIOTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 2. 分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 3. 从本地读取文件并发送到服务器</span></span><br><span class="line">        FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\1.png"</span>), StandardOpenOption.READ);</span><br><span class="line">        <span class="keyword">while</span> (inChannel.read(byteBuffer)!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            socketChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. 关闭通道</span></span><br><span class="line">        inChannel.close();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 2. 绑定连接</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 3.获取客户端的连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="comment">// 4. 接收客户端传输的数据，并保存在本地</span></span><br><span class="line">        FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\5.png"</span>), StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">while</span>(socketChannel.read(byteBuffer)!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            outChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.关闭通道</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻塞IO模式：服务端向客户端发送反馈信息"><a href="#阻塞IO模式：服务端向客户端发送反馈信息" class="headerlink" title="阻塞IO模式：服务端向客户端发送反馈信息"></a>阻塞IO模式：服务端向客户端发送反馈信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.selector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingNIOTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        FileChannel inFileChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\1.png"</span>), StandardOpenOption.READ);</span><br><span class="line">        <span class="keyword">while</span>(inFileChannel.read(byteBuffer) != -<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            socketChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在阻塞IO下，如果关闭socketChannel，那么服务端不知道客户端是否已经把所有数据发完，所以会一直阻塞。</span></span><br><span class="line">        socketChannel.shutdownOutput();</span><br><span class="line">        <span class="comment">//另一种方法就是把这个线程切换成非阻塞模式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收服务端反馈</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = socketChannel.read(byteBuffer)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        inFileChannel.close();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        FileChannel outFileChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\6.png"</span>), StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">while</span>(socketChannel.read(byteBuffer) != -<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            outFileChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送反馈给客户端</span></span><br><span class="line">        byteBuffer.put(<span class="string">"服务端接收数据成功！"</span>.getBytes());</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        socketChannel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">        outFileChannel.close();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-网络NIO示例（非阻塞式-TCP协议）"><a href="#3-3-网络NIO示例（非阻塞式-TCP协议）" class="headerlink" title="3.3 网络NIO示例（非阻塞式 TCP协议）"></a>3.3 网络NIO示例（非阻塞式 TCP协议）</h3><h4 id="非阻塞IO模式：客户端向服务端发送数据"><a href="#非阻塞IO模式：客户端向服务端发送数据" class="headerlink" title="非阻塞IO模式：客户端向服务端发送数据"></a>非阻塞IO模式：客户端向服务端发送数据</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.selector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonBlockingNIOTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 2. 切换到非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 分配缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 4. 发送数据给服务端</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            String inputStr=scanner.next();</span><br><span class="line">            byteBuffer.put((<span class="keyword">new</span> Date().toString() + <span class="string">"\n"</span> + inputStr).getBytes());</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            socketChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line"><span class="comment">//        byteBuffer.put(new Date().toString().getBytes());</span></span><br><span class="line"><span class="comment">//        byteBuffer.flip();</span></span><br><span class="line"><span class="comment">//        socketChannel.write(byteBuffer);</span></span><br><span class="line"><span class="comment">//        byteBuffer.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 关闭通道</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 2. 切换为非阻塞模式</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 绑定连接</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 4. 获取选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        <span class="comment">//5、将通道注册到选择器上(第二个选项参数叫做选择键，用于告诉选择器需要监控这个通道的什么状态或者说什么事件（读、写、连接、接受）)</span></span><br><span class="line">        <span class="comment">//选择键是整型值，如果需要监控该通道的多个状态或事件，可以将多个选择键用位运算符“或”“|”来连接</span></span><br><span class="line">        <span class="comment">//这里服务端首先要监听客户端的接受状态</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="comment">// 6. 轮询式的获取选择器上已经"准备就绪"的事件</span></span><br><span class="line">        <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 7. 获取当前选择器中所有注册的选择键</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="comment">// 8. 迭代获取”准备就绪”的事件</span></span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                SelectionKey selectionKey = iterator.next();</span><br><span class="line">                <span class="comment">// 9. 判断具体是什么事件住呢被就绪</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">// 10. 若“接受就绪”,获取客户端连接</span></span><br><span class="line">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    <span class="comment">// 11. 切换为非阻塞模式</span></span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">// 12. 将该通道注册到选择器</span></span><br><span class="line">                    socketChannel.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectionKey.isReadable())&#123;</span><br><span class="line">                    <span class="comment">// 13. 获取当前选择器上“读就绪”状态的通道</span></span><br><span class="line">                    SocketChannel socketChannel = (SocketChannel)selectionKey.channel();</span><br><span class="line">                    <span class="comment">// 14. 读取数据</span></span><br><span class="line">                    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>((length = socketChannel.read(byteBuffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        byteBuffer.flip();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,length));</span><br><span class="line">                        byteBuffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 15. 取消选择键SelectionKey</span></span><br><span class="line">                <span class="comment">// 注意：SelectionKey使用完之后，一定要取消掉！！否则一直有效，如一个通道已经连接完成accept，如果不取消，下次还有这个连接完成。</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-网络NIO示例（非阻塞式-UDP协议）"><a href="#3-4-网络NIO示例（非阻塞式-UDP协议）" class="headerlink" title="3.4 网络NIO示例（非阻塞式 UDP协议）"></a>3.4 网络NIO示例（非阻塞式 UDP协议）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.selector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.DatagramChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonBlockingNIOTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        DatagramChannel datagramChannel = DatagramChannel.open();</span><br><span class="line">        <span class="comment">// 2. 切换为非阻塞模式</span></span><br><span class="line">        datagramChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 4. 发送数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String inputStr = scanner.next();</span><br><span class="line">            byteBuffer.put((<span class="keyword">new</span> Date().toString() + <span class="string">"\n"</span> +inputStr).getBytes());</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            datagramChannel.send(byteBuffer,<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>));</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        datagramChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        DatagramChannel datagramChannel = DatagramChannel.open();</span><br><span class="line">        <span class="comment">// 2. 设置为非阻塞模式</span></span><br><span class="line">        datagramChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 绑定连接</span></span><br><span class="line">        datagramChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 4. 获取选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        <span class="comment">// 5.将通道注册到选择器上</span></span><br><span class="line">        datagramChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        <span class="keyword">while</span> (selector.select()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                SelectionKey selectionKey = iterator.next();</span><br><span class="line">                <span class="keyword">if</span>(selectionKey.isReadable())&#123;</span><br><span class="line">                    <span class="comment">// 6. 分配指定大小的缓冲区</span></span><br><span class="line">                    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    datagramChannel.receive(byteBuffer);</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,byteBuffer.limit()));</span><br><span class="line">                    byteBuffer.clear();</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        datagramChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-NIO-管道（Pipe）"><a href="#4-NIO-管道（Pipe）" class="headerlink" title="4. NIO-管道（Pipe）"></a>4. NIO-管道（Pipe）</h2><p>Java NIO 管道是2个线程之间的单向数据连接。Pipe有一个source通道和一个sink通道。数据会被写到sink通道，从source通道读取。<br><img src="pipe.png" alt="pipe">  </p><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pipe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Pipe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PipeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取管道</span></span><br><span class="line">        Pipe pipe = Pipe.open();</span><br><span class="line">        <span class="comment">// 2. 将缓冲区数据写入到管道</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        byteBuffer.put(<span class="string">"通过单向管道发送数据"</span>.getBytes());</span><br><span class="line">        Pipe.SinkChannel sinkChannel = pipe.sink(); <span class="comment">// Pipe.SinkChannel是Pipe的内部类</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        sinkChannel.write(byteBuffer);</span><br><span class="line">        byteBuffer.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、读取缓冲区中的数据（可以是另一个线程）</span></span><br><span class="line">        Pipe.SourceChannel sourceChannel = pipe.source();<span class="comment">//Pipe.SourceChannel是Pipe的内部类</span></span><br><span class="line">        <span class="keyword">int</span> len = sourceChannel.read(byteBuffer);</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭通道</span></span><br><span class="line">        sourceChannel.close();</span><br><span class="line">        sinkChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://10veU.github.io/categories/Java/"/>
    
      <category term="NIO" scheme="https://10veU.github.io/categories/Java/NIO/"/>
    
    
      <category term="Java" scheme="https://10veU.github.io/tags/Java/"/>
    
      <category term="NIO" scheme="https://10veU.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Java IO流</title>
    <link href="https://10veU.github.io/2021/09/11/Java%20IO%E6%B5%81/"/>
    <id>https://10veU.github.io/2021/09/11/Java IO流/</id>
    <published>2021-09-11T23:00:43.000Z</published>
    <updated>2021-12-06T12:28:18.973Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java-IO流"><a href="#Java-IO流" class="headerlink" title="Java IO流"></a>Java IO流</h1><h2 id="1-什么是文件？"><a href="#1-什么是文件？" class="headerlink" title="1. 什么是文件？"></a>1. 什么是文件？</h2><p>从编程的角度看，文件就是保存数据的载体。可以是文字，图片，音频，视频…</p><h2 id="2-文件流"><a href="#2-文件流" class="headerlink" title="2. 文件流"></a>2. 文件流</h2><p>文件再程序中以流的形式来操作。<br><img src="File.jpg" alt="文件流"><br><strong>流</strong><br>数据在文件（数据源）和程序（内存）之间经历的路径。<br><strong>输入流</strong><br>数据从文件（数据源）到程序（内存）的路径。<br><strong>输出流</strong><br>数据从程序（内存）到数据源（文件）的路径。</p><h2 id="3-常用的文件操作"><a href="#3-常用的文件操作" class="headerlink" title="3. 常用的文件操作"></a>3. 常用的文件操作</h2><p><img src="File.png" alt="File"><br>File的构造方法：<br><img src="File_Constructor.jpg" alt="File"></p><h3 id="3-1-常用的创建文件方法"><a href="#3-1-常用的创建文件方法" class="headerlink" title="3.1 常用的创建文件方法"></a>3.1 常用的创建文件方法</h3><p><strong><code>File(String pathname)</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * File(String pathname)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTest01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String pathname = <span class="string">"classpath://../resource/file01/test01.txt"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(pathname);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">"文件创建成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong><code>File(String parent, String child)</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * File(String parent, String child)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTest02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String parent = <span class="string">"classpath://../resource"</span>;</span><br><span class="line">    String child = <span class="string">"/file02/test02.txt"</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(parent, child);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">"文件创建成功！"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>File(File parent, String child)</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * File(File parent, String child)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFile03</span><span class="params">()</span></span>&#123;</span><br><span class="line">       File file= <span class="keyword">new</span> File(<span class="string">"classpath://../resource"</span>);</span><br><span class="line">       String childFilePath = <span class="string">"/file03/test03.txt"</span>;</span><br><span class="line">       File file1 = <span class="keyword">new</span> File(file, childFilePath);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           file1.createNewFile();</span><br><span class="line">           System.out.println(<span class="string">"文件创建成功！"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-获取文件信息"><a href="#3-2-获取文件信息" class="headerlink" title="3.2 获取文件信息"></a>3.2 获取文件信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileMethodTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"class://../resource/file01/test01.txt"</span>);</span><br><span class="line">        <span class="comment">// 获取文件名称</span></span><br><span class="line">        System.out.println(<span class="string">"文件名称："</span>+file.getName());</span><br><span class="line">        <span class="comment">// 获取文件绝对路径</span></span><br><span class="line">        System.out.println(<span class="string">"文件绝对路径："</span>+file.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 获取文件路径</span></span><br><span class="line">        System.out.println(<span class="string">"文件路径："</span>+file.getPath());</span><br><span class="line">        <span class="comment">// 获取文件父级目录</span></span><br><span class="line">        System.out.println(<span class="string">"文件父级目录："</span>+file.getParent());</span><br><span class="line">        <span class="comment">// 获取父文件</span></span><br><span class="line">        System.out.println(<span class="string">"父文件："</span>+file.getParentFile());</span><br><span class="line">        <span class="comment">// 文件大小</span></span><br><span class="line">        System.out.println(<span class="string">"文件大小(字节)："</span>+file.length());</span><br><span class="line">        <span class="comment">// 文件是否存在</span></span><br><span class="line">        System.out.println(<span class="string">"文件是否存在："</span>+file.exists());</span><br><span class="line">        <span class="comment">// 是否是一个文件</span></span><br><span class="line">        System.out.println(<span class="string">"是否是一个文件："</span>+file.isFile());</span><br><span class="line">        <span class="comment">// 是否是一个目录</span></span><br><span class="line">        System.out.println(<span class="string">"是否是一个目录："</span>+file.isDirectory());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-目录操作"><a href="#3-3-目录操作" class="headerlink" title="3.3 目录操作"></a>3.3 目录操作</h3><p><strong>创建单级目录及删除目录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建单级目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeDirTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"classpath://../resource/dir"</span>);</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            file.delete();</span><br><span class="line">            System.out.println(<span class="string">"此目录存在！已进行删除！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">            System.out.println(<span class="string">"此目录不存在！创建目录成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>创建多级目录及删除目录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建多级目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeDirsTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"classpath://../resource/dir/dir1/dir2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            file.delete();</span><br><span class="line">            System.out.println(<span class="string">"此目录存在！已进行删除！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">            System.out.println(<span class="string">"此目录不存在！创建目录成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-IO流原理及其分类"><a href="#4-IO流原理及其分类" class="headerlink" title="4. IO流原理及其分类"></a>4. IO流原理及其分类</h2><p>I/O是Input/Output的缩写，I/O技术是非常实用的技术，用于处理数据传输，如读/写文件，网络通讯等。<br>Java程序中，对于数据的输入/输出操作以“流（Stream）”的方式进行。<br><code>java.io</code>包下提供各种“流”类和接口，用来获取不同种类的数据，并通过方法输入或输出数据。</p><h3 id="4-1-流的分类"><a href="#4-1-流的分类" class="headerlink" title="4.1 流的分类"></a>4.1 流的分类</h3><p>按操作数据单位不同分为：</p><ul><li>字节流（8bit）</li><li>字符流（按字符）<br>按数据流向不同分为：</li><li>输入流</li><li>输出流<br>按流的角色不同分为：</li><li>节点流</li><li>处理流/包装流</li></ul><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><blockquote><p>Java的IO流共涉及40多个类，实际上非常有规则，都是以4个抽象基类派生的。<br>由这四个类派生出来的子类名称，都是以其父类名作为子类名后缀。</p></blockquote><p><img src="io_map.jpeg" alt="IO"><br><img src="IO.png" alt="IO"></p><h3 id="4-2-InputStream和OutputStream"><a href="#4-2-InputStream和OutputStream" class="headerlink" title="4.2 InputStream和OutputStream"></a>4.2 InputStream和OutputStream</h3><p><img src="InputStream.png" alt="InputStream"></p><h4 id="4-2-1-FileInputStream和FileOutputStream（字节流）"><a href="#4-2-1-FileInputStream和FileOutputStream（字节流）" class="headerlink" title="4.2.1 FileInputStream和FileOutputStream（字节流）"></a>4.2.1 FileInputStream和FileOutputStream（字节流）</h4><p><strong>FileInputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * FileInputStream演示</span></span><br><span class="line"><span class="comment">    * 单个字节的读取，效率低</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileInputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String filePath = <span class="string">"class://../resource/fileinputstream/hello.txt"</span>;  <span class="comment">// 定义读取的文件位置</span></span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);  <span class="comment">// 创建流对象</span></span><br><span class="line">           <span class="keyword">int</span> readData = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>((readData = fileInputStream.read())!=-<span class="number">1</span>)&#123;   <span class="comment">// read()该输入流读取一个字节的数据。utf8英文字母占1个字节 少数是汉字每个占用3个字节,多数占用4个字节。</span></span><br><span class="line">               System.out.print(readData);  <span class="comment">// 读取出字母对应的ASCII数值</span></span><br><span class="line">               System.out.print((<span class="keyword">char</span>)readData);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileInputStream.close();  <span class="comment">// 关闭流</span></span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * FileInputStream演示</span></span><br><span class="line"><span class="comment">    * 字节数组的读取，效率低</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileInputStream01Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String filePath = <span class="string">"class://../resource/fileinputstream/hello.txt"</span>;  <span class="comment">// 定义读取的文件位置</span></span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);  <span class="comment">// 创建流对象</span></span><br><span class="line">           <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];  <span class="comment">// 定义字节数组</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>((readLength = fileInputStream.read(bytes))!=-<span class="number">1</span>)&#123;   <span class="comment">// read(byte[] b)从该输入流读取最多 b.length个字节的数据为字节数组。utf8英文字母占1个字节 少数是汉字每个占用3个字节,多数占用4个字节。</span></span><br><span class="line">               System.out.print(readLength);</span><br><span class="line">               System.out.print(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,readLength));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileInputStream.close();  <span class="comment">// 关闭流</span></span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>FileOutputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileOutputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String filePath = <span class="string">"classpath://../resource/fileoutputstream/hello.txt"</span>;</span><br><span class="line">       FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// fileOutputStream = new FileOutputStream(filePath);  // 此种构造器是覆盖内容</span></span><br><span class="line">           fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filePath), <span class="keyword">true</span>);</span><br><span class="line">           <span class="comment">// 写入一个字节</span></span><br><span class="line">           <span class="comment">// fileOutputStream.write('H');</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 写入字符串</span></span><br><span class="line">           <span class="comment">//String s = "Hello World!";</span></span><br><span class="line">           <span class="comment">//fileOutputStream.write(s.getBytes());</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 写入指定字符串</span></span><br><span class="line">           String s = <span class="string">"Hello World!"</span>;</span><br><span class="line">           fileOutputStream.write(s.getBytes(),<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileOutputStream.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>FileInputStream和OutputStream实现文件复制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将resource文件夹的图片复制到target中</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">       FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"classpath://../resource/source/2017510143717263.png"</span>);</span><br><span class="line">           fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"classpath://../resource/target/2017510143717263_copy.png"</span>);</span><br><span class="line">           <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> ((readLength = fileInputStream.read(bytes)) !=-<span class="number">1</span> )&#123;</span><br><span class="line">               fileOutputStream.write(bytes,<span class="number">0</span>,readLength);  <span class="comment">// 一定要用这个方法，不然文件数据损坏，提示异常打不开</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileOutputStream.close();</span><br><span class="line">               fileInputStream.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-Reader和Writer-字符流"><a href="#4-3-Reader和Writer-字符流" class="headerlink" title="4.3 Reader和Writer(字符流)"></a>4.3 Reader和Writer(字符流)</h3><h4 id="4-3-1-FileReader和FileWriter"><a href="#4-3-1-FileReader和FileWriter" class="headerlink" title="4.3.1 FileReader和FileWriter"></a>4.3.1 FileReader和FileWriter</h4><p><strong>FileReader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 单个字节读取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileReaderTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String path = <span class="string">"classpath://../resource/filereader/test.txt"</span>;</span><br><span class="line">       FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">int</span> readData=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileReader = <span class="keyword">new</span> FileReader(path);</span><br><span class="line">           <span class="keyword">while</span>((readData = fileReader.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">               System.out.print((<span class="keyword">char</span>)readData);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileReader.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 字符数组读取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileReader01Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String path = <span class="string">"classpath://../resource/filereader/test.txt"</span>;</span><br><span class="line">       FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">int</span> readLen=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">8</span>];</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileReader = <span class="keyword">new</span> FileReader(path);</span><br><span class="line">           <span class="keyword">while</span>((readLen = fileReader.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">               System.out.print(<span class="keyword">new</span> String(buf,<span class="number">0</span>,readLen));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileReader.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>FileWriter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileWriterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String filePath = <span class="string">"classpath://../resource/filewriter/note.txt"</span>;</span><br><span class="line">       FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">char</span>[] chars = &#123;<span class="string">'H'</span>,<span class="string">'E'</span>,<span class="string">'L'</span>,<span class="string">'L'</span>,<span class="string">'O'</span>&#125;;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileWriter = <span class="keyword">new</span> FileWriter(filePath);</span><br><span class="line">           fileWriter.write(<span class="string">'H'</span>);  <span class="comment">// 写入单个字节</span></span><br><span class="line">           fileWriter.write(<span class="string">"Java从入门到入坟！"</span>); <span class="comment">// 写入字符串</span></span><br><span class="line">           fileWriter.write(chars); <span class="comment">// 写入字符数组</span></span><br><span class="line">           fileWriter.write(chars,<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// 写入指定长度的字符数组</span></span><br><span class="line">           fileWriter.write(<span class="string">" 编程入门"</span>,<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// 写入指定长度的字符串</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileWriter.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-节点流-和-处理流-包装流"><a href="#4-4-节点流-和-处理流-包装流" class="headerlink" title="4.4 节点流 和 处理流/包装流"></a>4.4 节点流 和 处理流/包装流</h3><h4 id="4-4-1-定义"><a href="#4-4-1-定义" class="headerlink" title="4.4.1 定义"></a>4.4.1 定义</h4><p><strong>节点流</strong><br>节点流可以从一个特定数据源<strong>读写数据</strong>。如FileReader、FileWriter。<br><strong>处理流（包装流）</strong><br>处理流（也叫包装流）是“连接”在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能。如BufferedReader、BufferedWriter。 </p><h4 id="4-4-2-节点流与处理流的区别与联系"><a href="#4-4-2-节点流与处理流的区别与联系" class="headerlink" title="4.4.2 节点流与处理流的区别与联系"></a>4.4.2 节点流与处理流的区别与联系</h4><ul><li>节点流是底层流（低级流），直接与数据源相接。</li><li>处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供方便的方法来完成输入输出。</li><li>处理流（也叫包装流）对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连。<h4 id="4-4-3-处理流的特点"><a href="#4-4-3-处理流的特点" class="headerlink" title="4.4.3 处理流的特点"></a>4.4.3 处理流的特点</h4></li><li>性能的提高<br>主要以增加缓冲的方式来提高输入输出的效率。</li><li>操作的便捷<br>处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便。<h4 id="4-4-4-处理流-包装流设计模式"><a href="#4-4-4-处理流-包装流设计模式" class="headerlink" title="4.4.4 处理流/包装流设计模式"></a>4.4.4 处理流/包装流设计模式</h4></li></ul><p><strong>装饰模式（包装模式）</strong><br>装饰模式又名包装（Wrapper）模式。装饰模式以对客户端透明的方式扩展对象的功能，是<strong>继承</strong>关系的一个替代方案。装饰模式通过创建一个包装对象，也就是装饰，来包裹真实的对象。装饰模式以对客户端透明的方式动态地给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不创造更多子类的情况下，将对象的功能加以扩展。装饰模式把客户端的调用委派到被装饰类。装饰模式的关键在于这种扩展是完全透明的</p><p>包装模式中有以下几种角色：<br><strong>抽象构件角色（Component）</strong>：给出一个抽象接口，以规范准备接收附加责任的对象。<br><strong>具体构件角色（Concrete Component）</strong>：定义将要接收附加责任的类。<br><strong>装饰角色（Decorator）</strong>：持有一个构件（Component）对象的引用，并定义一个与抽象构件接口一致的接口。<br><strong>具体装饰角色（Concrete Decorator）</strong>：负责给构件对象“贴上”附加的责任。<br><img src="InputStream_uml.png" alt="InputStream_uml"><br>示例：<br><strong>抽象构建角色（Component）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream_</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputStream_</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义抽象读取方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按字节数组读取的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"InputStream_按字节数组读取的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体构件角色（Concrete Component）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStream_</span> <span class="keyword">extends</span> <span class="title">InputStream_</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileInputStream_</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按字节数组读取的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FileInputStream_按字节读取的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FileInputStream_按字节数组读取的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>装饰角色（Decorator）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream_</span> <span class="keyword">extends</span> <span class="title">InputStream_</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> InputStream_ inputStream_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterInputStream_</span><span class="params">(InputStream_ inputStream_)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inputStream_ = inputStream_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inputStream_.read();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按字节数组读取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        inputStream_.read(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体装饰角色（Concrete Decorator）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedInputStream_</span> <span class="keyword">extends</span> <span class="title">FilterInputStream_</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> InputStream_ <span class="title">getIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InputStream_ in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span>  in = inputStream_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream_</span><span class="params">(InputStream_ inputStream_)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(inputStream_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BufferedInputStream_按字节读取方法"</span>);</span><br><span class="line">        inputStream_.read();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> bytes[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BufferedInputStream_按字节数组读取方法"</span>);</span><br><span class="line">        inputStream_.read(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedInputStream_ bufferedInputStream_ = <span class="keyword">new</span> BufferedInputStream_(<span class="keyword">new</span> FileInputStream_(<span class="keyword">new</span> File(<span class="string">"classpath://../resource/file01/test01.txt"</span>)));</span><br><span class="line">        bufferedInputStream_.read();</span><br><span class="line"></span><br><span class="line">        BufferedInputStream_ bufferedInputStream_1 = <span class="keyword">new</span> BufferedInputStream_(<span class="keyword">new</span> ByteArrayInputStream_(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>]));</span><br><span class="line">        bufferedInputStream_1.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-BufferedReader和BufferedWriter"><a href="#4-5-BufferedReader和BufferedWriter" class="headerlink" title="4.5 BufferedReader和BufferedWriter"></a>4.5 BufferedReader和BufferedWriter</h3><p><strong>BufferedReader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedReaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/fileReader/test.txt"</span>;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath));</span><br><span class="line">        String readLine = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((readLine = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(readLine);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedWriter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/filewriter/new.txt"</span>;</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(filePath));</span><br><span class="line">        bufferedWriter.write(<span class="string">"Hello World!"</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        bufferedWriter.write(<span class="string">"你好 世界！"</span>);</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>文件复制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedCopy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sourcePath = <span class="string">"classpath://../resource/source/buffered.txt"</span>;</span><br><span class="line">        String targetPath = <span class="string">"classpath://../resource/target/buffered_copy.txt"</span>;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">null</span>;</span><br><span class="line">        String readLine;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(sourcePath));</span><br><span class="line">            bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(targetPath));</span><br><span class="line">            <span class="keyword">while</span> ((readLine=bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                bufferedWriter.write(readLine);</span><br><span class="line">                bufferedWriter.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != bufferedReader)</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != bufferedWriter)</span><br><span class="line">                    bufferedWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-BufferedInputStream和BufferedOutputStream"><a href="#4-6-BufferedInputStream和BufferedOutputStream" class="headerlink" title="4.6 BufferedInputStream和BufferedOutputStream"></a>4.6 BufferedInputStream和BufferedOutputStream</h3><p><strong>二进制文件Copy</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">      String sourcePath = <span class="string">"classpath://../resource/source/2017510143811976.png"</span>;</span><br><span class="line">      String targetPath = <span class="string">"classpath://../resource/target/2017510143811976_copy.png"</span>;</span><br><span class="line">      BufferedInputStream bufferedInputStream = <span class="keyword">null</span>;</span><br><span class="line">      BufferedOutputStream bufferedOutputStream = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="keyword">int</span> readData;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(sourcePath));</span><br><span class="line">          bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(targetPath));</span><br><span class="line">          <span class="keyword">while</span>((readData = bufferedInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">              bufferedOutputStream.write(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (bufferedInputStream!=<span class="keyword">null</span>)</span><br><span class="line">              bufferedInputStream.close();</span><br><span class="line">              <span class="keyword">if</span> (bufferedOutputStream!=<span class="keyword">null</span>)</span><br><span class="line">              bufferedOutputStream.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-ObjectInputStream和ObjectOutputStream"><a href="#4-7-ObjectInputStream和ObjectOutputStream" class="headerlink" title="4.7 ObjectInputStream和ObjectOutputStream"></a>4.7 ObjectInputStream和ObjectOutputStream</h3><blockquote><p>将<code>int num = 100</code>这个<code>int</code>数据保存到文件中，注意不是<code>100</code>这个数字，而是<code>int 100</code>,并且能够从文件中直接恢复。<br>将<code>Dog dog = new Dog(&quot;小黄&quot;,3)</code>这个对象保存在文件中并且能够从文件恢复。  </p></blockquote><p>上面的要求，就是能够将基本数据类型或者对象数据类型惊醒序列化和反序列化。</p><h4 id="4-7-1-序列化和反序列化"><a href="#4-7-1-序列化和反序列化" class="headerlink" title="4.7.1 序列化和反序列化"></a>4.7.1 序列化和反序列化</h4><p><strong>序列化</strong>就是在保存数据时，保存<strong>数据的值</strong>和<strong>数据类型</strong>。<br><strong>反序列化</strong>就是在恢复数据是，恢复<strong>数据的值</strong>和<strong>数据类型</strong>。<br>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：</p><ul><li>Serializable</li><li>Externalizable  </li></ul><p>示例：<br>ObjectOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.objectstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputSreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ObjectOutputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/objectstream/data.dat"</span>;</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(filePath));</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">100</span>);  <span class="comment">// int -&gt; Integer  实现了 Serializable</span></span><br><span class="line">        objectOutputStream.writeBoolean(<span class="keyword">true</span>); <span class="comment">// boolean -&gt; Boolean  实现了 Serializable</span></span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">"Java IO流"</span>); <span class="comment">// String 实现了 Serializable</span></span><br><span class="line">        objectOutputStream.writeDouble(<span class="number">100.00</span>);  <span class="comment">// double -&gt; Double  实现了 Serializable</span></span><br><span class="line">        objectOutputStream.writeChar(<span class="string">'a'</span>); <span class="comment">// char -&gt; Character 实现了 Serializable</span></span><br><span class="line"></span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog(<span class="string">"旺财"</span>, <span class="number">6</span>);</span><br><span class="line">        objectOutputStream.writeObject(dog);</span><br><span class="line"></span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">desc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是狗！汪汪汪！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObjectInputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.objectstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">objetcInputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/objectstream/data.dat"</span>;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(filePath));</span><br><span class="line">        <span class="comment">// 反序列化必须与粗劣话的顺序一致</span></span><br><span class="line">        System.out.println(objectInputStream.readInt());</span><br><span class="line">        System.out.println(objectInputStream.readBoolean());</span><br><span class="line">        System.out.println(objectInputStream.readUTF());</span><br><span class="line">        System.out.println(objectInputStream.readDouble());</span><br><span class="line">        System.out.println(objectInputStream.readChar());</span><br><span class="line"></span><br><span class="line">        Object o = objectInputStream.readObject();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        Dog dog = (Dog)o; <span class="comment">// 同一个包下的同一个类才可以强转，不然需要声明称public</span></span><br><span class="line">        dog.desc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-2-对象处理流使用细节"><a href="#4-7-2-对象处理流使用细节" class="headerlink" title="4.7.2 对象处理流使用细节"></a>4.7.2 对象处理流使用细节</h4><p>注意事项和细节说明</p><ul><li>读写顺序需要一致；</li><li>要求实现序列化或发序列化对象实现Serializable接口；</li><li>序列化的类中建议添加SerialVersionUID,为了提高版本的兼容性；</li><li>序列化对象时，默认将里面所有属性进行序列化，但是除了static或transient修饰的成员；</li><li>序列化对象时，要求里面属性的类型也需要实现序列化接口；</li><li>序列化具备科技成型，也就是如果某类已经实现了序列化，则其所有的子类也已经默认实现了序列化。</li></ul><h3 id="4-8-标准输入输出流"><a href="#4-8-标准输入输出流" class="headerlink" title="4.8 标准输入输出流"></a>4.8 标准输入输出流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputAndOutputTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 标准输入流  默认设备  键盘</span></span><br><span class="line">        <span class="comment">// 编译类型</span></span><br><span class="line">        InputStream in = System.in;</span><br><span class="line">        <span class="comment">// 运行类型</span></span><br><span class="line">        System.out.println(System.in.getClass());</span><br><span class="line">        <span class="comment">// 标准输出流  默认设备  显示器</span></span><br><span class="line">        <span class="comment">// 编译类型</span></span><br><span class="line">        PrintStream out = System.out;</span><br><span class="line">        <span class="comment">// 运行类型</span></span><br><span class="line">        System.out.println(System.out.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-转换流-InputStreamReader和OutputStreamWriter"><a href="#4-9-转换流-InputStreamReader和OutputStreamWriter" class="headerlink" title="4.9 转换流(InputStreamReader和OutputStreamWriter)"></a>4.9 转换流(InputStreamReader和OutputStreamWriter)</h3><p>创建一个.txt文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">您好 世界！</span><br></pre></td></tr></table></figure><p>使用<code>BufferedReader</code>读取并打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件默认读取编码是UTF-8</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedReaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/fileReader/test.txt"</span>;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath));</span><br><span class="line">        String readLine = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((readLine = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(readLine);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">您好 世界！</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>修改文件的编码格式为<code>GBK</code>，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">���� ���磡</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p><img src="%E4%B9%B1%E7%A0%81.jpg" alt="乱码">  </p><h4 id="4-9-1-使用InputStreamReader读取文件"><a href="#4-9-1-使用InputStreamReader读取文件" class="headerlink" title="4.9.1 使用InputStreamReader读取文件"></a>4.9.1 使用InputStreamReader读取文件</h4><p><img src="InputStreamReader.png" alt="InputStreamReader"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputStringReaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"class://../resource/transformation/codequestion.txt"</span>;</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filePath), <span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 使用InputStreamReader</span></span><br><span class="line"><span class="comment">//        int read = 0;</span></span><br><span class="line"><span class="comment">//        while((read = inputStreamReader.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)read);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        inputStreamReader.close();</span></span><br><span class="line">        <span class="comment">// BufferedReader</span></span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">        String readData;</span><br><span class="line">        <span class="keyword">while</span>((readData = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(readData);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">您好 世界！</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h4 id="4-9-2-使用OutputStreamReader读取文件"><a href="#4-9-2-使用OutputStreamReader读取文件" class="headerlink" title="4.9.2 使用OutputStreamReader读取文件"></a>4.9.2 使用OutputStreamReader读取文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputStreamWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       String filePath = <span class="string">"classpath://../resource/transformation/hello.txt"</span>;</span><br><span class="line">       OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(filePath),<span class="string">"UTF-8"</span>);</span><br><span class="line">       outputStreamWriter.write(<span class="string">"我们一起去看海！"</span>);</span><br><span class="line">       outputStreamWriter.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-PrintStream和PrintWiter"><a href="#5-PrintStream和PrintWiter" class="headerlink" title="5.PrintStream和PrintWiter"></a>5.PrintStream和PrintWiter</h3><p>打印流只有输出流没有输入流。<br><img src="PrintStream.png" alt="PrintStream"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PrintStream printStream = System.out;</span><br><span class="line">        printStream.print(<span class="string">"您好，世界！"</span>);</span><br><span class="line">        <span class="comment">// print方法底层调的write()方法</span></span><br><span class="line">        printStream.write(<span class="string">"哈哈哈"</span>.getBytes());</span><br><span class="line">        printStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改打印流输出的位置/设备</span></span><br><span class="line">        System.setOut(<span class="keyword">new</span> PrintStream(<span class="string">"classpath://../resource/print/print.txt"</span>));</span><br><span class="line">        System.out.print(<span class="string">"您好,中国！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="PrintWriter.png" alt="PrintWriter">  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line">        printWriter.println(<span class="string">"终于干完了！"</span>);</span><br><span class="line">        printWriter.close();</span><br><span class="line"></span><br><span class="line">        PrintWriter printWriter1 = <span class="keyword">new</span> PrintWriter(<span class="string">"classpath://../resource/transformation/printwriter.txt"</span>);</span><br><span class="line">        printWriter1.println(<span class="string">"终于干完了！"</span>);</span><br><span class="line">        printWriter1.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://www.jianshu.com/p/613ee60e08b4" target="_blank" rel="noopener">java基础之IO流（设计模式）</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://10veU.github.io/categories/Java/"/>
    
      <category term="IO" scheme="https://10veU.github.io/categories/Java/IO/"/>
    
    
      <category term="Java" scheme="https://10veU.github.io/tags/Java/"/>
    
      <category term="IO" scheme="https://10veU.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习（二）获取Docker</title>
    <link href="https://10veU.github.io/2021/09/08/Docker%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E8%8E%B7%E5%8F%96Docker/"/>
    <id>https://10veU.github.io/2021/09/08/Docker学习（二）获取Docker/</id>
    <published>2021-09-08T17:04:41.000Z</published>
    <updated>2021-12-06T12:28:18.957Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker学习（二）获取Docker"><a href="#Docker学习（二）获取Docker" class="headerlink" title="Docker学习（二）获取Docker"></a>Docker学习（二）获取Docker</h1><p>您可以在多个平台(Mac/Windows/Linux)上<a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener">下载</a>并安装 Docker。</p><h2 id="1-在Windows上安装Docker-Desktop前置条件"><a href="#1-在Windows上安装Docker-Desktop前置条件" class="headerlink" title="1. 在Windows上安装Docker Desktop前置条件"></a>1. 在Windows上安装Docker Desktop前置条件</h2><p>对于仍在微软服务时间表内的 Windows 10版本，Docker 只支持 Windows 上的 Docker 桌面。</p><h3 id="1-1-系统需求"><a href="#1-1-系统需求" class="headerlink" title="1.1 系统需求"></a>1.1 系统需求</h3><h4 id="WSL-Windows-Subsystem-for-Linux-2后端"><a href="#WSL-Windows-Subsystem-for-Linux-2后端" class="headerlink" title="WSL(Windows Subsystem for Linux) 2后端"></a>WSL(Windows Subsystem for Linux) 2后端</h4><ul><li>Windows 10 64bit: 家庭版或者专业版2004（build 19041）或者更高版本<br> Windows 10 64bit: 企业版或者教育版1909（build 18363） 或者更高版本</li><li>在Windows上启用WSL2特性，更多细节请参考<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Miscrosoft documentation</a>.</li><li>在Windows 10上成功运行WSL 2需要一下先决条件：<br>64位处理器和Second Level Address Translation(SLAT)（二级地址转换）<br>4GB系统内存<br>必须在BIOS设置中启用BIOS级虚拟化支持。更多信息参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled" target="_blank" rel="noopener">Virtualization</a>.</li><li>下载并安装Linux内核更新包。<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package" target="_blank" rel="noopener">在 Windows 10 上安装 WSL | Microsoft Docs</a><h4 id="Hyper-V-后端和Windows容器"><a href="#Hyper-V-后端和Windows容器" class="headerlink" title="Hyper-V 后端和Windows容器"></a>Hyper-V 后端和Windows容器</h4></li><li>Windows 10 64-bit: 专业版2004 (build 19041) 或者更高版本<br>  Windows 10 64bit: 企业版或者教育版1909（build 18363） 或者更高版本</li><li>必须启用 Hyper-V 和 Containers Windows 特性</li><li>在Windows 10上成功运行WSL 2需要一下先决条件：<ul><li>64位处理器和Second Level Address Translation(SLAT)（二级地址转换）</li><li>4GB系统内存</li><li>必须在BIOS设置中启用BIOS级虚拟化支持。更多信息参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled" target="_blank" rel="noopener">Virtualization</a>.<h4 id="Docker-Desktop-Installer包含哪些内容？"><a href="#Docker-Desktop-Installer包含哪些内容？" class="headerlink" title="Docker Desktop Installer包含哪些内容？"></a>Docker Desktop Installer包含哪些内容？</h4>Docker Desktop包含<a href="https://docs.docker.com/engine/" target="_blank" rel="noopener">Docker Engine</a>，Docker CLI client，<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker Compose</a>，Docker Content Trust，<a href="https://github.com/kubernetes/kubernetes/" target="_blank" rel="noopener">Kubernetes</a>和<a href="https://github.com/docker/docker-credential-helpers/" target="_blank" rel="noopener">Credential Helper</a>。<br>使用 Docker Desktop 创建的容器和镜像在安装它的计算机上的所有用户帐户之间共享。这是因为所有 Windows 帐户都使用相同的 VM 来构建和运行容器。请注意，在使用 Docker Desktop WSL 2后端时，不可能在用户帐户之间共享容器和镜像。<br>嵌套的虚拟化场景，比如在 VMWare 或 Parallels 实例上运行 Docker Desktop 可能可以使用，但这并不能保证。有关的更多信息，请参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios" target="_blank" rel="noopener">在嵌套虚拟化场景中运行 Docker 桌面</a>。<h4 id="关于Windows容器"><a href="#关于Windows容器" class="headerlink" title="关于Windows容器"></a>关于Windows容器</h4></li></ul></li><li><a href="https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers" target="_blank" rel="noopener">在Windows容器之间切换</a></li><li><a href="https://github.com/docker/labs/blob/master/windows/windows-containers/README.md" target="_blank" rel="noopener">开始使用windows容器（Lab）</a></li><li><a href="https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports" target="_blank" rel="noopener">适用于Windows的Docker容器平台的文章和博客</a></li></ul><h3 id="1-2-Install-Docker-Desktop-on-Windows"><a href="#1-2-Install-Docker-Desktop-on-Windows" class="headerlink" title="1.2 Install Docker Desktop on Windows"></a>1.2 Install Docker Desktop on Windows</h3><h4 id="查看自己的电脑系统是否满足系统需求"><a href="#查看自己的电脑系统是否满足系统需求" class="headerlink" title="查看自己的电脑系统是否满足系统需求"></a>查看自己的电脑系统是否满足系统需求</h4><p>开始-设置-系统-关于，如下示例：<br><strong>设备规格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">设备名称ESR-20151030WHY</span><br><span class="line">处理器Intel(R) Core(TM) i5-4200U CPU @ 1.60GHz   2.30 GHz</span><br><span class="line">机带 RAM8.00 GB</span><br><span class="line">设备 ID9E4CA172-84E3-48EB-8909-8E0CCD2D66A1</span><br><span class="line">产品 ID00330-50000-00000-AAOEM</span><br><span class="line">系统类型64 位操作系统, 基于 x64 的处理器</span><br><span class="line">笔和触控没有可用于此显示器的笔或触控输入</span><br></pre></td></tr></table></figure><p><strong>Windows规格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">版本Windows 10 专业版</span><br><span class="line">版本号21H1</span><br><span class="line">安装日期‎2021/‎7/‎12</span><br><span class="line">操作系统内部版本19043.1083</span><br><span class="line">体验Windows Feature Experience Pack 120.2212.3530.0</span><br></pre></td></tr></table></figure><p><strong><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Enable the Windows Subsystem for Linux</a></strong></p><ol><li>以管理员身份打开 PowerShell 并运行:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure></li></ol><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line"></span><br><span class="line">部署映像服务和管理工具</span><br><span class="line">版本: 10.0.19041.844</span><br><span class="line"></span><br><span class="line">映像版本: 10.0.19043.1083</span><br><span class="line"></span><br><span class="line">启用一个或多个功能</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">操作成功完成。</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure><p><img src="docker_02_01.png" alt="docker install"></p><ol start="2"><li>Check requirements for running WSL 2<br>要更新到 wsl2，您必须运行 Windows 10.</li></ol><ul><li>For x64 systems: Version 1903 or higher, with Build 18362 or higher.</li><li>For ARM64 systems: Version 2004 or higher, with Build 19041 or higher.</li><li>Builds lower than 18362 do not support WSL 2. Use the <a href="https://www.microsoft.com/software-download/windows10" target="_blank" rel="noopener">Windows Update Assistant</a> to update your version of Windows.<br>To check your version and build number, select Windows logo key + R, type winver, select OK. <a href="http://ms-settings:windowsupdate/" target="_blank" rel="noopener">Update to the latest Windows version</a> in the Settings menu.</li></ul><ol start="3"><li>Enable Virtual Machine feature<br>在安装 wsl2之前，您必须启用虚拟机平台的可选特性。您的计算机将需要虚拟化能力来使用这个特性。<br>以管理员身份打开 PowerShell 并运行:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure></li></ol><p>重新启动计算机以完成 WSL 安装并更新到 wsl2。</p><ol start="4"><li>Download the Linux kernel update package<br>下载最新软件包:</li></ol><ul><li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener">WSL2 Linux kernel update package for x64 machines 针对 x64机器的 WSL2 Linux 内核更新包</a></li><li>运行上一步中下载的更新包。(双击运行——系统将提示您提高权限，选择“是”以批准此安装。)</li></ul><ol start="5"><li>将 WSL 2 设置为默认版本<br>打开 PowerShell 并运行以下命令，在安装新的 Linux 发行版时将 WSL 2设置为默认版本:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; wsl --set-default-version 2</span><br><span class="line">有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>检查系统的处理器，系统RAM，BIOS中是否开启了虚拟化</strong><br>打开 PowerShell 并运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; systeminfo</span><br><span class="line"></span><br><span class="line">主机名:           ESR-20151030WHY</span><br><span class="line">OS 名称:          Microsoft Windows 10 专业版</span><br><span class="line">OS 版本:          10.0.19043 暂缺 Build 19043</span><br><span class="line">OS 制造商:        Microsoft Corporation</span><br><span class="line">OS 配置:          独立工作站</span><br><span class="line">OS 构建类型:      Multiprocessor Free</span><br><span class="line">注册的所有人:     微软用户</span><br><span class="line">注册的组织:       微软中国</span><br><span class="line">产品 ID:          00330-50000-00000-AAOEM</span><br><span class="line">初始安装日期:     2021/7/12, 21:17:33</span><br><span class="line">系统启动时间:     2021/8/1, 16:05:23</span><br><span class="line">系统制造商:       LENOVO</span><br><span class="line">系统型号:         80EQCTO1WW</span><br><span class="line">系统类型:         x64-based PC</span><br><span class="line">处理器:           安装了 1 个处理器。</span><br><span class="line">                  [01]: Intel64 Family 6 Model 69 Stepping 1 GenuineIntel ~1600 Mhz</span><br><span class="line">BIOS 版本:        LENOVO 9DCN26WW(V2.07), 2014/9/23</span><br><span class="line">Windows 目录:     C:\WINDOWS</span><br><span class="line">系统目录:         C:\WINDOWS\system32</span><br><span class="line">启动设备:         \Device\HarddiskVolume1</span><br><span class="line">系统区域设置:     zh-cn;中文(中国)</span><br><span class="line">输入法区域设置:   zh-cn;中文(中国)</span><br><span class="line">时区:             (UTC+08:00) 北京，重庆，香港特别行政区，乌鲁木齐</span><br><span class="line">物理内存总量:     8,120 MB</span><br><span class="line">可用的物理内存:   4,186 MB</span><br><span class="line">虚拟内存: 最大值: 16,312 MB</span><br><span class="line">虚拟内存: 可用:   11,908 MB</span><br><span class="line">虚拟内存: 使用中: 4,404 MB</span><br><span class="line">页面文件位置:     C:\pagefile.sys</span><br><span class="line">域:               WorkGroup</span><br><span class="line">登录服务器:       \\ESR-20151030WHY</span><br><span class="line">修补程序:         安装了 4 个修补程序。</span><br><span class="line">                  [01]: KB5003254</span><br><span class="line">                  [02]: KB5000736</span><br><span class="line">                  [03]: KB5004945</span><br><span class="line">                  [04]: KB5003742</span><br><span class="line">网卡:             安装了 2 个 NIC。</span><br><span class="line">                  [01]: Realtek PCIe GBE Family Controller</span><br><span class="line">                      连接名:      本地连接</span><br><span class="line">                      状态:        媒体连接已中断</span><br><span class="line">                  [02]: Qualcomm Atheros AR956x Wireless Network Adapter</span><br><span class="line">                      连接名:      无线网络连接</span><br><span class="line">                      启用 DHCP:   是</span><br><span class="line">                      DHCP 服务器: 192.168.0.1</span><br><span class="line">                      IP 地址</span><br><span class="line">                        [01]: 192.168.0.195</span><br><span class="line">                        [02]: fe80::78dd:61d6:a6e8:e5d4</span><br><span class="line">Hyper-V 要求:     已检测到虚拟机监控程序。将不显示 Hyper-V 所需的功能。</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure><p><img src="docker_02_02.png" alt="cpu"></p><h2 id="2-在-Windows-上安装-Docker-桌面"><a href="#2-在-Windows-上安装-Docker-桌面" class="headerlink" title="2. 在 Windows 上安装 Docker 桌面"></a>2. 在 Windows 上安装 Docker 桌面</h2><ul><li>双击 Docker Desktop Installer.exe 运行安装程序。</li><li>当提示时，确保启用 Hyper-V Windows 特性或者安装 WSL 2所需的 Windows 组件选项在 Configuration 页面上被选中。<br><img src="docker_02_03.png" alt="docker configuration"><br><img src="docker_02_04.png" alt="docker configuration"><br><img src="docker_02_05.png" alt="docker configuration"></li><li>按照安装向导上的说明授权安装程序并继续安装。<br><img src="docker_02_06.png" alt="docker configuration"></li><li>安装成功后，单击“关闭”完成安装过程。<br><img src="docker_02_07.png" alt="doccker configuration"></li><li>如果您的管理帐户与您的用户帐户不同，则必须将该用户添加到 docker-users 组中。以管理员身份运行计算机管理并导航到 <code>Local Users and Groups &gt; Groups &gt; docker-users</code>。右击可将用户添加到组中。注销并重新登录以使更改生效。<h2 id="3-启动Docker桌面"><a href="#3-启动Docker桌面" class="headerlink" title="3. 启动Docker桌面"></a>3. 启动Docker桌面</h2>点击Docker Desktop图标即可启动。<br><img src="docker_02_08.png" alt="docker configuration"><br><img src="docker_02_09.png" alt="docker configuration"><br>当状态栏中的鲸图标保持稳定时，Docker 桌面就会启动并运行，并且可以从任何终端窗口访问。要了解更多信息，请参见<a href="https://docs.docker.com/docker-for-windows/#docker-settings-dialog" target="_blank" rel="noopener">Docker设置</a>。<h2 id="4-快速入门指南"><a href="#4-快速入门指南" class="headerlink" title="4. 快速入门指南"></a>4. 快速入门指南</h2>要根据需要运行快速启动指南，右键单击通知区域(或系统托盘)中的 Docker 图标，以打开 Docker Desktop 菜单，然后选择快速启动指南。</li></ul><h2 id="5-更新"><a href="#5-更新" class="headerlink" title="5. 更新"></a>5. 更新</h2><p>从 Docker Desktop 3.0.0开始，Docker Desktop 的更新将作为以前版本的 delta 更新提供。当更新可用时，dockerdesktop 会显示一个图标，指示更新版本的可用性。您可以选择何时开始下载和安装过程。<br><img src="docker_02_10.png" alt="docker configuration"><br>单击“下载更新”当您准备好下载更新时。这将在后台下载更新。下载更新后，单击 Update 并从 Docker 菜单重新启动。这将安装最新更新并重新启动 Docker Desktop 以使更改生效。</p><h2 id="6-卸载Docker-Desktop"><a href="#6-卸载Docker-Desktop" class="headerlink" title="6. 卸载Docker Desktop"></a>6. 卸载Docker Desktop</h2><p>从Windows卸载Docker Desktop:</p><ul><li>点击Windows的开始菜单，选择设置-应用-应用和功能</li><li>在应用列表中选择Docker Desktop，选择卸载</li><li>点击卸载确认你的选择。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://10veU.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://10veU.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习（一）概述</title>
    <link href="https://10veU.github.io/2021/09/08/Docker%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E8%BF%B0/"/>
    <id>https://10veU.github.io/2021/09/08/Docker学习（一）概述/</id>
    <published>2021-09-08T15:06:56.000Z</published>
    <updated>2021-12-06T12:28:18.957Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker学习（一）概述"><a href="#Docker学习（一）概述" class="headerlink" title="Docker学习（一）概述"></a>Docker学习（一）概述</h1><p>Docker 是一个用于开发、发布和运行应用程序的开放平台。Docker 使您能够将应用程序与基础结构分离开来，从而可以快速交付软件。使用 Docker，您可以像管理应用程序一样管理基础结构。通过利用 Docker 的快速发布、测试和部署代码的方法，可以显著减少编写代码和在生产环境中运行代码之间的延迟。<br><a href="https://www.docker.com/" target="_blank" rel="noopener">🐳Docker官网</a><br><a href="https://docs.docker.com/" target="_blank" rel="noopener">🐳官方文档</a></p><h2 id="1-Docker平台"><a href="#1-Docker平台" class="headerlink" title="1. Docker平台"></a>1. Docker平台</h2><p>Docker 提供了在称为容器的松散隔离环境中打包和运行应用程序的能力。隔离和安全性允许您在给定的主机上同时运行多个容器。容器是轻量级的，包含运行应用程序所需的所有内容，因此不需要依赖于主机上当前安装的内容。您可以轻松地在工作时共享容器，并确保与您共享的每个人都使用相同的工作方式。<br>Docker提供了工具和平台来管理容器的生命周期:  </p><ul><li>使用容器开发应用程序及其支持组件；</li><li>容器成为分发和测试应用程序的单元；</li><li>准备就绪后，将应用程序部署到生产环境中，作为容器或已编排的服务。无论您的生产环境是本地数据中心、云提供商，还是两者的混合体，这都是一样的。<h2 id="2-Docker可以做什么？"><a href="#2-Docker可以做什么？" class="headerlink" title="2. Docker可以做什么？"></a>2. Docker可以做什么？</h2></li><li>应用程序的快速、一致的交付</li><li>响应式部署和扩展</li><li>在同一个硬件上运行更多的工作负载</li></ul><h2 id="3-Docker体系结构"><a href="#3-Docker体系结构" class="headerlink" title="3. Docker体系结构"></a>3. Docker体系结构</h2><p>Docker 使用<code>client-Server</code>体系结构。Docker client与 Docker daemon进行对话，后者执行<strong>构建、运行和分发 Docker 容器</strong>的繁重工作。Docker client与 Docker daemon可以在同一个系统上运行，或者您可以将Docker client连接到远程Docker daemon。Docker client和Docker daemon使用 REST API、 UNIX 套接字或网络接口进行通信。另一个Docker client是  Docker Compose，它允许您处理由一组容器组成的应用程序。<br><img src="docker_platform.png" alt="Docker"></p><h3 id="3-1-Docker守护进程（Docker-daemon）"><a href="#3-1-Docker守护进程（Docker-daemon）" class="headerlink" title="3.1 Docker守护进程（Docker daemon）"></a>3.1 Docker守护进程（Docker daemon）</h3><p>Docker daemon(dockerd)监听 Docker API 请求并管理 Docker 对象，如镜像、容器、网络和数据卷（用于保存持久化数据）。守护进程还可以与其他守护进程通信，以管理 Docker 服务。</p><h3 id="3-2-Docker客户端（Docker-client）"><a href="#3-2-Docker客户端（Docker-client）" class="headerlink" title="3.2 Docker客户端（Docker client）"></a>3.2 Docker客户端（Docker client）</h3><p>Docker client(Docker)是许多 Docker 用户与 Docker 交互的主要方式。当您使用诸如 docker run 之类的命令时，客户端将这些命令发送给 dockerd，后者执行这些命令。Docker 命令使用 Docker API。Docker 客户端可以与多个守护进程通信。</p><h3 id="3-3-Docker注册中心（Docker-registries）"><a href="#3-3-Docker注册中心（Docker-registries）" class="headerlink" title="3.3 Docker注册中心（Docker registries）"></a>3.3 Docker注册中心（Docker registries）</h3><p>Dockerregistry 存储 Docker images。Docker Hub 是任何人都可以使用的公共注册中心，Docker 默认配置为在 Docker Hub 上查找镜像。你甚至可以运行自己的私人注册中心。<br>当您使用 docker pull 或 docker 运行命令时，所需的映像将从您配置的注册中心中提取出来。当您使用 docker push 命令时，您的映像将被推送到您配置的注册中心。</p><h3 id="3-4-Docker对象（Docker-objects）"><a href="#3-4-Docker对象（Docker-objects）" class="headerlink" title="3.4 Docker对象（Docker objects）"></a>3.4 Docker对象（Docker objects）</h3><p>当你使用 Docker 时，你正在创建和使用镜像、容器、网络、数据卷、插件和其他对象。</p><h4 id="镜像（images"><a href="#镜像（images" class="headerlink" title="镜像（images)"></a>镜像（images)</h4><p>镜像是一个只读模板，其中包含创建 Docker 容器的说明。通常，一个镜像基于另一个图像，并带有一些额外的定制。例如，你可以构建一个镜像基于 ubuntu 镜像，但是你也要安装Apache HTTP Server 和你的应用程序，以及运行你的应用程序所需的配置细节。<br>您可以创建自己的镜像，也可以只使用其他人创建并在注册表中发布的镜像。要构建您自己的镜像，您需要创建一个 Dockerfile，它使用一个简单的语法来定义创建映像和运行映像所需的步骤。Dockerfile 中的每条指令都在镜像中创建一个图层。当您更改 Dockerfile 并重新生成图像时，只会重新生成已更改的图层。与其他虚拟化技术相比，这是使镜像如此轻量化、小巧和快速的部分原因。</p><h4 id="容器（Containers）"><a href="#容器（Containers）" class="headerlink" title="容器（Containers）"></a>容器（Containers）</h4><p>容器是镜像的可运行实例。您可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器。您可以将容器连接到一个或多个网络，将存储器附加到容器上，甚至可以根据容器的当前状态创建新镜像。<br>默认情况下，容器与其他容器及其主机相对隔离较好。您可以控制容器的网络、存储或其他基础子系统与其他容器或主机的隔离程度。<br>容器是由其镜像以及创建或启动时提供给它的任何配置选项定义的。当一个容器被移除时，任何对其状态的更改，如果没有存储在持久性存储中的话，都会消失。</p><ul><li>示例 <code>docker run</code> 命令<pre><code class="bash">$ docker run -i -t ubuntu /bin/bash</code></pre>当您运行此命令时，会发生以下情况(假设您使用的是默认注册中心配置) :</li></ul><ol><li>如果你本地没有 ubuntu 镜像，Docker 会从你配置的注册中心中提取它，就像你手动运行 docker pull  ubuntu 一样。</li><li>Docker 创建一个新容器，就像您已经手动运行了一个 docker container create命令一样。</li><li>Docker 将一个读写文件系统分配给容器，作为它的最后一层。这允许正在运行的容器在其本地文件系统中创建或修改文件和目录。</li><li>由于您没有指定任何网络选项，因此 Docker 创建一个网络接口将容器连接到默认网络。这包括为容器分配一个 IP 地址。默认情况下，容器可以使用主机的网络连接连接到外部网络。</li><li>Docker 启动容器并执行/bin/bash。因为容器是交互式运行的，并且连接到您的终端(由于-i 和-t 标志) ，所以您可以在将输出记录到终端的同时使用键盘提供输入。</li><li>当键入 exit 以终止/bin/bash 命令时，容器将停止，但不会被删除。你可以重新启动或者删除它。<h2 id="4-Docker使用的基础技术"><a href="#4-Docker使用的基础技术" class="headerlink" title="4. Docker使用的基础技术"></a>4. Docker使用的基础技术</h2>并利用 Linux 内核的几个特性来实现其功能。Docker 使用namespaces技术提供称为容器的隔离工作区。运行容器时，Docker 为该容器创建一组名称空间。<br>这些名称空间提供了一个隔离层。容器的每个方面都运行在一个单独的名称空间中，它的访问受到该名称空间的限制。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://10veU.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://10veU.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>云计算概览</title>
    <link href="https://10veU.github.io/2021/09/07/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A6%82%E8%A7%88/"/>
    <id>https://10veU.github.io/2021/09/07/云计算概览/</id>
    <published>2021-09-07T20:54:50.000Z</published>
    <updated>2021-12-06T12:28:19.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="云计算概览"><a href="#云计算概览" class="headerlink" title="云计算概览"></a>云计算概览</h1><h2 id="1-云计算定义"><a href="#1-云计算定义" class="headerlink" title="1. 云计算定义"></a>1. 云计算定义</h2><p>云计算（<code>CloudComputing</code>）在维基百科的定义是：一种基于<strong>互联网</strong>的计算方式，通过这种方式，<strong>共享</strong>的软硬件资源和信息可以<strong>按需求</strong>提供给计算机终端和其他设备。<br>                            —— 维基百科<br>云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络服务（即随时随地接入可接入），进入可配置的计算资源共享池（包括：网络、服务器、存储、应用软件、服务），这些资源能够被快速提供，只需投入很少的管理工作，或与服务供应商进行很少的交互。<br>            —— 美国国家标准与技术研究院 </p><h2 id="2-云计算的发展"><a href="#2-云计算的发展" class="headerlink" title="2. 云计算的发展"></a>2. 云计算的发展</h2><p><img src="%E4%BA%91%E8%AE%A1%E7%AE%97%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.png" alt="云计算发展历史">  </p><h2 id="3-云计算的分类"><a href="#3-云计算的分类" class="headerlink" title="3. 云计算的分类"></a>3. 云计算的分类</h2><p>云计算的分类有多种，按照<strong>服务类型</strong>分为<code>IaaS</code>、<code>PaaS</code>和<code>SaaS</code>。</p><ul><li>IaaS<br>IaaS（Infrastructure as a Service），基础设施即服务，就是将基础设施当作服务对外输出，那么什么是基础设施呢？计算、存储、网络这些原始资源就是基础设施资源，通过互联网对外提供服务。典型的例子是Amazon的EC2服务。虚拟化是IaaS实现的基础，通过计算虚拟化、网络虚拟化和存储虚拟化将物理资源整合成虚拟的资源池，然后将资源以更小的粒度提供给资源申请者，从而完成资源的二次分配。</li><li>PaaS<br>PaaS（Platform as a Service），平台即服务，它直接为用户提供一套平台，包括语言运行环境、编程框架及数据存储中间件等一系列功能。这个平台可以是Java开发平台，用户只需要在遵守平台开发规范的前提下，编写自己的业务代码，单击运行，平台就会自动完成代码编译和打包，以及程序所需的数据存储（例如MySQL），即通过调用SDK或者API就可以使用平台，使得用户可以更加关注自己的业务代码的编写。容器和Kubernetes技术的不断成熟，PaaS将管理的对象从资源升级到服务，面向接口编程和运维，PaaS平台的本质就是自动化编译构建及自动化服务运维。  </li><li>SaaS<br>SaaS（Software as a Service），软件即服务，它是最高层的抽象，对于最终用户，它不关心任何技术相关内容，以服务的方式交付。我们使用的在线云编辑器就是一种SaaS服务，只需要通过浏览器就可以在线编辑Word或者PPT，并且可以云端保存，而且只要在能够连接到互联网的情况下，都可以编辑，用户不需要关心背后的实现细节。  </li></ul><p><img src="%E5%BA%94%E7%94%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="应用层次结构"><br>从IaaS到SaaS，用户对底层技术的依赖越来越低，使用的方式越来越便捷，相应对底层技术的要求也越来越高。<br>伴随着时代的发展，也出现了一些新的服务类型，例如FaaS（Function as a Service），腾讯云提供的云函数。<br>将容器当作一种服务类型的CaaS（Container as a Service），通过容器化使开发人员和运维人员可以在这里共同构建、迁移和运行应用程序。<br>还有BaaS（区块链即服务）、TaaS（TensorFlow即服务）等，这些都是SaaS的应用。<br>按照<strong>服务范围</strong>分为私有云、公有云和混合云。</p><ul><li>私有云<br>私有云，顾名思义，就是企业内部私有化部署的，为企业内部提供云服务。私有云的主要目的是充分利用自有物理服务器资源，更加安全便捷地获取云服务，尤其在金融行业，为了数据的保密和安全，通常会采用私有化部署。私有云的特点是一般规模比较小、单集群或者同城多集群部署、几千级别的服务器数量、对内部隔离和安全要求比较低，当然一个企业内部不同部门的资源隔离也是必须的。为了适应不同企业的组织规划和流程，通常还会根据企业需求，定制一些特有的功能，这也是当前很多CMP运管平台专攻的市场。私有云的定制化让私有云更加贴近客户的需求、接近数据源的部署方式，更加高效、便捷。</li><li>公有云<br>公有云是当前最为大众熟知的云服务提供方式，向全球用户提供云服务，当前最大几个公有云厂商包括AWS、微软、Google和阿里云。公有云的特点是集群规模很大，百万级别的服务器，全球多区域部署的数据中心。它们在系统安全、防攻击，以及可靠性等方面会有更高的要求。</li><li>混合云<br>混合云是将上面两种场景结合的产物，既然企业已经有了私有云，为什么还需要公有云服务呢？一方面是对数据安全的保护，不能将所有服务都迁移至公有云部署；另一方面，面对突发流量的情况，可以利用公有云快速伸缩的特性，分担业务流量，最典型的就是中国铁路12306通过阿里云分担车票查询服务的请求。为了管理混合云，企业内部通常会定制一套混合云管理系统，同时对接私有云和公有云的API，但混合云实施的难点是解决服务之间的调用、网络互连和资源调度等问题。  </li></ul><p>云计算还可以根据行业划分为政务云（面向政府行业）、金融云（面向金融行业）、教育云（面向教育行业）等，根据每个行业的不同行业特征，提供定制的云服务。</p><h2 id="4-云计算架构"><a href="#4-云计算架构" class="headerlink" title="4. 云计算架构"></a>4. 云计算架构</h2><h3 id="4-1-部署架构"><a href="#4-1-部署架构" class="headerlink" title="4.1 部署架构"></a>4.1 部署架构</h3><ul><li>私有云<br>  中小企业的私有云部署通常采用几百台服务器，通过vlan方式实现网络隔离，较为简单、高效。中型企业的私有云部署，需要考虑多机房网络互连和备份，通过专线互连，跨机房网络VXLAN是一个很好的解决方案。<br>  <img src="%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.png" alt="部署架构"></li><li>公有云<br>   在公有云中，资源管理按照层级划分，首先是区域（Region），每个区域都是独立的地理位置，并且完全隔离，可以实现一定程度的容错能力和稳定性，而且EC2实例支持跨区域的部署。<br>   <img src="AWS.png" alt="AWS"></li></ul><h3 id="4-2-架构设计"><a href="#4-2-架构设计" class="headerlink" title="4.2 架构设计"></a>4.2 架构设计</h3><p><img src="%E6%9E%B6%E6%9E%84.jpg" alt="架构"></p><h2 id="5-云计算中的关键技术"><a href="#5-云计算中的关键技术" class="headerlink" title="5. 云计算中的关键技术"></a>5. 云计算中的关键技术</h2><h3 id="5-1-异构资源管理"><a href="#5-1-异构资源管理" class="headerlink" title="5.1 异构资源管理"></a>5.1 异构资源管理</h3><p>异构资源，就是数据中心里面有多种虚拟化软件存在的场景，当然对于最终使用虚拟机的用户来说，是不需要感知的。当有不同的虚拟化软件存在的时候，IaaS平台需要去适配各种虚拟化接口。如果有一部分虚拟机是VMware，还有一部分是KVM，当需要管理这两种虚拟化软件的时候，需要通过相应的接口去适配。通常，针对KVM需要通过Libvirt接口，而针对VMware是通过VCenter的API的。将不同的接口通过适配器模式抽象成统一的接口。在资源管理的时候，需要先确定资源所属的虚拟化类型，然后调用不同的虚拟化API完成资源管理。例如，针对一次虚拟机的开机操作，需要先通过数据库查询该虚拟机所在资源池、所使用的虚拟化软件，然后调用对应的虚拟化软件API，如果是KVM，则去调用Libvirt的接口启动Domain。如果是虚拟机和容器的混合，就需要去适配容器的管理API。</p><h3 id="5-2-虚拟化"><a href="#5-2-虚拟化" class="headerlink" title="5.2 虚拟化"></a>5.2 虚拟化</h3><p>虚拟化是云的基石，包括<strong>计算虚拟化</strong>、<strong>分布式存储虚拟化</strong>、<strong>SDN网络虚拟化</strong>等。在云的环境中软件定义一切，通过软件实现了<strong>资源隔离</strong>、<strong>安全访问</strong>、<strong>数据高可用性</strong>和<strong>网络的自定义</strong>。<br><strong>虚拟化需要解决资源的竞争与隔离</strong>，多个用户的进程运行在同一台服务器上面，<strong>一方面需要保障每个进程具有相同的优先级</strong>，避免由于单个进程消耗过多资源而影响其他进程的运行，<strong>另一方面需要完善隔离机制</strong>，避免单个程序的安全漏洞影响其他用户程序。<br>虚拟化需要提供与传统资源相兼容的接口，很多情况下，终端用户是不需要感知虚拟化存在的。在为用户分配一台服务器的时候，用户不用关心它到底是一台物理机，还是一台虚拟机。分配一个块存储或者NFS的时候，用户也不需要了解数据是如何保存的。<br>通过软件虚拟化虽然可以实现很多硬件的功能，通过软件虚拟化虽然可以实现很多硬件的功能，虚拟化并不能完全达到硬件性能，并且很多虚拟化方案本身还消耗一定的资源。</p><h3 id="5-3-资源调度"><a href="#5-3-资源调度" class="headerlink" title="5.3 资源调度"></a>5.3 资源调度</h3><p>资源调度就是当用户申请资源的时候，系统需要通过调度确定资源位置（针对虚拟机调度场景决定虚拟机开在哪台物理机器上）。资源调度的优劣不仅会影响资源利用率的高低，还会影响整个系统的稳定性。<br>Google在一篇关于Omega的调度系统论文中将调度分为三类：单体、二层调度和共享状态。</p><ul><li>单体<br>单体是指所有任务都是通过一个串行调度器分配的，典型的是GoogleBorg和它的开源实现Kubernetes，它的优点是简单，但缺点也比较明显，很难支持多类型任务的执行，如同时支持批处理和长任务。</li><li>二层调度<br>二层调度是将资源分配和任务调度分离，第一层是从全局的资源池中分配资源给各种类型任务调度器，第二层任务调度器依据任务特点启动任务，典型的代表是Mesos和Yarn，其中，Mesos的Framework或者Yarn的AppMaster就是任务调度器。二层调度器的缺点是：资源调度器无法感知全局资源，只了解自己的可用资源，并且每个任务调度器只会最大化自己的利益，造成全局资源的使用失衡。  </li><li>共享状态<br>共享状态通过在每个任务调度器中保存一份整个集群状态信息的副本，从而实现全局调度，典型的代表是Omega。但共享状态调度的方式实现起来比较复杂，除了解决数据共享，还需要解决调度冲突等问题。  </li></ul><p><img src="%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6.png" alt="任务调度"><br>通常的调度流程分为两层，第一层是主机过滤（Filter），第二层是主机的权值打分（Weight）。<br><img src="%E8%B0%83%E5%BA%A6%E6%B5%81%E7%A8%8B.png" alt="调度流程"><br>过Filter和Weight决定这次创建资源（虚拟机或者容器）应该分配到哪一台服务器上。在Filter过程中，主要是主机筛选，通常是对容量如剩余CPU、内存、主机端口、主机IP地址、主机名或者主机位置等条件筛选。在Weight阶段，主要通过一些调度算法，如：平均资源使用算法、最大主机资源利用率算法、亲和与反亲和算法等给每个Filter后的主机进行评分，最后按照分数排序确定最优主机。当服务器达到一定规模后，Filter和Weight过程将会耗费很多时间，优化的方式通常包括：分区调度（将主机划分成多个集群，每次调度只针对集群）、并行调度（将调度算法并行化处理，提高执行效率，并采用乐观锁和重试机制）。<br>在资源混部的架构下，资源调度更加复杂：虚拟机与容器混部、流或批处理任务与常驻进程混部、多任务优先级QoS等。任务优先级调度需要保障高优先级任务拥有更高的资源分配权。通常批处理任务的优先级比较低，而Web服务的优先级较高，当资源不足时可以优先回收批处理，保障Web服务的稳定运行。</p><h3 id="5-4-自定义网络"><a href="#5-4-自定义网络" class="headerlink" title="5.4 自定义网络"></a>5.4 自定义网络</h3><p>在云环境中，每个用户都有多套VPC（Virtual Private Cloud）。这是用户自定义的网络环境，可以配置网络的IP地址范围、创建子网，以及配置路由表、网关和ACL安全设置等操作。<br>网络虚拟化，或者说SDN技术可以帮助我们解决相关问题。虚拟的网络交换机提供数据帧的二层转发，相比于传统的物理交换机，可以更加灵活地配置，例如可以通过流表随意修改源mac和目的mac、添加和去除vlan等；虚拟的路由器共有三层转发功能，结合iptables技术提供NAT功能，通过namespace技术可以为每个用户提供一个虚拟路由器；还有安全组的设置，可以自定义各种安全规则，将虚拟机加入安全组，从而应用特定的安全策略等。</p><h3 id="5-5-安全与高可用"><a href="#5-5-安全与高可用" class="headerlink" title="5.5 安全与高可用"></a>5.5 安全与高可用</h3><p>安全是指数据的访问安全和不丢失，高可用是指数据可以随时被访问。用户将数据和业务迁移到云上是存在一定风险的。特别在公有云环境中，保障数据安全保密及可用非常重要。在面对系统漏洞或者网络DDoS攻击时，如何做到将风险降到最低等问题都是云计算面临的关键技术。数据安全常用的隔离技术包括计算虚拟化隔离（如KVM），网络虚拟化（如VXLAN），存储虚拟化（如LUN），还包括用户权限认证和授权管理等。数据的高可用可以通过多副本实现，甚至是跨数据中心的多副本备份，服务的高可用可以借助高可用的弹性负载均衡或者纠错码分发流量，自动摘除后端故障节点来实现。</p><h2 id="6-云计算的优势"><a href="#6-云计算的优势" class="headerlink" title="6. 云计算的优势"></a>6. 云计算的优势</h2><ul><li>资源使用率的提高</li><li>提高系统安全</li><li>可以降低初期的投入</li><li>保证了服务的可靠性</li><li>可以缩短业务上线的周期<h2 id="7-云计算面临的风险和挑战"><a href="#7-云计算面临的风险和挑战" class="headerlink" title="7. 云计算面临的风险和挑战"></a>7. 云计算面临的风险和挑战</h2>主要风险是<strong>漏洞扩散</strong>，云的使用方式是将服务整合到一起，从而充分利用资源，然而鸡蛋放到一个篮子的做法，很容易引起安全漏洞的扩散，如果一个云的恶意用户通过虚拟化存在的漏洞，从而获得主机的操作权限，进一步获取整个数据中心的操作权限，那么造成的影响将远远超过传统的黑客攻击。<br>面临的挑战主要包括：<br>①定制需求，无论是公有云，还是私有云，面对的客户群体的需求差异性很大，需要很多定制任务，而且很多定制并不能作为通用特性附加到产品，这些定制耗费很多人力物力；<br>②云服务受网络的影响很大，一方面是云的接入通过互联网，这种接入方式很难保证用户的体验，毕竟需要经过运营商的中间网络，另一方面是云数据中心之间的互连，如果是同城通过专线，传输的连续性基本可以得到保证，但如果是异地，即便是通过专线也很难保障传输的连续性；<br>③政策影响，如果将数据放到云上面，很多企业可能比较担忧数据的安全，即便企业能够放开，很多政府的条例也不允许，例如AWS进入中国，阿里云进入美国，都会面临很多政策风险。<h2 id="8-AWS（Amazon-Web-Service）"><a href="#8-AWS（Amazon-Web-Service）" class="headerlink" title="8. AWS（Amazon Web Service）"></a>8. AWS（Amazon Web Service）</h2></li><li>IAM（Identity and Access Management）<br>IAM是AWS（Amazon Web Services）的权限管理服务，负责AWS的认证和授权。可以通过IAM创建和管理AWS的用户和用户组，并设置各种权限来允许或拒绝用户对AWS资源的访问，从而保证资源的隔离和安全。</li><li>EC2（Amazon Elastic Compute Cloud）<br>在AWS（Amazon Web Services）云中提供可扩展的计算服务。通俗来说，即提供虚拟机服务。</li><li>虚拟机安全服务安全组（Security Group）<br>虚拟机安全服务安全组（Security Group） 起着虚拟防火墙的作用，可以控制一个或多个实例的流量。在启动EC2实例时，将一个或多个安全组与该实例关联，并且为每个安全组添加规则，规定上行（流出）和下行（流入）的流量规则。</li><li>AMI（Amazon Machine Images）<br>AMI（Amazon Machine Images）是Amazon系统镜像服务，提供启动虚拟机所需的启动模块。  </li><li>EBS（Amazon Elastic Block Store）<br>EBS（Amazon Elastic Block Store）为EC2实例提供块存储服务，它是高可用的块存储，并且可以加载到同一个AZ的任何一个实例中，即使虚拟机销毁，这些EBS的数据仍然会被保持，特别适高I/O类型的需求，例如文件系统或数据库存储。</li><li>VPC (Virtual Private Cloud）<br>Amazon VPC（Amazon Virtual Private Cloud）是在AWS上创建隔离的私有虚拟网络。可以在VPC中启动实例。一个VPC与传统数据中心的一个网络相似，提供了动态变更和扩展的能力。在VPC中可以设定IP地址段，创建子网，并配置路由表、网关和安全设置。绑定浮动IP能够为VPC的实例提供公网服务，甚至可以将VPC连接到自己企业的数据中心，并利用AWS云扩展数据中心。弹性IP地址是专为动态云计算设计的静态IPv4地址，弹性IP地址可以快速地将地址重新映射到用户账户中的另一个实例中，从而屏蔽实例故障。</li><li>S3（Simple Storage Service）<br>是AWS的对象存储服务，保证99.999999999%的存储可靠性。S3使用HTTP的方式提供服务，计价方式通过存储用量和HTTP请求次数综合定价。S3存储分为两级：bucket（对象桶）和object（对象）。</li></ul><hr><p>参考：  </p><ol><li>云计算那些事儿：从IaaS到PaaS进阶 陈晓宇（著）  </li><li><a href="https://www.zhihu.com/question/22793847/answer/556691008" target="_blank" rel="noopener">虚拟化与云计算有什么区别？</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="云计算" scheme="https://10veU.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="读书笔记" scheme="https://10veU.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="云计算" scheme="https://10veU.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="读书笔记" scheme="https://10veU.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud之Consul 服务注册中心</title>
    <link href="https://10veU.github.io/2021/09/01/Spring-Cloud%E4%B9%8BConsul-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>https://10veU.github.io/2021/09/01/Spring-Cloud之Consul-服务注册中心/</id>
    <published>2021-09-01T19:30:44.000Z</published>
    <updated>2021-12-06T12:28:19.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Cloud之Consul-服务注册中心"><a href="#Spring-Cloud之Consul-服务注册中心" class="headerlink" title="Spring Cloud之Consul 服务注册中心"></a>Spring Cloud之Consul 服务注册中心</h1><h2 id="1-什么是Consul"><a href="#1-什么是Consul" class="headerlink" title="1.什么是Consul?"></a>1.什么是Consul?</h2><p>Consul 是 HashiCorp 公司推出的开源产品，是一种服务网格(Service Mesh)解决方案。用于实现分布式系统的服务发现、服务隔离、服务配置，这些功能中的每一个都可以根据需要单独使用，也可以同时使用所有功能以构建完整的服务网格(Service Mesh)。Consul 官网目前主要推 Consul 在服务网格(Service Mesh)中的使用。</p><p>与其它分布式服务注册与发现的方案相比，Consul 的方案更“一站式”——内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具。Consul 本身使用 go 语言开发，具有跨平台、运行高效等特点，也非常方便和 Docker 配合使用。</p><blockquote><p>Service Mesh可参考下面的文章<br><a href="https://zhuanlan.zhihu.com/p/61901608" target="_blank" rel="noopener">什么是Service Mesh？</a></p></blockquote><h2 id="2-Consul的主要特性"><a href="#2-Consul的主要特性" class="headerlink" title="2. Consul的主要特性"></a>2. Consul的主要特性</h2><p>Consul 的主要特点是：</p><ul><li><strong>服务发现</strong>：Consul 的客户端可以注册一个服务，例如 api 或 mysql，其他客户端可以使用 Consul 来发现给定服务的提供者。使用 DNS 或 HTTP，应用程序可以轻松找到它们所依赖的服务。</li><li><strong>健康检查</strong>：Consul 客户端可以提供任意数量的健康检查，或者与给定的服务相关联（“网络服务器是否返回 200 OK”），或者与本地节点（“内存利用率是否低于 90%”）相关联。操作员可以使用此信息来监控集群健康状况，并且服务发现组件可以使用它来将流量路由到不健康的主机之外。  </li><li><strong>KV 存储</strong>：应用程序可以将 Consul 的分层键/值存储用于多种目的，包括动态配置、功能标记、协调、领导选举等。简单的 HTTP API 使其易于使用。</li><li><strong>安全的服务通信</strong>：Consul 可以为服务生成和分发 TLS 证书，以建立相互的 TLS 连接。意图可用于定义允许哪些服务进行通信。可以通过实时更改意图轻松管理服务分段，而不是使用复杂的网络拓扑和静态防火墙规则。</li><li><strong>多数据中心</strong>：Consul 支持开箱即用的多个数据中心。这意味着 Consul 的用户不必担心构建额外的抽象层以扩展到多个区域。</li></ul><p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其非常适合现代、弹性的基础设施。</p><h2 id="3-Consul的基础架构"><a href="#3-Consul的基础架构" class="headerlink" title="3. Consul的基础架构"></a>3. Consul的基础架构</h2><p>Consul是一个分布式系统，设计用于在一组节点上运行。节点可以是物理服务器、云实例、虚拟机或容器。连接在一起，运行在上面的节点集称为<strong>数据中心</strong>。在数据中心中，Consul可以在两种模式下运行: <strong>服务端模式</strong>和<strong>客户端模式</strong>。服务器代理为Consul维护一致的状态。客户端是一个运行在每个服务运行节点上的轻量级进程。一个数据中心将有3-5个服务器和许多客户机。<br><img src="DataCenter.png" alt="数据中心">  </p><h3 id="从大视角分析Consul的架构"><a href="#从大视角分析Consul的架构" class="headerlink" title="从大视角分析Consul的架构"></a>从大视角分析Consul的架构</h3><p><img src="consul-arch.png" alt="consul-arch"><br>首先，图中有两个数据中心，分别为 Datacenter1 和 Datacenter2 。Consul 非常好的支持多个数据中心，每个数据中心内，有客户端和服务器端，服务器一般为 3~5 个，这样可以在稳定和性能上达到平衡，因为更多的机器会使数据同步很慢。不过客户端是没有限制的，可以有成千上万个。</p><p>　　数据中心内的所有节点都会加入到 Gossip (流言)协议。这就意味着有一个 Gossip 池，其中包含这个数据中心所有的节点。客户端不需要去配置服务器地址信息，发现服务工作会自动完成。检测故障节点的工作不是放在服务器端，而是分布式的；这使得失败检测相对于本地化的心跳机制而言，更具可拓展性。在选择 leader 这种重要的事情发生的时候，数据中心被用作消息层来做消息广播。</p><p>　　每个数据中心内的服务器都是单个 Raft 中节点集的一部分。这意味着他们一起工作，选择一个单一的领导者——一个具有额外职责的选定的服务器。leader 负责处理所有查询和事物。事物也必须作为同步协议的一部分复制到节点集中的所有节点。由于这个要求，当非 leader 服务器接收到 RPC 请求时，就会将请求其转发给集群 leader。</p><p>　　服务器端节点同时也作为 WAN Gossip 池的一部分，WAN 池和 LAN 池不同的是，它针对网络高延迟做了优化，而且只包含其他Consul 服务器的节点。这个池的目的是允许数据中心以最少的消耗方式发现对方。启动新的数据中心与加入现有的 WAN Gossip 一样简单。因为这些服务器都在这个池中运行，它还支持跨数据中心请求。当服务器收到对不同数据中心的请求时，它会将其转发到正确数据中心中的随机服务器。那个服务器可能会转发给本地的 leader。</p><p>　　这样会使数据中心的耦合非常低。但是由于故障检测，连接缓存和复用，跨数据中心请求相对快速可靠。</p><p>　　总的来说，数据不会在不同的数据中心之间做复制备份。当收到一个请求处于别的数据中心的资源时，本地的 Consul 服务器会发一个 RPC 请求到远端的 Consul 服务器，然后返回结果。如果远端数据中心处于不可用状态，那么这么资源也会不可用，但这不影响本地的数据中心。在一些特殊的情况下，有限的数据集会被跨数据中心复制备份，比如说 Consul 内置的 ACL 复制能力，或者像 consul-replicate 这样的外部工具。</p><h2 id="4-Consul的工作原理"><a href="#4-Consul的工作原理" class="headerlink" title="4. Consul的工作原理"></a>4. Consul的工作原理</h2><p><img src="consul_service.png" alt="consul_service"></p><h3 id="服务发现以及注册"><a href="#服务发现以及注册" class="headerlink" title="服务发现以及注册"></a>服务发现以及注册</h3><p>当服务 Producer 启动时，会将自己的 Ip/host 等信息通过发送请求告知 Consul，Consul 接收到 Producer 的注册信息后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康。</p><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>当 Consumer 请求 Product 时，会先从 Consul 中拿到存储 Product 服务的 IP 和 Port 的临时表(temp table)，从temp table 表中任选一个· Producer 的 IP 和 Port， 然后根据这个 IP 和 Port，发送访问请求；temp table 表只包含通过了健康检查的 Producer 信息，并且每隔 10s（默认）更新。</p><h2 id="5-Consul的安装"><a href="#5-Consul的安装" class="headerlink" title="5. Consul的安装"></a>5. Consul的安装</h2><p>Eureka 其实就是个 Servlet 程序，跑在 Servlet 容器中；Consul 则是用 go 语言编写的第三方工具需要单独安装使用。<br><a href="https://www.consul.io/downloads" target="_blank" rel="noopener">Download Consul</a></p><h3 id="Windows下单节点安装"><a href="#Windows下单节点安装" class="headerlink" title="Windows下单节点安装"></a>Windows下单节点安装</h3><p>下载一个Consul的windows安装包<br><img src="consul_package.png" alt="consul_package"><br>cd到对应的目录下，使用cmd启动Consul。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -dev表示开发模式运行，另外还有 -server 表示服务模式运行</span><br><span class="line">consul agent -dev -client=0.0.0.0</span><br></pre></td></tr></table></figure><blockquote><p>Consul在开发模式下启动本地代理，这是一种内存服务器模式，为了方便使用，启用了一些常见特性(尽管存在安全风险) ，并且关闭了所有持久性选项。这种模式不安全也不可伸缩，但是不需要额外的配置就可以轻松地实验大多数领事的功能。</p></blockquote><p>为了方便启动，也可以在 consul.exe 同级目录下创建一个脚本来启动，脚本内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev -client=0.0.0.0</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>执行脚本之后看到如下信息：<br><img src="consul_run.png" alt="consul run"><br>访问管理后台：<a href="http://localhost:8500/" target="_blank" rel="noopener">http://localhost:8500/</a> 看到下图意味着我们的 Consul 服务启动成功了。</p><h2 id="6-Consul入门案例"><a href="#6-Consul入门案例" class="headerlink" title="6. Consul入门案例"></a>6. Consul入门案例</h2><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p><a href="https://gitee.com/I10veU/springcloud-demo" target="_blank" rel="noopener">基础环境</a><br><strong>注册中心</strong><br> <code>consule.exe</code>（从Consul官网下载）<br><strong>服务提供者</strong><br><code>spring-cloud-demo-service-provider</code><br><strong>服务消费者</strong><br><code>spring-cloud-demo-service-consumer</code>  </p><h4 id="服务接入注册中心"><a href="#服务接入注册中心" class="headerlink" title="服务接入注册中心"></a>服务接入注册中心</h4><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud consul 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring boot actuator 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置 Consul 注册中心</span></span><br><span class="line"><span class="attr">  consul:</span></span><br><span class="line">    <span class="comment"># 注册中心的访问地址</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8500</span></span><br><span class="line">    <span class="comment"># 服务发现相关配置</span></span><br><span class="line"><span class="attr">    discovery:</span></span><br><span class="line"><span class="attr">      register:</span> <span class="literal">false</span>                               <span class="comment"># 是否需要注册</span></span><br><span class="line"><span class="attr">      instance-id:</span> <span class="string">$&#123;spring.application.name&#125;</span>    <span class="comment"># 注册实例 id（必须唯一）</span></span><br><span class="line"><span class="attr">      service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span>      <span class="comment"># 服务名称</span></span><br><span class="line"><span class="attr">      port:</span> <span class="string">$&#123;server.port&#125;</span>                          <span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span>                       <span class="comment"># 是否使用 ip 地址注册</span></span><br><span class="line"><span class="attr">      ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span> <span class="comment"># 服务请求 ip</span></span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>访问<a href="http://localhost:9090/order/1" target="_blank" rel="noopener">http://localhost:9090/order/1</a>结果如下：<br><img src="service_result.png" alt="service_result"></p><h2 id="7-Consul集群部署"><a href="#7-Consul集群部署" class="headerlink" title="7. Consul集群部署"></a>7. Consul集群部署</h2><p><a href="https://learn.hashicorp.com/tutorials/consul/deployment-guide?in=consul/production-deploy" target="_blank" rel="noopener">Deployment Guide</a></p><hr><p>参考资料：<br><a href="https://www.consul.io/" target="_blank" rel="noopener">Consul官网</a><br><a href="https://blog.csdn.net/qwe86314/article/details/95094751" target="_blank" rel="noopener">Consul注册中心介绍</a><br><a href="https://zhuanlan.zhihu.com/p/61901608" target="_blank" rel="noopener">什么是Service Mesh</a><br><a href="https://www.servicemesher.com/" target="_blank" rel="noopener">Service Mesh中文社区</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="https://10veU.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/tags/Spring-Cloud/"/>
    
      <category term="注册中心" scheme="https://10veU.github.io/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建免费个人博客</title>
    <link href="https://10veU.github.io/2019/10/09/Hexo-GitHub%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://10veU.github.io/2019/10/09/Hexo-GitHub搭建免费个人博客/</id>
    <published>2019-10-09T16:42:07.000Z</published>
    <updated>2021-12-06T12:28:18.961Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head><meta name="generator" content="Hexo 3.9.0">     <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script>     <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script> </head> <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.11.2/css/all.css">  <h1 id="Hexo-GitHub免费搭建个人博客"><a href="#Hexo-GitHub免费搭建个人博客" class="headerlink" title="Hexo+GitHub免费搭建个人博客"></a>Hexo+GitHub免费搭建个人博客</h1><blockquote><p>作者：大大蜡笔小小新    </p></blockquote><h2 id="1-Hexo框架的介绍"><a href="#1-Hexo框架的介绍" class="headerlink" title="1.  Hexo框架的介绍"></a>1. <i class="fas fa-blog"></i> Hexo框架的介绍</h2><p><code>Hexo</code>的官方介绍：<code>A fast,simple&amp;powerful blog framework</code>。  </p><p><code>Hexo</code>框架具有以下特点：  </p><ul><li>快速搭建</li><li>支持<code>Markdown</code>语法  </li><li>支持一键部署  </li><li>丰富的主题和插件  </li></ul><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.  环境准备"></a>2. <i class="fas fa-home"></i> 环境准备</h2><h3 id="2-1申请一个GitHub账户"><a href="#2-1申请一个GitHub账户" class="headerlink" title="2.1申请一个GitHub账户"></a>2.1申请一个<code>GitHub</code>账户</h3><p>  <a href="https://github.com/" target="_blank" rel="noopener"><code>GitHub</code>账户申请</a></p><p>  <a href="https://help.github.com/cn" target="_blank" rel="noopener"><code>GitHub</code>疑问解答</a></p><h3 id="2-2搭建Hexo需要的环境"><a href="#2-2搭建Hexo需要的环境" class="headerlink" title="2.2搭建Hexo需要的环境"></a>2.2搭建<code>Hexo</code>需要的环境</h3><p>  如何安装<code>Hexo</code>及安装<code>Hexo</code>需要的环境，可以参考<code>Hexo</code>官方文档  </p><p>  <a href="https://hexo.io/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a>  </p><h3 id="2-3环境验证"><a href="#2-3环境验证" class="headerlink" title="2.3环境验证"></a>2.3环境验证</h3><p><code>Node.js</code>和<code>Git</code>安装是否成功?  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 <span class="number">10</span>.<span class="number">0</span>.<span class="number">17134</span>.<span class="number">590</span>]  </span><br><span class="line">(c) <span class="number">2018</span> Microsoft Corporation。保留所有权利。    </span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">lenovopc</span>&gt;<span class="title">node</span> -<span class="title">v</span>  </span></span><br><span class="line"><span class="function"><span class="title">v8</span>.11.2    </span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">lenovopc</span>&gt;<span class="title">npm</span> -<span class="title">v</span>  </span></span><br><span class="line"><span class="function">5.6.0</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">E</span>:\<span class="title">Git</span>&gt;<span class="title">git</span> --<span class="title">version</span>  </span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">version</span> 2.16.2.<span class="title">windows</span>.1  </span></span><br><span class="line"><span class="function"><span class="title">E</span>:\<span class="title">Git</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Node.js</code>和<code>npm</code>的关系  </p><blockquote><p><i class="fas fa-quote-left fa-3x fa-pull-left"></i><code>Node.js</code>是<code>javascript</code>的一种运行环境，是对<code>Google V8</code>引擎进行的封装。是一个服务器端的<code>javascript</code>的解释器。<br> 包含关系:<code>Node.js</code>中含有<code>npm</code>，比如说你安装好<code>Node.js</code>，你打开<code>cmd</code>输入<code>npm -v</code>会发现npm的版本号，说明<code>npm</code>已经安装好。<br>引用大神的总结:<br>其实<code>npm</code>是<code>Node.js</code>的包管理器（<code>package manager</code>）。我们在<code>Node.js</code>上开发时，会用到很多别人已经写好的<code>javascript</code>代码，<br>如果每当我们需要别人的代码时，都根据名字搜索一下，下载源码，解压，再使用，会非常麻烦。于是就出现了包管理器<code>npm</code>。<br>大家把自己写好的源码上传到<code>npm</code>官网上，如果要用某个或某些个，直接通过<code>npm</code>安装就可以了，不用管那个源码在哪里。<br>并且如果我们要使用模块<code>A</code>，而模块<code>A</code>又依赖模块<code>B</code>，模块<code>B</code>又依赖模块<code>C</code>和<code>D</code>，此时<code>npm</code>会根据依赖关系， 把所有依赖的包都下载下来并且管理起来。试想如果这些工作全靠我们自己去完成会多么麻烦！其实就是类似于<code>Java</code>中的<code>Maven</code>。  </p></blockquote><h2 id="3-下载及安装Hexo"><a href="#3-下载及安装Hexo" class="headerlink" title="3.  下载及安装Hexo"></a>3. <i class="fas fa-cloud-download-alt"></i> 下载及安装Hexo</h2><h3 id="3-1下载及安装Hexo"><a href="#3-1下载及安装Hexo" class="headerlink" title="3.1下载及安装Hexo"></a>3.1下载及安装<code>Hexo</code></h3><p>  在<code>cmd</code>终端窗口执行下载安装命令  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>  安装完成如下图：  </p><p>  <img src="%E5%AE%89%E8%A3%85Hexo.png" alt="安装Hexo"></p><p>  执行命令判断<code>Hexo</code>安装是否成功</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>  安装成功如下：  </p><p>  <img src="%E5%AE%89%E8%A3%85Hexo%E6%88%90%E5%8A%9F.png" alt="安装Hexo成功"></p><h3 id="3-2初始化博客"><a href="#3-2初始化博客" class="headerlink" title="3.2初始化博客"></a>3.2初始化博客</h3><blockquote><p>以下操作尽可能都在<code>Git</code>终端操作</p></blockquote><p>  首先在自己本地磁盘创建一个安装目录，这里以<code>Hexo</code>为例；</p><p>  <img src="Hexo%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.png" alt="Hexo安装目录"></p><p>  切换到此文件夹目录下执行初始化命令  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>  <img src="Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%AD.png" alt="Hexo初始化中"></p><p>  如果你未自己手动创建文件夹，也可通过以下的命令去初始化<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="comment">// 进入博客文件夹，&lt;folder&gt;为文件夹的名称</span></span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line"><span class="comment">// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>  初始化完成  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">// 生成网页。</span></span><br><span class="line">hexo s <span class="comment">// 将生成的网页放在了本地服务器。</span></span><br></pre></td></tr></table></figure><p>  <img src="%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%8C%E6%88%90.png" alt="初始化完成"></p><p>  通过提示的信息，访问本地服务器  </p><p>  <img src="%E5%8D%9A%E5%AE%A2.png" alt="博客"></p><h2 id="4-配置博客"><a href="#4-配置博客" class="headerlink" title="4.  配置博客"></a>4. <i class="fas fa-cog fa-spin"></i> 配置博客</h2><p>当然，目前的博客界面不是很美观，如果想做的比较有点逼格，当然还是得个性化定制下，我们可以去<code>Hexo</code>官网下载自己喜欢的主题。  </p><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官方主题</a></p><p>选择你喜欢的主题，复制它的链接，<code>clone</code>到本地博客的<code>themes</code>目录下  </p><p><img src="%E5%85%8B%E9%9A%86%E4%B8%BB%E9%A2%98%E4%B8%AD.png" alt="克隆主题中"></p><p><img src="%E4%B8%BB%E9%A2%98%E5%85%8B%E9%9A%86%E5%AE%8C%E6%88%90.png" alt="主题克隆完成"></p><p><img src="%E5%85%8B%E9%9A%86%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%B8%BB%E9%A2%98.png" alt="克隆到本地的主题"></p><p>配置博客我们首先就得了解博客文件结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|node_modules:node.js的相关组件</span><br><span class="line">|scaddolds: 定义的一些东西，固定的</span><br><span class="line">|soorce: Markdown博客文档</span><br><span class="line">|themes: 一些主题</span><br><span class="line">|主题名-|</span><br><span class="line">       |主题内容（包含README.md,config.yml）</span><br><span class="line">|config: 配置文件（博客全局配置）</span><br><span class="line">|db.json: 生成的一些东西</span><br><span class="line">|package.json:  当前npm的相关的包</span><br><span class="line">|package-lock.json: npm管理的一些东西</span><br></pre></td></tr></table></figure><p>按照主题的<code>README.md</code>文档进行配置。<br>例如我使用的博客主题是<a href="https://github.com/Sariay/hexo-theme-Annie" target="_blank" rel="noopener">Annie</a>  </p><h2 id="5-博客个性化设置"><a href="#5-博客个性化设置" class="headerlink" title="5.  博客个性化设置"></a>5. <i class="fas fa-user-cog"></i> 博客个性化设置</h2><p>我们按照自己选择的<code>Hexo</code>主题进行配置后，如果想根据自己的喜好做相应的修改当然也是可以的。比如可以给博客添加图片、视频、音乐播放器等等。  </p><h3 id="5-1博客中添加图片1"><a href="#5-1博客中添加图片1" class="headerlink" title="5.1博客中添加图片1"></a>5.1博客中添加图片<a href="https://vwin.github.io/2018/08/07/Hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">1</a></h3><p>博客中的图片添加有以下几种方式：</p><h4 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h4><ul><li>绝对路径<br>直接在主题下的<code>img</code>（存储图片文件夹，不同的主题存储图片的名称可能不同）文件夹下(themes/所选主题文件夹/source/img),<code>/img/图片名称.jpg</code>这张图片，就可以使用以下方式访问： <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](/img/图片名称.jpg)</span><br></pre></td></tr></table></figure></li></ul><p>eg:<br><img src="/img/wechat.jpg" alt="wechat">   </p><ul><li>相对路径<br>图片除了可以放在统一的<code>img</code>文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置博客根目录下的<code>_config.yml</code>来生成。  </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将_config.yml文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>文件夹中，文章就可以使用相对路径引用图片资源了。<code>_posts/post_name/图片名称.jpg</code>这张图片可以用以下方式访问：  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](图片名称.jpg)</span><br></pre></td></tr></table></figure><p>eg:<br><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="微信公众号">  </p><h4 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h4><p>除了在本地存储图片，还可以将图片上传到一些免费的 <code>CDN</code>服务中。因国内访问<code>GitHub</code>速度较慢，所以将突破放到国内图床上，然后引用外链接是常用的方法。<br>常用图床总结：<a href="https://sspai.com/post/40499" target="_blank" rel="noopener">https://sspai.com/post/40499</a><br>常用的图床有：七牛云、腾讯云、微博图床等。  </p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>使用<code>github</code>存储博客图片</p><ol><li>创建一个空的仓库  </li><li>将图片<code>push</code>到仓库中</li><li>点击图片进去，有个<code>download</code>，右键复制链接</li><li>将链接插入文章<br>引用格式：  </li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![logo](https://github.com/xxxx/xx.jpg)</span><br><span class="line">```  </span><br><span class="line">#### 使用插件  </span><br><span class="line"> <span class="number">1</span>. 首先把`blog（hexo）`目录下的`_config.yml`里的`psot_asset_folder:`设置为`true`</span><br><span class="line"> <span class="number">2</span>. 在`blog（hexo）`目录下执行:  </span><br><span class="line">```<span class="built_in">cmd</span>  </span><br><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>blog（hexo）</code>目录下<code>Git Bash Here</code>，运行<code>hexo n &quot;博客文章名&quot;</code>来生成<code>md</code>博客时，会在<code>_post</code>目录下看到一个与博客同名的文件夹。  </li><li>将想要上传的图片先扔到文件夹下，然后在博客中使用<code>markdown</code>的格式引入图片：  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![你想要输入的替代文字](xxxx/图片名.jpg)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p></blockquote><h3 id="5-2博客中添加视频2"><a href="#5-2博客中添加视频2" class="headerlink" title="5.2博客中添加视频2"></a>5.2博客中添加视频<a href="https://baijiahao.baidu.com/s?id=1623914788952059989&wfr=spider&for=pc" target="_blank" rel="noopener">2</a></h3><blockquote><p>以<code>bilibili</code>为例，B站无广告   </p></blockquote><ul><li>去B站获取视频外链<br><img src="%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E5%A4%96%E9%93%BE.png" alt="获取视频外链">  </li><li>在文章中插入视频外链<br>我们知道在<code>md</code>中可以直接插入<code>html</code>代码。这里我们就插入视频外链。代码如下：  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=68662896&amp;cid=118997493&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到效果令人很不满意。  </p><ul><li>修改代码，美化播放器样式。<br>代码如下：  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative; width: 100%; height: 0;padding-bottom: 75%;"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=68662896&amp;cid=118997493&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"position: absolute; width: 100%; height: 100%; left: 0; top: 0;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3博客中添加网易云音乐歌单"><a href="#5-3博客中添加网易云音乐歌单" class="headerlink" title="5.3博客中添加网易云音乐歌单"></a>5.3博客中添加网易云音乐歌单</h3><ul><li>（以 Chrome 为例，其他浏览器类似）打开歌单页面，在“生成外链播放器”上右击，点击检查（审查元素 <code>ctrl+shift+i</code>）；<br><img src="%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE.png" alt="网易云音乐外链"></li><li>接着找到生成外链播放器这段文字直接双击复制前面的<code>/outchain/0/170792779/</code><br><img src="%E5%A4%96%E9%93%BEid.png" alt="外链id">  </li><li>然后修改歌单链接示例：<a href="http://music.163.com/#/outchain/0/170792779/（可以修改自己喜欢的播放器尺寸，播放模式后再复制代码）" target="_blank" rel="noopener">http://music.163.com/#/outchain/0/170792779/（可以修改自己喜欢的播放器尺寸，播放模式后再复制代码）</a><br><img src="%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95.png" alt="网易云音乐歌单">    </li></ul><blockquote><p>由于版权限制，好多歌曲可能在播放器中无法播放，毕竟没有收费，将就用吧！😂</p></blockquote><h3 id="5-4博客中实现在线联系功能"><a href="#5-4博客中实现在线联系功能" class="headerlink" title="5.4博客中实现在线联系功能"></a>5.4博客中实现在线联系功能</h3><p>在线联系功能可以使访客及时，快捷的与博主交流，也能帮助博主及时的解决访客提出的博文中的问题。<code>Hexo</code>实现在线联系功能主要有以下两种方式:  </p><h4 id="DaoVoice实现在线联系"><a href="#DaoVoice实现在线联系" class="headerlink" title="DaoVoice实现在线联系"></a>DaoVoice实现在线联系</h4><ul><li><p>注册登录<code>DaoVoice</code><br><a href="http://dashboard.daovoice.io/get-started?invite_code=75159429" target="_blank" rel="noopener">注册登录DaoVoice</a>  </p></li><li><p><code>DaoVoice</code>接入<br><a href="http://guide.daocloud.io/daovoice/daovoice-9151028.html" target="_blank" rel="noopener"><code>DaoVoice</code>接入</a>  </p></li><li><p><code>Daovoice</code>绑定微信（可选）<br><code>DaoVoice</code>虽然可以很好的与访客交流，但是还是不能像微信聊天一样方便，所以我们绑定微信，瞬间秒回访客消息，不再等待！<br><img src="DaoVoice%E7%BB%91%E5%AE%9A%E5%BE%AE%E4%BF%A1.png" alt="DaoVoice绑定微信"></p><h4 id="HEXO的博客添加gitter在线交流"><a href="#HEXO的博客添加gitter在线交流" class="headerlink" title="HEXO的博客添加gitter在线交流"></a>HEXO的博客添加gitter在线交流</h4><p><a href="https://blog.csdn.net/u011606307/article/details/89504541" target="_blank" rel="noopener">给基于HEXO的博客添加gitter在线交流</a></p><h2 id="6-持续集成Hexo博客"><a href="#6-持续集成Hexo博客" class="headerlink" title="6.  持续集成Hexo博客"></a>6. <i class="fab fa-dev"></i> 持续集成Hexo博客</h2><h4 id="6-1使用Jenkins持续集成Hexo博客3"><a href="#6-1使用Jenkins持续集成Hexo博客3" class="headerlink" title="6.1使用Jenkins持续集成Hexo博客3"></a>6.1使用Jenkins持续集成Hexo博客<a href="https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/" target="_blank" rel="noopener">3</a></h4><p><a href="http://www.sevenyuan.cn/2019/03/18/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90Hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">使用Jenkins持续集成Hexo博客</a>  </p><h4 id="6-2用TravisCI持续集成Hexo博客"><a href="#6-2用TravisCI持续集成Hexo博客" class="headerlink" title="6.2用TravisCI持续集成Hexo博客"></a>6.2用TravisCI持续集成Hexo博客</h4><p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI个人免费站点</a><br><a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI企业收费站点</a>  </p><h5 id="6-2-1核心概念"><a href="#6-2-1核心概念" class="headerlink" title="6.2.1核心概念"></a>6.2.1核心概念</h5></li><li><p>什么是持续集成（CI）？<a href="https://docs.travis-ci.com/user/for-beginners/#breaking-the-build" target="_blank" rel="noopener">4</a><br>CI(<code>Continuous Integration</code>)翻译为持续集成。<br>持续集成是经常合并小的代码更改的实践，而不是在开发周期结束时合并大的更改。目的是通过以较小的增量开发和测试来构建更健康的软件。这就是<code>Travis CI</code>出现的地方。<br>作为一个持续集成平台，<code>Travis CI</code>通过自动构建和测试代码更改来支持您的开发过程，并提供有关更改成功的即时反馈。<code>Travis CI</code>还可以通过管理部署和通知来自动化开发过程的其他部分。  </p><h5 id="6-2-2准备条件"><a href="#6-2-2准备条件" class="headerlink" title="6.2.2准备条件"></a>6.2.2准备条件</h5><p>要开始使用Travis CI，请确保您具有：</p></li><li><p>一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>的帐户。  </p></li><li><p><a href="https://help.github.com/en/github/importing-your-projects-to-github" target="_blank" rel="noopener">托管在GitHub上的项目</a>的所有者权限。  </p><ul><li>博客源码仓库  </li><li>博客部署仓库  <h5 id="6-2-3-关联仓库"><a href="#6-2-3-关联仓库" class="headerlink" title="6.2.3 关联仓库"></a>6.2.3 关联仓库</h5>使用GitHub登录到<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI个人免费站点</a><br><img src="travis_login.png" alt="travis login"><br>关联到持续集成的仓库<br><img src="repo.png" alt="持续集成的仓库">  </li></ul></li></ul><p><strong>配置 Access Token</strong><br>如下图，Environment Variables 区域就是用来添加权限信息的。我们需要填写一个Token的名称和值，该名称可以在配置文件中以 ${变量名} 来引用，该Token我们需要从Github中获取。<br><img src="travis_setting.png" alt><br><strong>从Github获取Access Token</strong><br>在Github的setting页面，左侧面板选择Developer settings然后Personal access tokens, 右上角点击Generate new token。生成token时候需要确定访问scope，这里我们选择我们的repo即可。<br><img src="travis_token.png" alt><br>重要：生成的token只有第一次可见，一定要保存下来备用。<br><img src="token.png" alt="token"><br><strong>在Travis CI中配置</strong><br>将上面获取到的token添加到 Environment Variables 部分，值为该 token ,而名称即为上面设置的 Travis_Token (请更改为个人所设置名称)。不勾选后面的 Display value in build log . 否则会在日志文件中暴露你的 token 信息，而日志文件是公开可见的。</p><p>至此我们已经配置好了要构建的仓库和访问的token，接下来就是如何构建的问题了。<br><strong>配置.travis.yml（如果没有，新建)</strong><br>我个人的.travis.yml 可供参考</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定构建环境是Node.js，当前版本是稳定版</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr"> global:</span></span><br><span class="line"><span class="attr">   - URL_REPO:</span> <span class="string">github.com/10veU/10veU.github.io.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置钩子只检测blog-source分支的push变动</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置缓存文件</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在构建之前安装hexo环境</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装git插件和搜索功能插件</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清缓存，生成网页操作</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  github_token:</span> <span class="string">$GH_TOKEN</span>  <span class="comment"># Set in the settings page of your repository, as a secure variable</span></span><br><span class="line"><span class="attr">  keep_history:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  local-dir:</span> <span class="string">public</span></span><br><span class="line"><span class="comment"># configure notifications (email, IRC, campfire etc)</span></span><br><span class="line"><span class="comment"># please update this section to your needs!</span></span><br><span class="line"><span class="comment"># https://docs.travis-ci.com/user/notifications/</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">514084647</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">  on_success:</span> <span class="string">change</span></span><br><span class="line"><span class="attr">  on_failure:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>注意：需要将配置文件中的 GH_TOKEN 换成我们自己设定的名称，这里我的配置应该是 Travis_token 即 - git push –force –quiet “https://${Travis_token}@${GH_REF}” master:master # GH_TOKEN是在Travis中配置token的名称。 还要更改 GH_REF 中我们的博客仓库的地址。<br><img src="travis_success.png" alt="travis_success"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo博客" scheme="https://10veU.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="GitHub" scheme="https://10veU.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://10veU.github.io/tags/Hexo/"/>
    
      <category term="博客" scheme="https://10veU.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
