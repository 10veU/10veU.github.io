<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Wang-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://10veU.github.io/"/>
  <updated>2022-06-17T05:59:24.250Z</updated>
  <id>https://10veU.github.io/</id>
  
  <author>
    <name>XiaoJie Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发编程（三） 共享模型之内存</title>
    <link href="https://10veU.github.io/2022/06/17/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89-%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%86%85%E5%AD%98/"/>
    <id>https://10veU.github.io/2022/06/17/Java并发编程（三）-共享模型之内存/</id>
    <published>2022-06-17T11:44:19.000Z</published>
    <updated>2022-06-17T05:59:24.250Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java并发编程（三）-共享模型之内存"><a href="#Java并发编程（三）-共享模型之内存" class="headerlink" title="Java并发编程（三） 共享模型之内存"></a>Java并发编程（三） 共享模型之内存</h1><h2 id="1-Java-内存模型"><a href="#1-Java-内存模型" class="headerlink" title="1. Java 内存模型"></a>1. Java 内存模型</h2><p>在Java SE 5 (<code>JSR133</code>)中定义的JMM（<code>Java Memory Model</code>）是为了确保当编写并发代码的时候能够提供Java定义和语义，使多线程程序不仅正确，而且性能高，对现有代码库的影响最小。</p><p>JMM 即 Java Memory Model，它定义了主内存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。 </p><p>JMM 体现在以下几个方面 </p><ul><li><strong>原子性</strong> - 保证指令不会受到线程上下文切换的影响 </li><li><strong>可见性</strong> - 保证指令不会受 cpu 缓存的影响 </li><li><strong>有序性</strong> - 保证指令不会受 cpu 指令并行优化的影响。</li></ul><p>JMM规定了：</p><ol><li>所有变量都存储在主内存中。</li><li>每个线程有自己的工作内存（保存了使用的变量的主内存的副本），所有操作都必须在工作内存中进行。</li><li>那么不同的线程之间如果需要共享变量的值，就都需要通过主内存来完成。</li></ol><p><img src="jmm.png" alt></p><h2 id="2-可见性"><a href="#2-可见性" class="headerlink" title="2. 可见性"></a>2. 可见性</h2><h3 id="退不出的循环"><a href="#退不出的循环" class="headerlink" title="退不出的循环"></a>退不出的循环</h3><blockquote><p>代码示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.LoopTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> run = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (run)&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        log.debug(<span class="string">"停止t1线程..."</span>);</span><br><span class="line">        run = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析  为什么main线程将run设置为false，但是t线程依旧不会停止?</p></blockquote><ul><li>初始状态， t 线程刚开始从主内存读取了 run 的值到工作内存。</li><li>因为 t 线程要频繁从主内存中读取 <code>run</code> 的值，<code>JIT</code> 编译器会将 run 的值缓存至自己工作内存中的高速缓存中， 减少对主存中 <code>run</code> 的访问，提高效率。</li><li>1 秒之后，<code>main</code> 线程修改了 <code>run</code> 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量 的值，结果永远是旧值</li></ul><blockquote><p>解决方案</p></blockquote><ul><li>使用<code>volatile</code>关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.LoopSolutionVolatile"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopSolutionVolatile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> run = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (run)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">"停止t1线程..."</span>);</span><br><span class="line">        run = <span class="keyword">false</span>; <span class="comment">// t1线程不会停止</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>synchronized</code>关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.LoopSolutionsynchronized"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopSolutionsynchronized</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> run = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!run)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"停止t1线程..."</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            run = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可见性-vs-原子性"><a href="#可见性-vs-原子性" class="headerlink" title="可见性 vs 原子性"></a>可见性 vs 原子性</h3><p>前面例子体现的实际就是可见性，它保证的是在多个线程之间，一个线程对 volatile 变量的修改对另一个线程可见， 不能保证原子性，仅用在一个写线程，多个读线程的情况： 上例从字节码理解是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getstatic run // 线程 t 获取 run true </span><br><span class="line">getstatic run // 线程 t 获取 run true </span><br><span class="line">getstatic run // 线程 t 获取 run true </span><br><span class="line">getstatic run // 线程 t 获取 run true </span><br><span class="line">putstatic run // 线程 main 修改 run 为 false， 仅此一次</span><br><span class="line">getstatic run // 线程 t 获取 run false</span><br></pre></td></tr></table></figure><p>比较一下之前我们将线程安全时举的例子：两个线程一个 i++ 一个 i– ，只能保证看到最新值，不能解决指令交错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 假设i的初始值为0 </span><br><span class="line">getstatic i // 线程2-获取静态变量i的值 线程内i=0 </span><br><span class="line">getstatic i // 线程1-获取静态变量i的值 线程内i=0 </span><br><span class="line">iconst_1 // 线程1-准备常量1 </span><br><span class="line">iadd // 线程1-自增 线程内i=1 </span><br><span class="line">putstatic i // 线程1-将修改后的值存入静态变量i 静态变量i=1 </span><br><span class="line">iconst_1 // 线程2-准备常量1 </span><br><span class="line">isub // 线程2-自减 线程内i=-1 </span><br><span class="line">putstatic i // 线程2-将修改后的值存入静态变量i 静态变量i=-1</span><br></pre></td></tr></table></figure><p>❗<strong>注意</strong> <code>synchronized</code> 语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。但缺点是 <code>synchronized</code> 是属于重量级操作，性能相对更低 。</p><p>❓ 如果在前面示例的死循环中加入 <code>System.out.println(&quot;running...&quot;);</code>会发现即使不加 volatile 修饰符，线程 t 也能正确看到 对 run 变量的修改了，想一想为什么？</p><blockquote><p>看了其源码就会发现，其方法加了<code>synchronized</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">&gt;             print(x);</span><br><span class="line">&gt;             newLine();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="同步模式-之-两阶段终止模式"><a href="#同步模式-之-两阶段终止模式" class="headerlink" title="同步模式 之 两阶段终止模式"></a>同步模式 之 两阶段终止模式</h3><h4 id="利用-isInterrupted"><a href="#利用-isInterrupted" class="headerlink" title="利用 isInterrupted"></a>利用 isInterrupted</h4><blockquote><p>代码示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.termination;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止模式 之 两阶段终止模式-利用 isInterrupted</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTerminationTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTerminationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TwoPhaseTermination twoPhaseTermination = <span class="keyword">new</span> TwoPhaseTermination();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        twoPhaseTermination.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监控线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTermination"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTermination</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">              Thread currentThread = Thread.currentThread();</span><br><span class="line">              <span class="keyword">if</span> (currentThread.isInterrupted())&#123;</span><br><span class="line">                  log.debug(<span class="string">"料理后事..."</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 阻塞中被打断</span></span><br><span class="line">                  log.debug(<span class="string">"执行监控记录..."</span>);        <span class="comment">// 正常情况被打断</span></span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">                  <span class="comment">// sleep中的线程被打断会将打断标记清除，所以需要重新设置</span></span><br><span class="line">                  currentThread.interrupt();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="string">"monitor"</span>);</span><br><span class="line">        monitor.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">14:41:40 [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line">14:41:41 [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line">14:41:42 [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)</span><br><span class="line">at com.java.demo.pattern.termination.TwoPhaseTermination.lambda$start$0(TwoPhaseTerminationTest.java:40)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">14:41:43 [monitor] c.TwoPhaseTermination - 料理后事...</span><br></pre></td></tr></table></figure><h4 id="利用停止标记"><a href="#利用停止标记" class="headerlink" title="利用停止标记"></a>利用停止标记</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.termination;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止模式 之 两阶段终止模式-利用 volatile</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTerminationVolatileTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTerminationVolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TwoPhaseTerminationVolatile twoPhaseTerminationVolatile = <span class="keyword">new</span> TwoPhaseTerminationVolatile();</span><br><span class="line">        twoPhaseTerminationVolatile.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        log.debug(<span class="string">"停止监控"</span>);</span><br><span class="line">        twoPhaseTerminationVolatile.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTerminationVolatile"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTerminationVolatile</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (stop)&#123;</span><br><span class="line">                    log.debug(<span class="string">"料理后事..."</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 阻塞中被打断</span></span><br><span class="line">                    log.debug(<span class="string">"执行监控记录..."</span>);        <span class="comment">// 正常情况被打断</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"monitor"</span>);</span><br><span class="line">        monitor.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stop = <span class="keyword">true</span>;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">16:45:14 [monitor] c.TwoPhaseTerminationVolatile - 执行监控记录...</span><br><span class="line">16:45:15 [monitor] c.TwoPhaseTerminationVolatile - 执行监控记录...</span><br><span class="line">16:45:16 [monitor] c.TwoPhaseTerminationVolatile - 执行监控记录...</span><br><span class="line">16:45:17 [main] c.TwoPhaseTerminationVolatileTest - 停止监控</span><br><span class="line">16:45:17 [monitor] c.TwoPhaseTerminationVolatile - 料理后事...</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)</span><br><span class="line">at com.java.demo.pattern.termination.TwoPhaseTerminationVolatile.lambda$start$0(TwoPhaseTerminationVolatileTest.java:38)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><h3 id="同步模式-之-Balking"><a href="#同步模式-之-Balking" class="headerlink" title="同步模式 之 Balking"></a>同步模式 之 Balking</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>Balking （犹豫）模式用在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做 了，直接结束返回。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous.balking;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BalkingTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BalkingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TwoPhaseTermination twoPhaseTermination = <span class="keyword">new</span> TwoPhaseTermination();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监控线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTermination"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTermination</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> startFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(startFlag)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            startFlag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        monitor = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Thread currentThread = Thread.currentThread();</span><br><span class="line">                <span class="keyword">if</span> (currentThread.isInterrupted())&#123;</span><br><span class="line">                    log.debug(<span class="string">"料理后事..."</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 阻塞中被打断</span></span><br><span class="line">                    log.debug(<span class="string">"执行监控记录..."</span>);        <span class="comment">// 正常情况被打断</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">// sleep中的线程被打断会将打断标记设置为false，所以需要重新设置</span></span><br><span class="line">                    log.debug(<span class="string">"isInterrupted = &#123;&#125;"</span>,currentThread.isInterrupted());</span><br><span class="line">                    currentThread.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"monitor"</span>);</span><br><span class="line">        monitor.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>懒汉式单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous.balking;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式单例 - Balking模式的应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-有序性"><a href="#3-有序性" class="headerlink" title="3. 有序性"></a>3. 有序性</h2><p>JVM 会在不影响正确性的前提下，可以调整语句的执行顺序，如下所示代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> j;</span><br><span class="line"><span class="comment">// 在某个线程内执行如下赋值操作</span></span><br><span class="line">i = ...; </span><br><span class="line">j = ...;</span><br></pre></td></tr></table></figure><p>可以看到，至于是先执行 i 还是 先执行 j ，对最终的结果不会产生影响。所以，上面代码真正执行时，既可以是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = ...; </span><br><span class="line">j = ...;</span><br></pre></td></tr></table></figure><p>也可以是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">j = ...;</span><br><span class="line">i = ...;</span><br></pre></td></tr></table></figure><p>这种特性称之为<strong>『指令重排』</strong>，多线程下<strong>『指令重排』</strong>会影响正确性。为什么要有重排指令这项优化呢？从 CPU 执行指令的原理来理解一下吧！</p><h4 id="原理之-指令级并行"><a href="#原理之-指令级并行" class="headerlink" title="原理之 指令级并行"></a>原理之 指令级并行</h4><h5 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h5><h6 id="主频（CPU-Clock-Speed）"><a href="#主频（CPU-Clock-Speed）" class="headerlink" title="主频（CPU Clock Speed）"></a>主频（<code>CPU Clock Speed</code>）</h6><p>主频即CPU的时钟频率，计算机的操作在时钟信号的控制下分步执行，每个时钟信号周期完成一步操作，时钟频率的高低在很大程度上反映了CPU速度的快慢。</p><h6 id="时钟周期（Clock-Cycle-Time）"><a href="#时钟周期（Clock-Cycle-Time）" class="headerlink" title="时钟周期（Clock Cycle Time）"></a>时钟周期（<code>Clock Cycle Time</code>）</h6><p>CPU 的 <code>Clock Cycle Time</code>（时钟周期时间），等于<strong>主频的倒数</strong>，意思是 CPU 能 够识别的最小时间单位，比如说 4G 主频的 CPU 的 Clock Cycle Time 就是 0.25 ns，作为对比，我们墙上挂钟的 Cycle Time 是 1s 例如，运行一条加法指令一般需要一个时钟周期时间</p><h6 id="平均执行周期数（CPI-Cycles-Per-Instruction）"><a href="#平均执行周期数（CPI-Cycles-Per-Instruction）" class="headerlink" title="平均执行周期数（CPI,Cycles Per Instruction）"></a>平均执行周期数（<code>CPI</code>,<code>Cycles Per Instruction</code>）</h6><p>表示每条计算机指令执行所需的时钟周期，有时简称为指令的平均周期数。可以用来衡量计算机运行速度。</p><h6 id="IPC（Instruction-Per-Clock-Cycle）"><a href="#IPC（Instruction-Per-Clock-Cycle）" class="headerlink" title="IPC（Instruction Per Clock Cycle）"></a>IPC（Instruction Per Clock Cycle）</h6><p>即 CPI 的倒数，表示每个时钟周期能够运行的指令数。</p><h6 id="CPU执行时间"><a href="#CPU执行时间" class="headerlink" title="CPU执行时间"></a>CPU执行时间</h6><p>程序的 CPU 执行时间，可以用下面的公式来表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">程序 CPU 执行时间 = 指令数 * CPI * Clock Cycle Time</span><br></pre></td></tr></table></figure><h5 id="鱼罐头的故事"><a href="#鱼罐头的故事" class="headerlink" title="鱼罐头的故事"></a>鱼罐头的故事</h5><p>加工一条鱼需要 50 分钟，只能一条鱼、一条鱼顺序加工…</p><p><img src="%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%8E%9F%E7%90%86-1.png" alt></p><p>可以将每个鱼罐头的加工流程细分为 5 个步骤： </p><ul><li>去鳞清洗 10分钟 </li><li>蒸煮沥水 10分钟 </li><li>加注汤料 10分钟 </li><li>杀菌出锅 10分钟 </li><li>真空封罐 10分钟</li></ul><p><img src="%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%8E%9F%E7%90%86-2.png" alt></p><p>即使只有一个工人，最理想的情况是：他能够在 10 分钟内同时做好这 5 件事，因为对第一条鱼的真空装罐，不会 影响对第二条鱼的杀菌出锅..</p><h5 id="指令重排序优化"><a href="#指令重排序优化" class="headerlink" title="指令重排序优化"></a>指令重排序优化</h5><p>事实上，现代处理器会设计为一个时钟周期完成一条执行时间最长的 CPU 指令。为什么这么做呢？可以想到指令 还可以再划分成一个个更小的阶段，例如，每条指令都可以分为： <code>取指令 - 指令译码 - 执行指令 - 内存访问 - 数据 写回</code> 这 5 个阶段</p><p><img src="%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%8E%9F%E7%90%86-3.png" alt></p><blockquote><p>术语参考： </p><ul><li>instruction fetch (IF) </li><li>instruction decode (ID) </li><li>execute (EX) </li><li>memory access (MEM) </li><li>register write back (WB)</li></ul></blockquote><p>在不改变程序结果的前提下，这些指令的各个阶段可以通过重排序和组合来实现指令级并行，这一技术在 80’s 中 叶到 90’s 中叶占据了计算架构的重要地位。</p><blockquote><p>提示</p><p>分阶段，分工是提升效率的关键！</p></blockquote><p>指令重排的前提是，重排指令不能影响结果，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以重排的例子</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">// 指令1</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>; <span class="comment">// 指令2</span></span><br><span class="line">System.out.println( a + b );</span><br><span class="line"><span class="comment">// 不能重排的例子</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">// 指令1</span></span><br><span class="line"><span class="keyword">int</span> b = a - <span class="number">5</span>; <span class="comment">// 指令2</span></span><br></pre></td></tr></table></figure><blockquote><p>参考： <a href="https://en.wikipedia.org/wiki/Scoreboarding" target="_blank" rel="noopener">Scoreboarding</a> and the <a href="https://en.wikipedia.org/wiki/Tomasulo_algorithm" target="_blank" rel="noopener">Tomasulo algorithm</a> (which is similar to scoreboarding but makes use of <a href="https://en.wikipedia.org/wiki/Register_renaming" target="_blank" rel="noopener">register renaming</a>) are two of the most common techniques for implementing out-of-order execution and instruction-level parallelism.</p></blockquote><h5 id="支持流水线的处理器"><a href="#支持流水线的处理器" class="headerlink" title="支持流水线的处理器"></a>支持流水线的处理器</h5><p>现代 CPU 支持<strong>多级指令流水线</strong>，例如支持同时执行 <code>取指令 - 指令译码 - 执行指令 - 内存访问 - 数据写回</code> 的处理器，就可以称之为<strong>五级指令流水线</strong>。这时 CPU 可以在一个时钟周期内，同时运行五条指令的不同阶段（相当于一 条执行时间最长的复杂指令），IPC = 1，本质上，流水线技术并不能缩短单条指令的执行时间，但它变相地提高了 指令地吞吐率。 </p><blockquote><p><strong>提示</strong>：</p><p> 奔腾四（Pentium 4）支持高达 35 级流水线，但由于功耗太高被废弃 </p></blockquote><p><img src="%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%8E%9F%E7%90%86-4.png" alt></p><h5 id="SuperScalar-处理器"><a href="#SuperScalar-处理器" class="headerlink" title="SuperScalar 处理器"></a>SuperScalar 处理器</h5><p>大多数处理器包含多个执行单元，并不是所有计算功能都集中在一起，可以再细分为整数运算单元、浮点数运算单 元等，这样可以把多条指令也可以做到并行获取、译码等，CPU 可以在一个时钟周期内，执行多于一条指令，IPC &gt; 1</p><p><img src="%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%8E%9F%E7%90%86-5.png" alt></p><p><img src="%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%8E%9F%E7%90%86-6.png" alt></p><h4 id="诡异的结果"><a href="#诡异的结果" class="headerlink" title="诡异的结果"></a>诡异的结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> ready = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 线程1 执行此方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(ready) &#123;</span><br><span class="line"> r.r1 = num + num;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> r.r1 = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 线程2 执行此方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123; </span><br><span class="line"> num = <span class="number">2</span>;</span><br><span class="line"> ready = <span class="keyword">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I_Result 是一个对象，有一个属性 r1 用来保存结果，可能的结果有几种？</p><ul><li><strong>情况1</strong>：线程1 先执行，这时 ready = false，所以进入 else 分支结果为 1 </li><li><strong>情况2</strong>：线程2 先执行 num = 2，但没来得及执行 ready = true，线程1 执行，还是进入 else 分支，结果为1 </li><li><strong>情况3</strong>：线程2 执行到 ready = true，线程1 执行，这回进入 if 分支，结果为 4（因为 num 已经执行过了） </li><li>😵😵😵<strong>情况4</strong>：结果还有可能是 0 😁😁😁，这种情况下是：线程2 执行 ready = true，切换到线程1，进入 if 分支，相加为 0，再切回线程2 执行 num = 2 </li></ul><p>这种现象叫做指令重排，是 JIT 编译器在运行时的一些优化，这个现象需要通过大量测试才能复现： 借助 java 并发压测工具 jcstress <a href="https://github.com/openjdk/jcstress" target="_blank" rel="noopener">openjdk/jcstress: https://openjdk.java.net/projects/code-tools/jcstress/ (github.com)</a></p><blockquote><p>官方提供的脚手架</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mvn archetype:generate \</span><br><span class="line"> -DinteractiveMode=false \</span><br><span class="line"> -DarchetypeGroupId=org.openjdk.jcstress \</span><br><span class="line"> -DarchetypeArtifactId=jcstress-java-test-archetype \</span><br><span class="line"> -DgroupId=com.java.demo \</span><br><span class="line"> -DartifactId=ordering \</span><br><span class="line"> -Dversion=1.0</span><br></pre></td></tr></table></figure><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><ul><li><code>pom.xml</code>中引入依赖包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jcstress/jcstress-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jcstress<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcstress-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在对应的<code>test</code>测试目录下创建测试类</li></ul><p><img src="%E8%AF%A1%E5%BC%82%E7%9A%84%E7%BB%93%E6%9E%9C-%E9%AA%8C%E8%AF%81.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jcstress.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jcstress.infra.results.I_Result;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JCStressTest</span></span><br><span class="line"><span class="meta">@Outcome</span>(id = &#123;<span class="string">"1"</span>, <span class="string">"4"</span>&#125;, expect = Expect.ACCEPTABLE, desc = <span class="string">"ok"</span>)</span><br><span class="line"><span class="meta">@Outcome</span>(id = <span class="string">"0"</span>, expect = Expect.ACCEPTABLE_INTERESTING, desc = <span class="string">"!!!!"</span>)</span><br><span class="line"><span class="meta">@State</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrencyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> ready = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ready) &#123;</span><br><span class="line">            r.r1 = num + num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r.r1 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">        num = <span class="number">2</span>;</span><br><span class="line">        ready = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置运行的主类</li></ul><p><img src="%E8%AF%A1%E5%BC%82%E7%9A%84%E7%BB%93%E6%9E%9C-%E6%B5%8B%E8%AF%95%E7%B1%BB%E9%85%8D%E7%BD%AE.png" alt></p><ul><li>测试结果</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RUN RESULTS:</span><br><span class="line">  Interesting tests: 1 matching test results.</span><br><span class="line"></span><br><span class="line">.......... [OK] com.java.demo.jmm.ConcurrencyTest</span><br><span class="line"></span><br><span class="line">  Results across all configurations:</span><br><span class="line"></span><br><span class="line">  RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION</span><br><span class="line">       0      719,228    0.05%  Interesting  !!!!</span><br><span class="line">       1  535,433,848   39.47%   Acceptable  ok</span><br><span class="line">       4  820,366,348   60.48%   Acceptable  ok</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Failed tests: No matches.</span><br><span class="line"></span><br><span class="line">  Error tests: No matches.</span><br><span class="line"></span><br><span class="line">  All remaining tests: No matches.</span><br></pre></td></tr></table></figure><p>可以看到，出现结果为 0 的情况有 719,228 次，虽然次数相对很少，但毕竟是出现了。</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p><code>volatile</code> 修饰的变量，可以禁用指令重排</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jcstress.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jcstress.infra.results.I_Result;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JCStressTest</span></span><br><span class="line"><span class="meta">@Outcome</span>(id = &#123;<span class="string">"1"</span>, <span class="string">"4"</span>&#125;, expect = Expect.ACCEPTABLE, desc = <span class="string">"ok"</span>)</span><br><span class="line"><span class="meta">@Outcome</span>(id = <span class="string">"0"</span>, expect = Expect.ACCEPTABLE_INTERESTING, desc = <span class="string">"!!!!"</span>)</span><br><span class="line"><span class="meta">@State</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrencyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> ready = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ready) &#123;</span><br><span class="line">            r.r1 = num + num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r.r1 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">        num = <span class="number">2</span>;</span><br><span class="line">        ready = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RUN RESULTS:</span><br><span class="line">  Interesting tests: No matches.</span><br><span class="line"></span><br><span class="line">  Failed tests: No matches.</span><br><span class="line"></span><br><span class="line">  Error tests: No matches.</span><br></pre></td></tr></table></figure><h4 id="原理-之-volatile"><a href="#原理-之-volatile" class="headerlink" title="原理 之 volatile"></a>原理 之 volatile</h4><p><code>volatile</code> 的底层实现原理是内存屏障，<code>Memory Barrier</code>（<code>Memory Fence</code>） </p><ul><li>对 <code>volatile</code> 变量的写指令后会加入写屏障 </li><li>对 <code>volatile</code> 变量的读指令前会加入读屏障。</li></ul><h5 id="如何保证可见性"><a href="#如何保证可见性" class="headerlink" title="如何保证可见性"></a>如何保证可见性</h5><ul><li>写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">num = <span class="number">2</span>;</span><br><span class="line">ready = <span class="keyword">true</span>; <span class="comment">// ready 是 volatile 赋值带写屏障</span></span><br><span class="line"><span class="comment">// 写屏障</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>而读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读屏障</span></span><br><span class="line">    <span class="comment">// ready 是 volatile 读取值带读屏障</span></span><br><span class="line">    <span class="keyword">if</span>(ready) &#123;</span><br><span class="line">        r.r1 = num + num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.r1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="volatile%E5%8E%9F%E7%90%86-%E4%BF%9D%E8%AF%81%E5%8F%AF%E8%A7%81%E6%80%A7.png" alt></p><h5 id="如何保证有序性"><a href="#如何保证有序性" class="headerlink" title="如何保证有序性"></a>如何保证有序性</h5><ul><li>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    num = <span class="number">2</span>;</span><br><span class="line">    ready = <span class="keyword">true</span>; <span class="comment">// ready 是 volatile 赋值带写屏障</span></span><br><span class="line">    <span class="comment">// 写屏障</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读屏障</span></span><br><span class="line">    <span class="comment">// ready 是 volatile 读取值带读屏障</span></span><br><span class="line">    <span class="keyword">if</span>(ready) &#123;</span><br><span class="line">    r.r1 = num + num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    r.r1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="volatile-%E4%BF%9D%E8%AF%81%E6%9C%89%E5%BA%8F%E6%80%A7.png" alt></p><p><code>volatile</code>不能解决指令交错：</p><ul><li>写屏障仅仅是保证之后的读能够读到最新的结果，但不能保证读跑到它前面去 </li><li>而有序性的保证也只是保证了本线程内相关代码不被重排序</li></ul><p><img src="volatile%E5%8E%9F%E7%90%86-%E6%8C%87%E4%BB%A4%E4%BA%A4%E9%94%99.png" alt></p><h5 id="double-checked-locking-问题"><a href="#double-checked-locking-问题" class="headerlink" title="double-checked locking 问题"></a>double-checked locking 问题</h5><p>以著名的 double-checked locking 单例模式为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>) &#123; <span class="comment">// t2</span></span><br><span class="line">            <span class="comment">// 首次访问会同步，而之后的使用没有 synchronized</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123; <span class="comment">// t1</span></span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的实现特点是： </p><ul><li>懒惰实例化 </li><li>首次使用 getInstance() 才使用 synchronized 加锁，后续使用时无需加锁 </li><li>有隐含的，但很关键的一点：第一个 if 使用了 INSTANCE 变量，是在同步块之外</li></ul><p>但在多线程环境下，上面的代码是有问题的，getInstance 方法对应的字节码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span><br><span class="line">3: ifnonnull 37</span><br><span class="line">6: ldc #3 // class cn/itcast/n5/Singleton</span><br><span class="line">8: dup</span><br><span class="line">9: astore_0</span><br><span class="line">10: monitorenter</span><br><span class="line">11: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span><br><span class="line">14: ifnonnull 27</span><br><span class="line">17: new #3 // class cn/itcast/n5/Singleton</span><br><span class="line">20: dup</span><br><span class="line">21: invokespecial #4 // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">24: putstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span><br><span class="line">27: aload_0</span><br><span class="line">28: monitorexit</span><br><span class="line">29: goto 37</span><br><span class="line">32: astore_1</span><br><span class="line">33: aload_0</span><br><span class="line">34: monitorexit</span><br><span class="line">35: aload_1</span><br><span class="line">36: athrow</span><br><span class="line">37: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span><br><span class="line">40: areturn</span><br></pre></td></tr></table></figure><p>其中 </p><ul><li>17 表示创建对象，将对象引用入栈  // new Singleton </li><li>20 表示复制一份对象引用   // 引用地址 </li><li>21 表示利用一个对象引用，调用构造方法 </li><li>24 表示利用一个对象引用，赋值给 static INSTANCE</li></ul><p>也许 jvm 会优化为：先执行 24，再执行 21。如果两个线程 t1，t2 按如下时间序列执行：</p><p><img src="dcl%E9%97%AE%E9%A2%98.png" alt></p><p> 关键在于 <code>0: getstatic</code> 这行代码在 <code>monitor</code> 控制之外，它就像之前举例中不守规则的人，可以越过 <code>monitor</code> 读取 <code>INSTANCE</code> 变量的值 </p><p>这时 <code>t1</code> 还未完全将构造方法执行完毕，如果在构造方法中要执行很多初始化操作，那么 <code>t2</code> 拿到的是将是一个未初 始化完毕的单例 </p><p>对 <code>INSTANCE</code> 使用 <code>volatile</code> 修饰即可，可以禁用指令重排，但要注意在 <code>JDK 5</code> 以上的版本的 <code>volatile</code> 才会真正有效</p><h5 id="double-checked-locking-解决"><a href="#double-checked-locking-解决" class="headerlink" title="double-checked locking 解决"></a>double-checked locking 解决</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 实例没创建，才会进入内部的 synchronized代码块</span></span><br><span class="line">         <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123; </span><br><span class="line">             <span class="keyword">synchronized</span> (Singleton.class) &#123; <span class="comment">// t2</span></span><br><span class="line">             <span class="comment">// 也许有其它线程已经创建实例，所以再判断一次</span></span><br><span class="line">                 <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123; <span class="comment">// t1</span></span><br><span class="line">                 INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> INSTANCE;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码上看不出来 volatile 指令的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// -------------------------------------&gt; 加入对 INSTANCE 变量的读屏障</span><br><span class="line">0: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span><br><span class="line">3: ifnonnull 37</span><br><span class="line">6: ldc #3 // class cn/itcast/n5/Singleton</span><br><span class="line">8: dup</span><br><span class="line">9: astore_0</span><br><span class="line">10: monitorenter -----------------------&gt; 保证原子性、可见性</span><br><span class="line">11: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span><br><span class="line">14: ifnonnull 27</span><br><span class="line">17: new #3 // class cn/itcast/n5/Singleton</span><br><span class="line">20: dup</span><br><span class="line">21: invokespecial #4 // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">24: putstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span><br><span class="line">// -------------------------------------&gt; 加入对 INSTANCE 变量的写屏障</span><br><span class="line">27: aload_0</span><br><span class="line">28: monitorexit ------------------------&gt; 保证原子性、可见性</span><br><span class="line">29: goto 37</span><br><span class="line">32: astore_1</span><br><span class="line">33: aload_0</span><br><span class="line">34: monitorexit</span><br><span class="line">35: aload_1</span><br><span class="line">36: athrow</span><br><span class="line">37: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span><br><span class="line">40: areturn</span><br></pre></td></tr></table></figure><p>如上面的注释内容所示，读写 volatile 变量时会加入内存屏障（Memory Barrier（Memory Fence）），保证下面 两点：</p><ul><li>可见性<ul><li>写屏障（sfence）保证在该屏障之前的 t1 对共享变量的改动，都同步到主存当中 </li><li>而读屏障（lfence）保证在该屏障之后 t2 对共享变量的读取，加载的是主存中最新数据  </li></ul></li><li>有序性 <ul><li>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后 </li><li>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前 </li></ul></li></ul><p>更底层是读写变量时使用 lock 指令来多核 CPU 之间的可见性与有序性</p><p><img src="dcl%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.png" alt></p><h4 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h4><p><code>happens-before</code> 规定了对共享变量的写操作对其它线程的读操作可见，它是可见性与有序性的一套规则总结，抛开以下 <code>happens-before</code> 规则，<code>JMM</code> 并不能保证一个线程对共享变量的写，对于其它线程对该共享变量的读可见</p><ol><li>线程解锁 m 之前对变量的写，对于接下来对 m 加锁的其它线程对该变量的读可见</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">static</span> Object m = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(m) &#123;</span><br><span class="line">        x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(m) &#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br></pre></td></tr></table></figure><ol start="2"><li>线程对 volatile 变量的写，对接下来其它线程对该变量的读可见</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">&#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br></pre></td></tr></table></figure><ol start="3"><li>线程 start 前对变量的写，对该线程开始后对该变量的读可见</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br></pre></td></tr></table></figure><ol start="4"><li>线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其它线程调用 t1.isAlive() 或 t1.join()等待 它结束）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">&#125;,<span class="string">"t1"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t1.join();</span><br><span class="line">System.out.println(x);</span><br></pre></td></tr></table></figure><ol start="5"><li>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对变量的读可见（通过 t2.interrupted 或 t2.isInterrupted）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                System.out.println(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">"t2"</span>);</span><br><span class="line">    t2.start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        x = <span class="number">10</span>;</span><br><span class="line">        t2.interrupt();</span><br><span class="line">    &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line">    <span class="keyword">while</span>(!t2.isInterrupted()) &#123;</span><br><span class="line">        Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>对变量默认值（0，false，null）的写，对其它线程对该变量的读可见</li><li>具有传递性，如果 x hb-&gt; y 并且 y hb-&gt; z 那么有 x hb-&gt; z ，配合 volatile 的防指令重排，有下面的例子</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123; </span><br><span class="line">    y = <span class="number">10</span>;</span><br><span class="line">    x = <span class="number">20</span>;</span><br><span class="line">&#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="comment">// x=20 对 t2 可见, 同时 y=10 也对 t2 可见</span></span><br><span class="line">    System.out.println(x); </span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br></pre></td></tr></table></figure><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><h5 id="balking模式习题"><a href="#balking模式习题" class="headerlink" title="balking模式习题"></a>balking模式习题</h5><p>希望 <code>doInit()</code> 方法仅被调用一次，下面的实现是否有问题，为什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVolatile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialized) &#123; </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        doInit();</span><br><span class="line">        initialized = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>volatile不能解决原子性问题，所以需使用synchronized</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVolatile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (initialized) &#123; </span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            doInit();</span><br><span class="line">            initialized = <span class="keyword">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程安全单例习题"><a href="#线程安全单例习题" class="headerlink" title="线程安全单例习题"></a>线程安全单例习题</h5><p>单例模式有很多实现方法，饿汉、懒汉、静态内部类、枚举类，试分析每种实现下获取单例对象（即调用 getInstance）时的线程安全，并思考注释中的问题。</p><blockquote><ul><li>饿汉式：类加载就会导致该单实例对象被创建 </li><li>懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</li></ul></blockquote><h6 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a>实现1</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题1：为什么加 final  </span></span><br><span class="line"><span class="comment">// 防止有子类重写方法</span></span><br><span class="line"><span class="comment">// 问题2：如果实现了序列化接口, 还要做什么来防止反序列化破坏单例 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 问题3：为什么设置为私有? 是否能防止反射创建新的实例?</span></span><br><span class="line">    <span class="comment">// 保证外部只能通过getInstance去获得实例对象；不能防止</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 问题4：这样初始化是否能保证单例对象创建时的线程安全?</span></span><br><span class="line">    <span class="comment">// 静态变量的初始化在类加载阶段完成的，JVM保证线程安全性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">// 问题5：为什么提供静态方法而不是直接将 INSTANCE 设置为 public, 说出你知道的理由</span></span><br><span class="line">    <span class="comment">// 1. 方法提供更好的封装性，内部可以实现懒惰的初始化</span></span><br><span class="line">    <span class="comment">// 2. 可以在创建这个单例的时候有更多的控制</span></span><br><span class="line">    <span class="comment">// 3. 还可以提供泛型的支持，用成员变量不能支持泛型了，但是方法可以</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 问题2解答</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题1：枚举单例是如何限制实例个数的</span></span><br><span class="line"><span class="comment">// 枚举定义其底层也是静态成员变量，是单实例的</span></span><br><span class="line"><span class="comment">// 问题2：枚举单例在创建时是否有并发问题</span></span><br><span class="line"><span class="comment">// 不会有并发问题。因为静态变量初始化时JVM保证了其线程安全性</span></span><br><span class="line"><span class="comment">// 问题3：枚举单例能否被反射破坏单例</span></span><br><span class="line"><span class="comment">// 不能</span></span><br><span class="line"><span class="comment">// 问题4：枚举单例能否被反序列化破坏单例</span></span><br><span class="line"><span class="comment">// 能</span></span><br><span class="line"><span class="comment">// 问题5：枚举单例属于懒汉式还是饿汉式</span></span><br><span class="line"><span class="comment">// 饿汉式</span></span><br><span class="line"><span class="comment">// 问题6：枚举单例如果希望加入一些单例创建时的初始化逻辑该如何做</span></span><br><span class="line"><span class="comment">// 创建构造方法，将逻辑添加到构造方法</span></span><br><span class="line"><span class="keyword">enum</span> Singleton &#123; </span><br><span class="line">    INSTANCE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实现3"><a href="#实现3" class="headerlink" title="实现3"></a>实现3</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 分析这里的线程安全, 并说明有什么缺点</span></span><br><span class="line">    <span class="comment">// 添加了synchronized可以保证线程安全。</span></span><br><span class="line">    <span class="comment">// synchronized是重量级锁，频繁访问同步代码块性能比较低</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( INSTANCE != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125; </span><br><span class="line">        INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实现4-DCL"><a href="#实现4-DCL" class="headerlink" title="实现4 DCL"></a>实现4 DCL</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="comment">// 问题1：解释为什么要加 volatile ?</span></span><br><span class="line">    <span class="comment">// 防止synchronized同步代码块的指令重排序（构造方法的指令和前面的赋值指令会重排序）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 问题2：对比实现3, 说出这样做的意义 </span></span><br><span class="line">    <span class="comment">// 多次访问，性能提升</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123; </span><br><span class="line">            <span class="comment">// 问题3：为什么还要在这里加为空判断, 之前不是判断过了吗  </span></span><br><span class="line">            <span class="comment">// 为了防止首次创建INSTANCE,多个线程安全的问题</span></span><br><span class="line">            <span class="keyword">if</span> (INSTANCE != <span class="keyword">null</span>) &#123; <span class="comment">// t2 </span></span><br><span class="line">                <span class="keyword">return</span> INSTANCE;</span><br><span class="line">            &#125;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> Singleton(); </span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实现5"><a href="#实现5" class="headerlink" title="实现5"></a>实现5</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="comment">// 问题1：属于懒汉式还是饿汉式</span></span><br><span class="line">    <span class="comment">// 懒汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 问题2：在创建时是否有并发问题</span></span><br><span class="line">    <span class="comment">// 不会，JVM保证</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考资料：</p><p><a href="https://linianhui.github.io/java/jmm/#fn:3" target="_blank" rel="noopener">[Java] JMM(Java Memory Model) - blackheart (linianhui.github.io)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://10veU.github.io/categories/Java/"/>
    
      <category term="并发编程" scheme="https://10veU.github.io/categories/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://10veU.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://10veU.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发编程" scheme="https://10veU.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://10veU.github.io/2022/06/17/hello-world/"/>
    <id>https://10veU.github.io/2022/06/17/hello-world/</id>
    <published>2022-06-17T05:59:24.402Z</published>
    <updated>2022-06-17T05:59:24.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一切始于<code>Hello World</code>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="其他" scheme="https://10veU.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="HelloWorld" scheme="https://10veU.github.io/tags/HelloWorld/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud之Sleuth链路追踪</title>
    <link href="https://10veU.github.io/2022/06/09/Spring-Cloud%E4%B9%8BSleuth%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>https://10veU.github.io/2022/06/09/Spring-Cloud之Sleuth链路追踪/</id>
    <published>2022-06-09T22:04:55.000Z</published>
    <updated>2022-06-17T05:59:24.354Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Cloud之Sleuth链路追踪"><a href="#Spring-Cloud之Sleuth链路追踪" class="headerlink" title="Spring Cloud之Sleuth链路追踪"></a>Spring Cloud之Sleuth链路追踪</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>随着微服务架构的流行，<strong>服务按照不同的维度进行拆分</strong>，一次请求往往需要涉及到多个服务。<strong>互联网应用构建在不同的软件模块集上</strong>，这些软件模块，<strong>有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心</strong>。因此，就需要一些可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题。<strong>在复杂的微服务架构系统中，几乎每一个前端请求都会形成一个复杂的分布式服务调用链路</strong>。一个请求完整调用链可能如下图所示：</p><p><img src="%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%B7%E6%B1%82%E9%93%BE.png" alt></p><p>随着服务的越来越多，对调用链的分析会越来越复杂。它们之间的调用关系也许如下：</p><p><img src="%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt>  </p><p>在业务规模不断增大、服务不断增多以及频繁变更的情况下，面对复杂的调用链路就带来一系列问题：</p><ul><li>如何快速发现问题？</li><li>如何判断故障的影响范围？</li><li>如何梳理服务依赖以及依赖的合理性？</li><li>如何分析链路性能问题以及实时容量规划？</li></ul><p>而链路追踪的出现正是为了解决这种问题，它可以在复杂的服务调用中定位问题，还可以在新人加入后台团队之后，让其清楚地知道自己所负责的服务在哪一环。</p><p>除此之外，如果某个接口突然耗时增加，也不必再逐个服务查询耗时情况，我们可以直观地分析出服务的性能瓶颈，方便在流量激增的情况下精准合理地扩容。</p><h2 id="2-什么是链路追踪？"><a href="#2-什么是链路追踪？" class="headerlink" title="2. 什么是链路追踪？"></a>2. 什么是链路追踪？</h2><p><code>链路追踪</code>一词是在<code>2010</code>年提出的，当时谷歌发布了一篇<a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure – Google Research</a>论文，介绍了谷歌自研的分布式链路追踪的实现原理，还介绍了他们是怎么低成本实现对应用透明的。</p><p>其实<code>Dapper</code>一开始只是一个独立的调用链路追踪系统，后来逐渐演化成了监控平台，并且基于监控平台孕育出了很多工具，比如实时预警、过载保护、指标数据查询等。</p><p>除了谷歌的<code>Dapper</code>，还有一些其他比较有名的产品，比如阿里的鹰眼、大众点评的<code>CAT</code>、<code>Twitter</code>的<code>Zipkin</code>、<code>Naver</code>（著名社交软件<code>LINE</code>的母公司）的<code>pinpoint</code>以及国产开源的<code>skywalking</code>等。</p><h2 id="3-什么是Sleuth"><a href="#3-什么是Sleuth" class="headerlink" title="3. 什么是Sleuth?"></a>3. 什么是Sleuth?</h2><p><code>Spring Cloud Sleuth</code> 为 <code>Spring Cloud</code> 实现了分布式跟踪解决方案。兼容 <code>Zipkin</code>，<code>HTrace</code> 和其他基于日志的追踪系统，例如 <code>ELK（Elasticsearch 、Logstash、 Kibana）</code>。</p><p><code>Spring Cloud Sleuth</code> 提供了以下功能：</p><ul><li><code>链路追踪</code>：通过 <code>Sleuth</code> 可以很清楚的看出一个请求都经过了那些服务，可以很方便的理清服务间的调用关系等。</li><li><code>性能分析</code>：通过 <code>Sleuth</code> 可以很方便的看出每个采样请求的耗时，分析哪些服务调用比较耗时，当服务调用的耗时随着请求量的增大而增大时， 可以对服务的扩容提供一定的提醒。</li><li><code>数据分析，优化链路</code>：对于频繁调用一个服务，或并行调用等，可以针对业务做一些优化措施。</li><li><code>可视化错误</code>：对于程序未捕获的异常，可以配合 <code>Zipkin</code> 查看。</li></ul><h2 id="4-专业术语"><a href="#4-专业术语" class="headerlink" title="4. 专业术语"></a>4. 专业术语</h2><p>Spring Cloud Sleuth采用了<a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener">Dapper</a>的术语。</p><h3 id="Span"><a href="#Span" class="headerlink" title="Span"></a>Span</h3><p><strong>基本工作单元</strong>，一次链路调用（可以是RPC，DB等没有特定的限制）创建一个<code>span</code>，通过一个64位<code>ID</code>标识它，<code>uuid</code>较为方便，<code>span</code>中还有其他的数据，例如<strong>描述信息</strong>，<strong>时间戳</strong>，<code>key-value</code>对的（<code>Annotation</code>）<code>tag</code>信息，<code>parent_id</code>等,其中<code>parent-id</code>可以表示<code>span</code>调用链路来源。</p><p><img src="span.png" alt> </p><p>上图说明了span在一次大的跟踪过程中是什么样的。<strong>Dapper记录了span名称，以及每个span的ID和父ID，以重建在一次追踪过程中不同span之间的关系</strong>。如果一个span没有父ID被称为root span。<strong>所有span都挂在一个特定的跟踪上，也共用一个跟踪id</strong>。</p><p>Span数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type Span <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    TraceID    int64 <span class="comment">// 用于标示一次完整的请求id</span></span><br><span class="line">    Name       <span class="built_in">string</span></span><br><span class="line">    ID         int64 <span class="comment">// 当前这次调用span_id</span></span><br><span class="line">    ParentID   int64 <span class="comment">// 上层服务的调用span_id  最上层服务parent_id为null</span></span><br><span class="line">    Annotation []Annotation <span class="comment">// 用于标记的时间戳</span></span><br><span class="line">    Debug      <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h3><p>类似于 <strong>树结构的Span集合</strong>，一个<code>Trace</code>表示一次完整的链路跟踪，从请求到服务器开始，服务器返回<code>response</code>结束，跟踪每次<code>rpc</code>调用的耗时，存在唯一标识<code>trace_id</code>。比如：你运行的分布式大数据存储一次<code>Trace</code>就由你的一次请求组成。</p><p>举个例子：客户端调用服务 A 、服务 B 、服务 C 、服务 F，而每个服务例如 C 就是一个 Span，如果在服务 C 中另起线程调用了 D，那么 D 就是 C 的子 Span，如果在服务 D 中另起线程调用了 E，那么 E 就是 D 的子 Span，这个 C -&gt; D -&gt; E 的链路就是一条 Trace。如果链路追踪系统做好了，链路数据有了，借助前端解析和渲染工具，可以达到下图中的效果：</p><p><img src="trace.png" alt></p><h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><p><strong>注解，用来记录请求特定事件相关信息（例如时间），一个span中会有多个annotation注解描述</strong>。通常包含四个注解信息：</p><ul><li><strong>cs</strong>：Client Start，表示客户端发起请求</li><li><strong>sr</strong>：Server Receive，表示服务端收到请求</li><li><strong>ss</strong>：Server Send，表示服务端完成处理，并将结果发送给客户端</li><li><strong>cr</strong>：Client Received，表示客户端获取到服务端返回信息</li></ul><p>Annotation数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type Annotation <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Timestamp int64</span><br><span class="line">    Value     <span class="built_in">string</span></span><br><span class="line">    Host      Endpoint</span><br><span class="line">    Duration  int32</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-实现原理"><a href="#5-实现原理" class="headerlink" title="5. 实现原理"></a>5. 实现原理</h2><p>如果想知道一个接口在哪个环节出现了问题，就必须清楚该接口调用了哪些服务，以及调用的顺序，如果把这些服务串起来，看起来就像链条一样，我们称其为<strong>调用链</strong>。</p><p><img src="%E8%B0%83%E7%94%A8%E9%93%BE.png" alt></p><p>想要实现调用链，就要为每次调用做个标识，然后将服务按标识大小排列，可以更清晰地看出调用顺序，我们暂且将该标识命名为<code>spanid</code>。</p><p><img src="spanid.png" alt></p><p>实际场景中，我们需要知道某次请求调用的情况，所以只有 <code>spanid</code> 还不够，得为每次请求做个唯一标识，这样才能根据标识查出本次请求调用的所有服务，而这个标识我们命名为 <code>traceid</code>。</p><p><img src="traceid.png" alt></p><p>现在根据 <code>spanid</code> 可以轻易地知道被调用服务的先后顺序，但无法体现调用的层级关系，正如下图所示，多个服务可能是逐级调用的链条，也可能是同时被同一个服务调用。</p><p><img src="%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8.png" alt></p><p>所以应该每次都记录下是谁调用的，我们用 <code>parentid</code> 作为这个标识的名字。</p><p><img src="parentid.png" alt></p><p>到现在，已经知道调用顺序和层级关系了，但是接口出现问题后，还是不能找到出问题的环节，如果某个服务有问题，那个被调用执行的服务一定耗时很长，要想计算出耗时，上述的三个标识还不够，还需要加上时间戳，时间戳可以更精细一点，精确到微秒级。</p><p><img src="%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA.png" alt></p><p>只记录发起调用时的时间戳还算不出耗时，要记录下服务返回时的时间戳，有始有终才能算出时间差，既然返回的也记了，就把上述的三个标识都记一下吧，不然区分不出是谁的时间戳。</p><p><img src="%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA1.png" alt></p><p>虽然能计算出从服务调用到服务返回的总耗时，但是这个时间包含了服务的执行时间和网络延迟，有时候我们需要区分出这两类时间以方便做针对性优化。那如何计算网络延迟呢？我们可以把调用和返回的过程分为以下四个事件。</p><ul><li><code>Client Sent</code> 简称 <code>cs</code>，客户端发起调用请求到服务端。</li><li><code>Server Received</code> 简称 <code>sr</code>，指服务端接收到了客户端的调用请求。</li><li><code>Server Sent</code> 简称 <code>ss</code>，指服务端完成了处理，准备将信息返给客户端。</li><li><code>Client Received</code> 简称 <code>cr</code>，指客户端接收到了服务端的返回信息。</li></ul><p><img src="%E4%BA%8B%E4%BB%B6.png" alt></p><p>假如在这四个事件发生时记录下时间戳，就可以轻松计算出耗时，比如 <code>sr</code> 减去 <code>cs</code> 就是<strong>调用时的网络延迟</strong>，<code>ss</code> 减去 <code>sr</code> 就是<strong>服务执行时间</strong>，<code>cr</code> 减去 <code>ss</code> 就是<strong>服务响应的延迟</strong>，<code>cr</code> 减 <code>cs</code> 就是<strong>整个服务调用执行的时间</strong>。</p><p><img src="%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4.png" alt></p><p>其实 <code>span</code> 内除了记录这几个参数之外，还可以记录一些其他信息，比如发起调用服务名称、被调服务名称、返回结果、<code>IP</code>、调用服务的名称等，最后，我们再把相同 <code>parentid</code> 的 <code>span</code> 信息合成一个大的 <code>span</code> 块，就完成了一个完整的调用链。</p><p><img src="%E5%AE%8C%E6%95%B4%E8%B0%83%E7%94%A8%E9%93%BE.png" alt></p><h2 id="6-环境准备"><a href="#6-环境准备" class="headerlink" title="6. 环境准备"></a>6. 环境准备</h2><ul><li><code>spring-cloud-demo-eureka-server01</code></li><li><code>spring-cloud-demo-eureka-server02</code></li><li><code>spring-cloud-demo-gateway</code></li><li><code>spring-cloud-demo-service-provider01</code>服务提供者<br> 根据id查询商品 <a href="http://localhost:7071/product/1" target="_blank" rel="noopener">http://localhost:7071/product/1</a><br> 获取商品列表<a href="http://localhost:7071/product/list" target="_blank" rel="noopener">http://localhost:7071/product/list</a>  </li><li><code>spring-cloud-demo-service-consumer</code><br> 提供了根据主键查询订单接口 <a href="http://localhost:9090/order/1" target="_blank" rel="noopener">http://localhost:9090/order/1</a> 且订单服务调用商品服务。</li></ul><h2 id="7-入门案例"><a href="#7-入门案例" class="headerlink" title="7. 入门案例"></a>7. 入门案例</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在需要进行链路追踪的项目中（服务网关、商品服务、订单服务）添加 <code>spring-cloud-starter-sleuth</code> 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud sleuth 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><p>在需要链路追踪的项目中添加 <code>logback.xml</code> 日志文件，内容如下（logback 日志的输出级别需要是 DEBUG 级别）：</p><p>注意修改 <code>&lt;property name=&quot;log.path&quot; value=&quot;${catalina.base}/gateway-server/logs&quot;/&gt;</code> 中项目名称。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span> 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志上下文名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>my_logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值是变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"$&#123;catalina.base&#125;/gateway-server/logs"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Spring 配置文件信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"applicationName"</span> <span class="attr">source</span>=<span class="string">"spring.application.name"</span> <span class="attr">defaultValue</span>=<span class="string">"localhost"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [$&#123;applicationName&#125;,%X&#123;X-B3-TraceId:-&#125;,%X&#123;X-B3-SpanId:-&#125;] [%thread] %-5level %logger&#123;50&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DEBUG_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志归档 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/debug/log-debug-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录debug级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每个日志文件最大100MB --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志量最大 10 GB --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>10GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对于类路径以 com.example.logback 开头的Logger,输出级别设置为warn,并且只输出到控制台 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个logger没有指定appender，它会继承root节点中定义的那些appender --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;logger name="com.example.logback" level="warn"/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过 LoggerFactory.getLogger("myLog") 可以获取到这个logger--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--由于这个logger自动继承了root的appender，root中已经有stdout的appender了，自己这边又引入了stdout的appender--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果没有设置 additivity="false" ,就会导致一条日志在控制台输出两次的情况--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--additivity表示要不要使用rootLogger配置的appender进行输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"myLog"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别及方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日志核心配置：<code>%d{yyyy-MM-dd HH:mm:ss.SSS} [${applicationName},%X{X-B3-TraceId:-},%X{X-B3-SpanId:-}] [%thread] %-5level %logger{50} - %msg%n</code></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>访问：<a href="http://localhost:9000/SERVICE-PROVIDER/product/list?token=123" target="_blank" rel="noopener">localhost:9000/SERVICE-PROVIDER/product/list?token=123</a>，结果如下：</p><p>服务网关打印日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2022-06-01 10:52:50.611 [gateway-server,,] [reactor-http-nio-5] DEBUG reactor.netty.http.client.HttpClientOperations - [id: 0x52172b4f, L:/172.20.10.12:54892 - R:DESKTOP-634RU6I/172.20.10.12:9090] Received last HTTP packet</span><br><span class="line">2022-06-01 10:52:50.611 [gateway-server,5b66a3dd70bc0beb,5b66a3dd70bc0beb] [reactor-http-nio-5] DEBUG o.s.cloud.sleuth.instrument.web.TraceWebFilter - Handled send of RealSpan(5b66a3dd70bc0beb/5b66a3dd70bc0beb)</span><br><span class="line">2022-06-01 10:52:50.611 [gateway-server,5b66a3dd70bc0beb,5b66a3dd70bc0beb] [reactor-http-nio-5] DEBUG o.s.web.server.adapter.HttpWebHandlerAdapter - [71542345-46] Completed 200 OK</span><br><span class="line">2022-06-01 10:52:50.611 [gateway-server,5b66a3dd70bc0beb,5b66a3dd70bc0beb] [reactor-http-nio-5] DEBUG reactor.netty.http.server.HttpServerOperations - [id: 0x71542345, L:/0:0:0:0:0:0:0:1:9000 - R:/0:0:0:0:0:0:0:1:64205] Last HTTP response frame</span><br><span class="line">2022-06-01 10:52:50.611 [gateway-server,5b66a3dd70bc0beb,5b66a3dd70bc0beb] [reactor-http-nio-5] DEBUG reactor.netty.http.server.HttpServerOperations - [id: 0x71542345, L:/0:0:0:0:0:0:0:1:9000 - R:/0:0:0:0:0:0:0:1:64205] Decreasing pending responses, now 0</span><br><span class="line">2022-06-01 10:52:50.611 [gateway-server,5b66a3dd70bc0beb,5b66a3dd70bc0beb] [reactor-http-nio-5] DEBUG reactor.netty.http.server.HttpServerOperations - [id: 0x71542345, L:/0:0:0:0:0:0:0:1:9000 - R:/0:0:0:0:0:0:0:1:64205] Last HTTP packet was sent, terminating the channel</span><br></pre></td></tr></table></figure><p>商品服务打印日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2022-06-01 10:52:50.606 [service-provider,5b66a3dd70bc0beb,0a2d3a907c88100f] [http-nio-7071-exec-7] DEBUG org.springframework.web.servlet.DispatcherServlet - GET "/product/list", parameters=&#123;&#125;</span><br><span class="line">2022-06-01 10:52:50.606 [service-provider,5b66a3dd70bc0beb,0a2d3a907c88100f] [http-nio-7071-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.springcloud.demo.controller.ProductController#selectProductList()</span><br><span class="line">selectProductList</span><br><span class="line">2022-06-01 10:52:50.607 [service-provider,5b66a3dd70bc0beb,0a2d3a907c88100f] [http-nio-7071-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json, application/json, application/*+json]</span><br><span class="line">2022-06-01 10:52:50.607 [service-provider,5b66a3dd70bc0beb,0a2d3a907c88100f] [http-nio-7071-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[Product(id=1, productName=华为手机, productNum=2, productPrice=5888.0), Product(id=2, productName=联想笔记本 (truncated)...]</span><br><span class="line">2022-06-01 10:52:50.607 [service-provider,5b66a3dd70bc0beb,0a2d3a907c88100f] [http-nio-7071-exec-7] DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 200 OK</span><br></pre></td></tr></table></figure><p>订单服务打印日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2022-06-01 10:52:50.609 [service-consumer,5b66a3dd70bc0beb,c827a26bc012f1af] [http-nio-9090-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json;q=0.8', given [text/html, application/xhtml+xml, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8] and supported [application/json, application/*+json, application/json, application/*+json]</span><br><span class="line">2022-06-01 10:52:50.609 [service-consumer,5b66a3dd70bc0beb,c827a26bc012f1af] [http-nio-9090-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [Order(id=1, orderNo=order-003, orderAddress=中国-China, totalPrice=31996.0, productList=[Product(id=1, (truncated)...]</span><br><span class="line">2022-06-01 10:52:50.610 [service-consumer,5b66a3dd70bc0beb,c827a26bc012f1af] [http-nio-9090-exec-1] DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 200 OK</span><br></pre></td></tr></table></figure><p>通过打印信息可以得知，整个链路的 <code>traceId</code> 为：<code>5b66a3dd70bc0beb</code>，<code>spanId</code> 为：<code>0a2d3a907c88100f</code> 和 <code>c827a26bc012f1af</code>。</p><p>查看日志文件并不是一个很好的方法，当微服务越来越多日志文件也会越来越多，查询工作会变得越来越麻烦，<code>Spring</code> 官方推荐使用 <code>Zipkin</code> 进行链路跟踪。<code>Zipkin</code> 可以将日志聚合，并进行可视化展示和全文检索。</p><h2 id="8-使用Zipkin进行链路追踪"><a href="#8-使用Zipkin进行链路追踪" class="headerlink" title="8. 使用Zipkin进行链路追踪"></a>8. 使用Zipkin进行链路追踪</h2><h3 id="什么是Zipkin"><a href="#什么是Zipkin" class="headerlink" title="什么是Zipkin"></a>什么是Zipkin</h3><p><img src="Zipkin.png" alt></p><p>　<a href="https://zipkin.io/" target="_blank" rel="noopener">Zipkin</a> 是 Twitter 公司开发贡献的一款开源的分布式实时数据追踪系统（<code>Distributed Tracking System</code>），基于 <code>Google Dapper</code> 的论文设计而来，其主要功能是聚集各个异构系统的实时监控数据。</p><p>　　它可以收集各个服务器上请求链路的跟踪数据，并通过 <code>Rest API</code> 接口来辅助我们查询跟踪数据，实现对分布式系统的实时监控，及时发现系统中出现的延迟升高问题并找出系统性能瓶颈的根源。除了面向开发的 <code>API</code> 接口之外，它还提供了方便的 <code>UI</code> 组件，每个服务向 <code>Zipkin</code> 报告计时数据，<code>Zipkin</code> 会根据调用关系生成依赖关系图，帮助我们直观的搜索跟踪信息和分析请求链路明细。<code>Zipkin</code> 提供了可插拔数据存储方式：<code>In-Memory</code>、<code>MySql</code>、<code>Cassandra</code> 以及 <code>Elasticsearch</code>。</p><p>　　分布式跟踪系统还有其他比较成熟的实现，例如：<code>Naver</code> 的 <code>PinPoint</code>、<code>Apache</code> 的 <code>HTrace</code>、阿里的鹰眼 <code>Tracing</code>、京东的 <code>Hydra</code>、新浪的 <code>Watchman</code>，美团点评的 <code>CAT</code>，Apache 的 <code>SkyWalking</code> 等。</p><p><img src="zipkin%E7%9A%84span%E6%A8%A1%E5%9E%8B.png" alt>  </p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="zipkin%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.jpg" alt></p><p><code>Zipkin</code>的基础架构，它主要有4个核心组件构成：</p><ul><li><strong>Collector</strong>：收集器组件，它主要用于处理从外部系统发送过来的跟踪信息，将这些信息转换为<code>Zipkin</code>内部处理的<code>Span</code>格式，以支持后续的存储、分析、展示等功能。</li><li><strong>Storage</strong>：存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中，我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到 数据库 中。</li><li><strong>RESTful API</strong>：<code>API</code>组件，它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接系统访问以实现监控等。</li><li><strong>Web UI</strong>：<code>UI</code>组件，基于API组件实现的上层应用。通过UI组件用户可以方便而有直观地查询和分析跟踪信息。</li></ul><p><code>Zipkin</code>示例结构图：</p><p><img src="zipkin%E7%BB%93%E6%9E%84.png" alt></p><p>Zipkin链路跟踪</p><p>工程下有3个模块：</p><ul><li>注册中心</li><li>服务提供者</li><li><code>Zipkin</code>(<code>server</code>端和<code>client</code>端)<ul><li><code>server</code>端，收集数据并展示</li><li><code>client</code>，把调用数据发送给<code>server</code>端</li></ul></li></ul><h3 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h3><p>服务端是一个独立的可执行的 <code>jar</code> 包官方下载地址：<a href="https://search.maven.org/remote_content?g=io.zipkin&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec，使用" target="_blank" rel="noopener">https://search.maven.org/remote_content?g=io.zipkin&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec，使用</a> <code>java -jar zipkin.jar</code> 命令启动，端口默认为 <code>9411</code>。我们下载的 jar 包为：<code>zipkin-server-2.23.16-exec.jar</code>，启动命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.23.16-exec.jar</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:9411/" target="_blank" rel="noopener">http://localhost:9411/</a> 结果如下：</p><p>目前最新版界面。</p><p><img src="zipkin_server.png" alt></p><p>之前旧版本界面</p><p><img src="zipkin_server%E8%80%81%E7%89%88.png" alt></p><h3 id="客户端部署"><a href="#客户端部署" class="headerlink" title="客户端部署"></a>客户端部署</h3><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在需要进行链路追踪的项目中（服务网关、商品服务、订单服务）添加 <code>spring-cloud-starter-zipkin</code> 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud zipkin 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在需要进行链路追踪的项目中（服务网关、商品服务、订单服务）配置 <code>Zipkin</code> 服务端地址及数据传输方式。默认即如下配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411/</span> <span class="comment"># 服务端地址</span></span><br><span class="line"><span class="attr">    sender:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">web</span>                      <span class="comment"># 数据传输方式，web 表示以 HTTP 报文的形式向服务端发送数据</span></span><br><span class="line"><span class="attr">  sleuth:</span></span><br><span class="line"><span class="attr">    sampler:</span></span><br><span class="line"><span class="attr">      probability:</span> <span class="number">1.0</span>               <span class="comment"># 收集数据百分比，默认 0.1（10%）</span></span><br></pre></td></tr></table></figure><h4 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h4><p>访问：<a href="http://localhost:9000/SERVICE-CONSUMER/order/1?token=123" target="_blank" rel="noopener">http://localhost:9000/SERVICE-CONSUMER/order/1?token=123</a> 结果如下：</p><p><img src="%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94.png" alt></p><p>访问：<a href="http://localhost:9411/" target="_blank" rel="noopener">http://localhost:9411/</a> 根据时间过滤点击<code>搜索</code>结果如下：</p><p><img src="zipkin%E9%93%BE%E8%B7%AF%E6%97%B6%E9%97%B4%E8%BF%87%E6%BB%A4.png" alt></p><p>点击对应的追踪信息可查看请求链路详细信息。</p><p><img src="zipkin%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E8%AF%A6%E6%83%85.png" alt></p><p>通过依赖可以查看链路中服务的依赖关系。</p><p><img src="zipkin%E4%BE%9D%E8%B5%96%E4%BF%A1%E6%81%AF.png" alt></p><h3 id="存储追踪数据"><a href="#存储追踪数据" class="headerlink" title="存储追踪数据"></a>存储追踪数据</h3><p><code>Zipkin Server</code> <strong>默认存储追踪数据至内存中</strong>，这种方式并不适合生产环境，一旦 <code>Server</code> 关闭重启或者服务崩溃，就会导致历史数据消失。<code>Zipkin</code> 支持修改存储策略使用其他存储组件，支持 <code>MySQL</code>，<code>Elasticsearch</code> 等。</p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><h5 id="数据库脚本"><a href="#数据库脚本" class="headerlink" title="数据库脚本"></a>数据库脚本</h5><p>打开MySQL数据库，创建<code>zipkin</code>库，执行以下<code>SQL</code>脚本。</p><blockquote><p><a href="https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql" target="_blank" rel="noopener">zipkin/mysql.sql at master · openzipkin/zipkin (github.com)</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Copyright 2015-2019 The OpenZipkin Authors</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</span></span><br><span class="line"><span class="comment">-- in compliance with the License. You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Unless required by applicable law or agreed to in writing, software distributed under the License</span></span><br><span class="line"><span class="comment">-- is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span></span><br><span class="line"><span class="comment">-- or implied. See the License for the specific language governing permissions and limitations under</span></span><br><span class="line"><span class="comment">-- the License.</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_spans (</span><br><span class="line">  <span class="string">`trace_id_high`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit'</span>,</span><br><span class="line">  <span class="string">`trace_id`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`remote_service_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  <span class="string">`parent_id`</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">  <span class="string">`debug`</span> <span class="built_in">BIT</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="string">`start_ts`</span> <span class="built_in">BIGINT</span> <span class="keyword">COMMENT</span> <span class="string">'Span.timestamp(): epoch micros used for endTs query and to implement TTL'</span>,</span><br><span class="line">  <span class="string">`duration`</span> <span class="built_in">BIGINT</span> <span class="keyword">COMMENT</span> <span class="string">'Span.duration(): micros used for minDuration and maxDuration query'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`trace_id_high`</span>, <span class="string">`trace_id`</span>, <span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> ROW_FORMAT=COMPRESSED <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`trace_id_high`</span>, <span class="string">`trace_id`</span>) <span class="keyword">COMMENT</span> <span class="string">'for getTracesByIds'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`name`</span>) <span class="keyword">COMMENT</span> <span class="string">'for getTraces and getSpanNames'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`remote_service_name`</span>) <span class="keyword">COMMENT</span> <span class="string">'for getTraces and getRemoteServiceNames'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`start_ts`</span>) <span class="keyword">COMMENT</span> <span class="string">'for getTraces ordering and range'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_annotations (</span><br><span class="line">  <span class="string">`trace_id_high`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit'</span>,</span><br><span class="line">  <span class="string">`trace_id`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'coincides with zipkin_spans.trace_id'</span>,</span><br><span class="line">  <span class="string">`span_id`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'coincides with zipkin_spans.id'</span>,</span><br><span class="line">  <span class="string">`a_key`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'BinaryAnnotation.key or Annotation.value if type == -1'</span>,</span><br><span class="line">  <span class="string">`a_value`</span> <span class="built_in">BLOB</span> <span class="keyword">COMMENT</span> <span class="string">'BinaryAnnotation.value(), which must be smaller than 64KB'</span>,</span><br><span class="line">  <span class="string">`a_type`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'BinaryAnnotation.type() or -1 if Annotation'</span>,</span><br><span class="line">  <span class="string">`a_timestamp`</span> <span class="built_in">BIGINT</span> <span class="keyword">COMMENT</span> <span class="string">'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp'</span>,</span><br><span class="line">  <span class="string">`endpoint_ipv4`</span> <span class="built_in">INT</span> <span class="keyword">COMMENT</span> <span class="string">'Null when Binary/Annotation.endpoint is null'</span>,</span><br><span class="line">  <span class="string">`endpoint_ipv6`</span> <span class="built_in">BINARY</span>(<span class="number">16</span>) <span class="keyword">COMMENT</span> <span class="string">'Null when Binary/Annotation.endpoint is null, or no IPv6 address'</span>,</span><br><span class="line">  <span class="string">`endpoint_port`</span> <span class="built_in">SMALLINT</span> <span class="keyword">COMMENT</span> <span class="string">'Null when Binary/Annotation.endpoint is null'</span>,</span><br><span class="line">  <span class="string">`endpoint_service_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">COMMENT</span> <span class="string">'Null when Binary/Annotation.endpoint is null'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> ROW_FORMAT=COMPRESSED <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span>(<span class="string">`trace_id_high`</span>, <span class="string">`trace_id`</span>, <span class="string">`span_id`</span>, <span class="string">`a_key`</span>, <span class="string">`a_timestamp`</span>) <span class="keyword">COMMENT</span> <span class="string">'Ignore insert on duplicate'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`trace_id_high`</span>, <span class="string">`trace_id`</span>, <span class="string">`span_id`</span>) <span class="keyword">COMMENT</span> <span class="string">'for joining with zipkin_spans'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`trace_id_high`</span>, <span class="string">`trace_id`</span>) <span class="keyword">COMMENT</span> <span class="string">'for getTraces/ByIds'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`endpoint_service_name`</span>) <span class="keyword">COMMENT</span> <span class="string">'for getTraces and getServiceNames'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`a_type`</span>) <span class="keyword">COMMENT</span> <span class="string">'for getTraces and autocomplete values'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`a_key`</span>) <span class="keyword">COMMENT</span> <span class="string">'for getTraces and autocomplete values'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">INDEX</span>(<span class="string">`trace_id`</span>, <span class="string">`span_id`</span>, <span class="string">`a_key`</span>) <span class="keyword">COMMENT</span> <span class="string">'for dependencies job'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_dependencies (</span><br><span class="line">  <span class="string">`day`</span> <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`parent`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`child`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`call_count`</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">  <span class="string">`error_count`</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`day`</span>, <span class="string">`parent`</span>, <span class="string">`child`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> ROW_FORMAT=COMPRESSED <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h5 id="部署Zipkin服务端"><a href="#部署Zipkin服务端" class="headerlink" title="部署Zipkin服务端"></a>部署Zipkin服务端</h5><p>添加启动参数，重新部署服务端</p><blockquote><p><a href="https://github.com/openzipkin/zipkin/blob/master/zipkin-server/src/main/resources/zipkin-server-shared.yml" target="_blank" rel="noopener">zipkin/zipkin-server-shared.yml at master · openzipkin/zipkin (github.com)</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.23.16-exec.jar --STORAGE_TYPE=mysql --MYSQL_HOST=113.142.151.219 --MYSQL_TCP_PORT=60000 --MYSQL_USER=root --MYSQL_PASS=root --MYSQL_DB=zipkin</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>访问<a href="http://localhost:9000/SERVICE-CONSUMER/order/1?token=admin" target="_blank" rel="noopener">http://localhost:9000/SERVICE-CONSUMER/order/1?token=admin</a>查看数据库结果如下：</p><p><img src="zipkin_storge_mysql.png" alt></p><p>在 MySQL 模式下，每次启动服务端时，服务端会从数据库加载链路信息展示至 Web 界面。</p><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>使用以下命令启动<code>RabbitMQ</code>服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.9-management</span><br></pre></td></tr></table></figure><p>使用默认用户名和密码(<code>guest</code>)登录<code>RabbitMQ</code>的<code>web</code>控制台，查看<code>Queues</code>选项，查看队列信息。</p><p><img src="RabbitMQ_Queues.png" alt></p><p>此时，无任何队列！</p><h5 id="部署-Zipkin-服务端"><a href="#部署-Zipkin-服务端" class="headerlink" title="部署 Zipkin 服务端"></a>部署 Zipkin 服务端</h5><p>添加启动参数，重新部署服务端。</p><blockquote><p><a href="https://github.com/openzipkin/zipkin/blob/master/zipkin-server/src/main/resources/zipkin-server-shared.yml" target="_blank" rel="noopener">zipkin/zipkin-server-shared.yml at master · openzipkin/zipkin (github.com)</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.23.16-exec.jar --STORAGE_TYPE=mysql --MYSQL_HOST=113.142.151.219 --MYSQL_TCP_PORT=60000 --MYSQL_USER=root --MYSQL_PASS=root --MYSQL_DB=zipkin --RABBIT_ADDRESSES=192.168.56.56:5672 --RABBIT_USER=guest --RABBIT_PASSWORD=guest --RABBIT_VIRTUAL_HOST=/ --RABBIT_QUEUE=zipkin</span><br></pre></td></tr></table></figure><p>启动参数中包含 MySQL 和 RabbitMQ 的配置，实现<strong>基于 MQ 并存储链路信息至 MySQL</strong>，如下图：</p><p><img src="zipkin_rabbitmq_mysql.png" alt></p><h5 id="查看队列"><a href="#查看队列" class="headerlink" title="查看队列"></a>查看队列</h5><p>访问：<a href="http://192.168.56.56:15672/#/queues" target="_blank" rel="noopener">http://192.168.56.56:15672/#/queues</a> 可以看到已经创建好了 <code>zipkin</code> 队列。</p><p><img src="rabbitmq_queues1.png" alt></p><h5 id="客户端添加依赖"><a href="#客户端添加依赖" class="headerlink" title="客户端添加依赖"></a>客户端添加依赖</h5><p><a href="https://docs.spring.io/spring-cloud-sleuth/docs/2.2.8.RELEASE/reference/html/#sleuth-with-zipkin-over-rabbitmq-or-kafka" target="_blank" rel="noopener">Spring Cloud Sleuth</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud zipkin 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 消息队列通用依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="客户端配置文件"><a href="#客户端配置文件" class="headerlink" title="客户端配置文件"></a>客户端配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411/</span> <span class="comment"># 服务端地址</span></span><br><span class="line"><span class="attr">    sender:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">rabbit</span></span><br><span class="line"><span class="attr">    rabbitmq:</span></span><br><span class="line"><span class="attr">      queue:</span> <span class="string">zipkin</span>                  <span class="comment"># 队列名称</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.56</span>             <span class="comment"># 服务器 IP</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span>                       <span class="comment"># 服务器端口</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span>                  <span class="comment"># 用户名</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span>                  <span class="comment"># 密码</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span>                  <span class="comment"># 虚拟主机地址</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      direct:</span></span><br><span class="line"><span class="attr">        retry:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span>              <span class="comment"># 是否开启发布重试</span></span><br><span class="line"><span class="attr">          max-attempts:</span> <span class="number">5</span>            <span class="comment"># 最大重试次数</span></span><br><span class="line"><span class="attr">          initial-interval:</span> <span class="number">5000</span>     <span class="comment"># 重试间隔时间（单位毫秒）</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        retry:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span>              <span class="comment"># 是否开启消费者重试</span></span><br><span class="line"><span class="attr">          max-attempts:</span> <span class="number">5</span>            <span class="comment"># 最大重试次数</span></span><br><span class="line"><span class="attr">          initial-interval:</span> <span class="number">5000</span>     <span class="comment"># 重试间隔时间（单位毫秒）</span></span><br><span class="line"><span class="attr">  sleuth:</span></span><br><span class="line"><span class="attr">    sampler:</span></span><br><span class="line"><span class="attr">      probability:</span> <span class="number">1.0</span>               <span class="comment"># 收集数据百分比，默认 0.1（10%）</span></span><br></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>先关闭 Zipkin 服务端，访问：<a href="http://localhost:9000/SERVICE-CONSUMER/order/1?token=admin客户端已将链路追踪数据写入队列当中：" target="_blank" rel="noopener">http://localhost:9000/SERVICE-CONSUMER/order/1?token=admin客户端已将链路追踪数据写入队列当中：</a></p><p><img src="rabbitmq_queues2.png" alt></p><p>启动 <code>Zipkin</code> 服务端后，队列中消息被消费。</p><p><img src="rabbitmq_queues3.png" alt></p><p>链路追踪数据被存储至 MySQL。</p><p><img src="zipkin_mysql.png" alt></p><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><p><img src="Elasticsearch_version.png" alt></p><h5 id="安装启动Elasticsearch"><a href="#安装启动Elasticsearch" class="headerlink" title="安装启动Elasticsearch"></a>安装启动Elasticsearch</h5><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.2/docker.html" target="_blank" rel="noopener">使用 Docker | 安装 Elasticsearch弹性搜索指南 [8.2] |弹性的</a></p></blockquote><h6 id="Elasticsearch-8"><a href="#Elasticsearch-8" class="headerlink" title="Elasticsearch 8"></a>Elasticsearch 8</h6><blockquote><p>启动Elasticsearch报错，如下图所示</p></blockquote><p><img src="elasticsearch_error.png" alt></p><blockquote><p>解决方案  </p></blockquote><ul><li>临时修改</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><ul><li>永久修改</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo vm.max_map_count=262144&gt;&gt; /etc/sysctl.conf sysctl -p</span><br></pre></td></tr></table></figure><p>由于<code>Elasticsearch</code>从<code>8</code>开始启用了安全证书机制，为了简单使用，也可以将使用认证的开关关掉。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vagrant]# docker exec -it es01 /bin/bash</span><br><span class="line">elasticsearch@c10329b170d8:~$ ll</span><br><span class="line">total 884</span><br><span class="line">drwxrwxr-x.  1 root          root     58 Jun  3 17:53 ./</span><br><span class="line">drwxr-xr-x.  1 root          root     27 May 25 19:06 ../</span><br><span class="line">-rw-r--r--.  1 root          root    220 May 25 19:06 .bash_logout</span><br><span class="line">-rw-r--r--.  1 root          root   3771 May 25 19:06 .bashrc</span><br><span class="line">drwxrwxr-x.  3 elasticsearch root     17 Jun  3 17:53 .cache/</span><br><span class="line">-rw-r--r--.  1 root          root    807 May 25 19:06 .profile</span><br><span class="line">-r--r--r--.  1 root          root   3860 May 25 15:46 LICENSE.txt</span><br><span class="line">-r--r--r--.  1 root          root 873453 May 25 15:51 NOTICE.txt</span><br><span class="line">-r--r--r--.  1 root          root   2710 May 25 15:46 README.asciidoc</span><br><span class="line">drwxrwxr-x.  1 elasticsearch root      6 May 25 19:05 bin/</span><br><span class="line">drwxrwxr-x.  1 elasticsearch root     74 Jun  3 17:53 config/</span><br><span class="line">drwxrwxr-x.  1 elasticsearch root     87 Jun  3 18:22 data/</span><br><span class="line">dr-xr-xr-x.  1 root          root     17 May 25 15:53 jdk/</span><br><span class="line">dr-xr-xr-x.  4 root          root   4096 May 25 15:53 lib/</span><br><span class="line">drwxrwxr-x.  1 elasticsearch root     54 Jun  3 17:53 logs/</span><br><span class="line">dr-xr-xr-x. 65 root          root   4096 May 25 15:54 modules/</span><br><span class="line">drwxrwxr-x.  1 elasticsearch root      6 May 25 15:51 plugins/</span><br></pre></td></tr></table></figure><p>修改<code>config/</code>下的<code>elasticsearch.yml</code>中的安全配置项为关闭状态。如下图所示：</p><p><img src="elasticsearch%E9%85%8D%E7%BD%AE.png" alt></p><p>重启<code>elasticsearch</code>服务，访问<a href="http://192.168.56.56:9200/" target="_blank" rel="noopener">http://192.168.56.56:9200/</a></p><p><img src="elasticsearch.png" alt></p><h6 id="Elasticsearch-7集群（推荐）"><a href="#Elasticsearch-7集群（推荐）" class="headerlink" title="Elasticsearch 7集群（推荐）"></a>Elasticsearch 7集群（推荐）</h6><ul><li><code>docker-compose.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  es01:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">elasticsearch:7.17.4</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">es01</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=es01</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">discovery.seed_hosts=es02,es03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms256m -Xmx256m"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - data01:</span><span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">  es02:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">elasticsearch:7.17.4</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">es02</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=es02</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">discovery.seed_hosts=es01,es03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms256m -Xmx256m"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - data02:</span><span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">  es03:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">elasticsearch:7.17.4</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">es03</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=es03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">discovery.seed_hosts=es01,es02</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms256m -Xmx256m"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - data03:</span><span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  data01:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  data02:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  data03:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  elastic:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>启动集群，访问：<a href="http://192.168.56.56:9200/_cluster/health?pretty" target="_blank" rel="noopener">http://192.168.56.56:9200/_cluster/health?pretty</a> 结果如下：</p><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-health.html" target="_blank" rel="noopener">Cluster health API | Elasticsearch Guide [7.17] | Elastic</a></p></blockquote><p><img src="elasticsearch_cluster.png" alt></p><h5 id="安装elasticsearch-head"><a href="#安装elasticsearch-head" class="headerlink" title="安装elasticsearch-head"></a>安装elasticsearch-head</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>拉取镜像</span><br><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>创建容器</span><br><span class="line">docker create --name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>启动容器</span><br><span class="line">docker start elasticsearch-head</span><br><span class="line">or</span><br><span class="line">docker start 容器id （docker ps -a 查看容器id ）</span><br></pre></td></tr></table></figure><p>浏览器打开: <a href="http://IP:9100" target="_blank" rel="noopener">http://IP:9100</a></p><p><img src="elasticsearch-head.png" alt></p><p>我们会发现<code>easticsearch</code>未连接，这是由于前后端分离开发，所以会存在跨域问题，需要在服务端做<code>CORS</code>的配置。</p><p>修改<code>Docker</code>中<code>elasticsearch</code>的<code>elasticsearch.yml</code>文件，在文件的最后添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span> </span><br><span class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tmp]# docker restart es01</span><br><span class="line">es01</span><br><span class="line">[root@localhost tmp]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                                                 COMMAND                  CREATED          STATUS                      PORTS</span><br><span class="line">                                                 NAMES</span><br><span class="line">da41dcf02dce   mobz/elasticsearch-head:5                             "/bin/sh -c 'grunt s…"   18 minutes ago   Up 17 minutes               0.0.0.0:9100-&gt;9100/tcp, :::9100-&gt;9100/tcp</span><br><span class="line">                                                 elasticsearch-head</span><br><span class="line">c10329b170d8   docker.elastic.co/elasticsearch/elasticsearch:8.2.2   "/bin/tini -- /usr/l…"   6 hours ago      Up 34 seconds               0.0.0.0:9200-&gt;9200/tcp, :::9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp, :::9300-&gt;9300/tcp</span><br><span class="line">                                                 es01</span><br></pre></td></tr></table></figure><p>再次访问<a href="http://IP:9100，便会出现以下结果" target="_blank" rel="noopener">http://IP:9100，便会出现以下结果</a></p><p><img src="elasticsearch_header.png" alt></p><h5 id="部署Zipkin服务端-1"><a href="#部署Zipkin服务端-1" class="headerlink" title="部署Zipkin服务端"></a>部署Zipkin服务端</h5><p>添加启动参数，重新部署服务端。</p><blockquote><p><a href="https://github.com/openzipkin/zipkin/blob/master/zipkin-server/src/main/resources/zipkin-server-shared.yml" target="_blank" rel="noopener">zipkin/zipkin-server-shared.yml at master · openzipkin/zipkin (github.com)</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-<span class="number">2.23</span>.16-exec.jar --STORAGE_TYPE=elasticsearch --ES_HOSTS=http:<span class="comment">//192.168.56.56:9200/ --RABBIT_ADDRESSES=192.168.56.56:5672 --RABBIT_USER=guest --RABBIT_PASSWORD=guest --RABBIT_QUEUE=zipkin</span></span><br></pre></td></tr></table></figure><p>启动参数中包含 <code>Elasticsearch</code> 和 <code>RabbitMQ</code> 的配置，实现<strong>基于 MQ 并存储链路信息至 <code>Elasticsearch</code></strong>。</p><h5 id="查看索引库"><a href="#查看索引库" class="headerlink" title="查看索引库"></a>查看索引库</h5><p>访问：<a href="http://192.168.56.56:9100" target="_blank" rel="noopener">http://192.168.56.56:9100</a> 可以看到已经创建好了 <code>zipkin</code> 索引库。</p><p><img src="elasticsearch_index.png" alt></p><h5 id="客户端添加依赖-1"><a href="#客户端添加依赖-1" class="headerlink" title="客户端添加依赖"></a>客户端添加依赖</h5><p><a href="https://docs.spring.io/spring-cloud-sleuth/docs/2.2.8.RELEASE/reference/html/#sleuth-with-zipkin-over-rabbitmq-or-kafka" target="_blank" rel="noopener">Spring Cloud Sleuth</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud zipkin 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 消息队列通用依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="客户端配置文件-1"><a href="#客户端配置文件-1" class="headerlink" title="客户端配置文件"></a>客户端配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411/</span> <span class="comment"># 服务端地址</span></span><br><span class="line"><span class="attr">    sender:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">rabbit</span></span><br><span class="line"><span class="attr">    rabbitmq:</span></span><br><span class="line"><span class="attr">      queue:</span> <span class="string">zipkin</span>                  <span class="comment"># 队列名称</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.16856</span><span class="number">.56</span>             <span class="comment"># 服务器 IP</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span>                       <span class="comment"># 服务器端口</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span>                  <span class="comment"># 用户名</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span>                  <span class="comment"># 密码</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span>                  <span class="comment"># 虚拟主机地址</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      direct:</span></span><br><span class="line"><span class="attr">        retry:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span>              <span class="comment"># 是否开启发布重试</span></span><br><span class="line"><span class="attr">          max-attempts:</span> <span class="number">5</span>            <span class="comment"># 最大重试次数</span></span><br><span class="line"><span class="attr">          initial-interval:</span> <span class="number">5000</span>     <span class="comment"># 重试间隔时间（单位毫秒）</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        retry:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span>              <span class="comment"># 是否开启消费者重试</span></span><br><span class="line"><span class="attr">          max-attempts:</span> <span class="number">5</span>            <span class="comment"># 最大重试次数</span></span><br><span class="line"><span class="attr">          initial-interval:</span> <span class="number">5000</span>     <span class="comment"># 重试间隔时间（单位毫秒）</span></span><br><span class="line"><span class="attr">  sleuth:</span></span><br><span class="line"><span class="attr">    sampler:</span></span><br><span class="line"><span class="attr">      probability:</span> <span class="number">1.0</span>               <span class="comment"># 收集数据百分比，默认 0.1（10%）</span></span><br></pre></td></tr></table></figure><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><p>访问：<a href="http://localhost:9000/SERVICE-CONSUMER/order/1?token=admin查看索引库结果如下：" target="_blank" rel="noopener">http://localhost:9000/SERVICE-CONSUMER/order/1?token=admin查看索引库结果如下：</a></p><blockquote><p>Linux vi模式下显示行号<code>:set number</code></p><p><a href="https://www.cnblogs.com/killer21/p/12061388.html" target="_blank" rel="noopener">ElasticSearch-head 操作时，报 406错误码 - killer21 - 博客园 (cnblogs.com)</a></p></blockquote><p><img src="elasticsearch_data.png" alt></p><h2 id="9-使用-ELK-分析追踪数据"><a href="#9-使用-ELK-分析追踪数据" class="headerlink" title="9. 使用 ELK 分析追踪数据"></a>9. 使用 ELK 分析追踪数据</h2><p><strong>ELK</strong> 是 elastic 公司提供的<strong>一套完整的日志收集以及展示的解决方案</strong>，是三个产品的首字母缩写，分别是 <code>Elasticsearch</code>、<code>Logstash</code> 和<code>Kibana</code>。</p><p><code>Elasticsearch</code> 是一个分布式、<code>RESTful</code> 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。 </p><ul><li><strong>Elasticsearch 简称 ES</strong>：实时的分布式搜索和分析引擎，它可以用于全文搜索，结构化搜索以及分析。建立在全文搜索引擎 <code>Apache Lucene</code> 基础上的搜索引擎，使用 <code>Java</code> 语言编写。  </li><li><strong>Logstash</strong>：具有实时传输能力的数据收集引擎，将各种各样的数据进行收集、解析，并发送给 <code>ES</code>。使用 <code>Ruby</code> 语言编写。  </li><li><strong>Kibana</strong>：为 <code>Elasticsearch</code> 提供了分析和可视化的 <code>Web</code> 平台。它可以在 <code>Elasticsearch</code> 的索引中查找，交互数据，并生成各种维度表格、图形。</li><li><strong>Beats</strong>：一组轻量级采集程序的统称，使用 Go 语言编写。以下是 elastic 官方支持的 5 种 beats，事实上，伟大的开源力量早已创造出大大小小几十甚至上百种 beats，只有你没想到的，没有 beats 做不到的：</li></ul><ul><li>Filebeat：进行文件和目录采集，主要用于收集日志数据。</li><li>Winlogbeat：专门针对 Windows 的 event log 进行的数据采集。</li><li>Metricbeat：进行指标采集，指标可以是系统的，也可以是众多中间件产品的，主要用于监控系统和软件的性能。</li><li>Packetbeat：通过网络抓包、协议分析，对一些请求响应式的系统通信进行监控和数据收集，可以收集到很多常规方式无法收集到的信息。</li><li>Heartbeat：系统间连通性检测，比如 icmp，tcp，http 等系统的连通性监控。</li></ul><p>  <img src="Beats.png" alt></p><p>  <img src="elk.png" alt></p><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/7.17/deploying-and-scaling.html" target="_blank" rel="noopener">Deploying and Scaling Logstash | Logstash Reference 7.17| Elastic</a></p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><code>ElasticSearch</code>集群（已搭建）<br>  <code>192.168.56.56:9200</code></li></ul><ul><li><code>Logstash</code><br>  <code>Logstash</code>配置<br>  <a href="https://www.elastic.co/guide/en/logstash/7.17/configuration.html" target="_blank" rel="noopener">Configuring Logstash | Logstash Reference 7.17 | Elastic</a><br>  <code>Logstash</code> 运行时指定的配置文件 <code>log-to-es.conf</code>内容如下：</li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 数据入口</span><br><span class="line">input &#123;</span><br><span class="line">tcp &#123;</span><br><span class="line">mode =&gt; &quot;server&quot;</span><br><span class="line">host =&gt; &quot;192.168.56.56&quot;</span><br><span class="line">port =&gt; 5044</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"># 处理数据</span><br><span class="line">filter &#123;</span><br><span class="line"># 获取 @timestamp 的值并加上 8*60*60（北京时间比 logstash 中@timestamp 晚了 8 小时），然后赋值给变量 timestamp。</span><br><span class="line">ruby &#123; </span><br><span class="line">code =&gt; &quot;event.set(&apos;timestamp&apos;, event.get(&apos;@timestamp&apos;).time.localtime + 8*60*60)&quot; </span><br><span class="line">&#125;</span><br><span class="line"># 将 timestamp 值重新赋值给 @timestamp</span><br><span class="line">ruby &#123;</span><br><span class="line">code =&gt; &quot;event.set(&apos;@timestamp&apos;, event.get(&apos;timestamp&apos;))&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 删除变量 timestamp</span><br><span class="line">mutate &#123;</span><br><span class="line">remove_field =&gt; [&quot;timestamp&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"># 数据出口</span><br><span class="line">output &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts =&gt; [&quot;192.168.56.56:9200&quot;]</span><br><span class="line">index =&gt; &quot;applog&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">tcp &#123;</span><br><span class="line">mode =&gt; &quot;server&quot;</span><br><span class="line">host =&gt; &quot;192.168.56.56&quot;</span><br><span class="line">port =&gt; 5044</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">ruby &#123; </span><br><span class="line">code =&gt; &quot;event.set(&apos;timestamp&apos;, event.get(&apos;@timestamp&apos;).time.localtime + 8*60*60)&quot; </span><br><span class="line">&#125;</span><br><span class="line">ruby &#123;</span><br><span class="line">code =&gt; &quot;event.set(&apos;@timestamp&apos;, event.get(&apos;timestamp&apos;))&quot;</span><br><span class="line">&#125;</span><br><span class="line">mutate &#123;</span><br><span class="line">remove_field =&gt; [&quot;timestamp&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts =&gt; [&quot;192.168.56.56:9200&quot;]</span><br><span class="line">index =&gt; &quot;applog&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it  -v /opt/log-to-es.conf:/usr/share/logstash/pipeline/logstash.conf -e "xpack.monitoring.elasticsearch.hosts=http://192.168.56.56:9200" --net host logstash:7.17.4</span><br></pre></td></tr></table></figure>&gt; 这里使用host模式启动`Logstash`,`bridge`模式下启动有`Cannot assign requested address `报错`192.168.56.56:5044`</code></pre><ul><li><code>Kibana</code><br>  <code>192.168.56.56:5601</code></li></ul><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kib01-test --net elastic -p 5601:5601 -e "ELASTICSEARCH_HOSTS=http://192.168.56.56:9200" kibana:7.17.4</span><br></pre></td></tr></table></figure></code></pre><h3 id="添加依赖-2"><a href="#添加依赖-2" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在需要进行链路追踪的项目中（服务网关、商品服务、订单服务）添加 <code>logstash-logback-encoder</code> 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logstash 编码依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>在需要进行链路追踪的项目中（服务网关、商品服务、订单服务）添加 <code>logstash 输出 JSON 格式数据</code>。</p><ul><li><code>logback.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 为 Logstash 输出 JSON 格式数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_PATTERN"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据输出目的地 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>192.168.56.56:5044<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        "severity": "%level",</span><br><span class="line">                        "service": "$&#123;springAppName:-&#125;",</span><br><span class="line">                        "trace": "%X&#123;X-B3-TraceId:-&#125;",</span><br><span class="line">                        "span": "%X&#123;X-B3-SpanId:-&#125;",</span><br><span class="line">                        "exportable": "%X&#123;X-Span-Export:-&#125;",</span><br><span class="line">                        "pid": "$&#123;PID:-&#125;",</span><br><span class="line">                        "thread": "%thread",</span><br><span class="line">                        "class": "%logger&#123;40&#125;",</span><br><span class="line">                        "rest": "%message"</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志输出级别及方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH_PATTERN"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查看索引库-1"><a href="#查看索引库-1" class="headerlink" title="查看索引库"></a>查看索引库</h3><p>重启项目后，访问：<a href="http://192.168.56.56:9100" target="_blank" rel="noopener">http://192.168.56.56:9100</a> 可以看到已经创建好了 <code>applog</code> 索引库。</p><p><img src="applog.png" alt></p><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><p>访问：<a href="http://localhost:9000/SERVICE-CONSUMER/order/1?token=admin查看索引库结果如下：" target="_blank" rel="noopener">http://localhost:9000/SERVICE-CONSUMER/order/1?token=admin查看索引库结果如下：</a></p><p><img src="applog_ndex.png" alt></p><p>访问：<a href="http://192.168.56.56:5601/" target="_blank" rel="noopener">http://192.168.56.56:5601/</a> <code>Kibana</code> 首页。</p><p><img src="Kibana_home.png" alt></p><p>查看<code>applog</code>索引库</p><p><img src="Kibana_Index_Management.png" alt></p><p>添加<code>applog</code> <code>Index Pattern</code></p><p><img src="Kibana_Index_pattern.png" alt></p><p>不使用时间过滤器。</p><p><img src="Kibana_Index_Pattern_filter.png" alt></p><p>搜索调用<code>selectProductList</code>相关接口日志</p><p><img src="Kibana_Analytics_Discover.png" alt></p><p><img src="Kibana_Analytics_selectProductList.png" alt></p><p>至此 Sleuth 链路追踪所有的知识点就学习结束了。</p><hr><p>参考：</p><p><a href="https://mrhelloworld.com/sleuth/" target="_blank" rel="noopener">Spring Cloud 系列之 Sleuth 链路追踪 - 哈喽沃德先生 (mrhelloworld.com)</a></p><p><a href="https://www.jianshu.com/p/92a12de11f18" target="_blank" rel="noopener">☆全链路监控（一）：方案概述与比较 - 简书 (jianshu.com)</a></p><p><a href="https://www.cnblogs.com/pingyeaa/p/10987438.html" target="_blank" rel="noopener">微服务链路追踪原理 - 平也 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.iteye.com/blog/manzhizhen-2347153" target="_blank" rel="noopener">分布式跟踪系统（二）：Zipkin的Span模型 - 大步流星 - ITeye博客</a></p><p><a href="https://sq.sf.163.com/blog/article/227552384930988032" target="_blank" rel="noopener">zipkin-社区博客-网易数帆 (163.com)</a></p><p><a href="https://www.jianshu.com/p/75e9b3f62e1e" target="_blank" rel="noopener">SpringCloud–Zipkin链路跟踪(十四) - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/redrose2100/article/details/124874713" target="_blank" rel="noopener">ElasticStack—-使用Docker方式安装单节点的8.1.3版本的ElasticSearch_redrose2100的博客-CSDN博客_docker elasticserch</a></p><p><a href="https://blog.csdn.net/zhiyikeji/article/details/123232198" target="_blank" rel="noopener">docker安装elasticsearch_ZNineSun的博客-CSDN博客_docker安装elasticsearch</a></p><p><a href="https://www.cnblogs.com/killer21/p/12061388.html" target="_blank" rel="noopener">ElasticSearch-head 操作时，报 406错误码 - killer21 - 博客园 (cnblogs.com)</a></p><p><strong>Description:</strong><br>Why not provide examples of docker run for Logstash, for example ElasticSearch and Kibana have examples for docker run.</p><p><strong>URL:</strong><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">Install Elasticsearch with Docker</a><br><a href="https://www.elastic.co/guide/en/logstash/current/docker.html" target="_blank" rel="noopener">Install Logstash with Docker</a><br><a href="https://www.elastic.co/guide/en/kibana/current/docker.html" target="_blank" rel="noopener">Install Kibana with Docker</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="https://10veU.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/tags/Spring-Cloud/"/>
    
      <category term="链路追踪" scheme="https://10veU.github.io/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程（二） 共享模型之管程</title>
    <link href="https://10veU.github.io/2022/05/31/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E7%AE%A1%E7%A8%8B/"/>
    <id>https://10veU.github.io/2022/05/31/Java并发编程（二）-共享模型之管程/</id>
    <published>2022-05-31T10:55:29.000Z</published>
    <updated>2022-06-17T05:59:24.258Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java并发编程（二）-共享模型之管程"><a href="#Java并发编程（二）-共享模型之管程" class="headerlink" title="Java并发编程（二） 共享模型之管程"></a>Java并发编程（二） 共享模型之管程</h1><h2 id="1-线程安全问题"><a href="#1-线程安全问题" class="headerlink" title="1. 线程安全问题"></a>1. 线程安全问题</h2><blockquote><p>两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，结果是 0 吗？  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadContextSwitchTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadContextSwitchTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counter--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">"counter = &#123;&#125;"</span>,counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><ul><li>负数  </li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">05</span>:<span class="number">34</span> [main] c.ThreadContextSwitchTest - counter = -<span class="number">867</span></span><br></pre></td></tr></table></figure><ul><li>正数  </li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">52</span> [main] c.ThreadContextSwitchTest - counter = <span class="number">775</span></span><br></pre></td></tr></table></figure><ul><li>0  </li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">34</span> [main] c.ThreadContextSwitchTest - counter = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="1-1-原因分析"><a href="#1-1-原因分析" class="headerlink" title="1.1 原因分析"></a>1.1 原因分析</h3><p>以上的结果可能是正数、负数、零。为什么呢？因为 Java 中对静态变量的自增，自减并不是原子操作，要彻底理<br>解，必须从字节码来进行分析<br>例如对于 i++ 而言（i 为静态变量），实际会产生如下的 JVM 字节码指令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GETSTATIC com/java/demo/monitor/ThreadContextSwitchTest.counter : I</span><br><span class="line">    ICONST_1</span><br><span class="line">    IADD</span><br><span class="line">    PUTSTATIC com/java/demo/monitor/ThreadContextSwitchTest.counter : I</span><br></pre></td></tr></table></figure><p>而对应 i– 也是类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GETSTATIC com/java/demo/monitor/ThreadContextSwitchTest.counter : I</span><br><span class="line">    ICONST_1</span><br><span class="line">    ISUB</span><br><span class="line">    PUTSTATIC com/java/demo/monitor/ThreadContextSwitchTest.counter : I</span><br></pre></td></tr></table></figure><p>而 Java 的内存模型如下，完成静态变量的自增，自减需要在主存和工作内存中进行数据交换：<br><img src="%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.png" alt="线程安全问题"><br>如果是单线程以上 8 行代码是顺序执行（不会交错）没有问题：<br><img src="%E6%AD%A3%E5%B8%B8.png" alt="正常情况"><br>但多线程下这 8 行代码可能交错运行：<br>出现负数的情况：<br><img src="%E8%B4%9F%E6%95%B0.png" alt="负数情况"><br>出现正数的情况：<br><img src="%E6%AD%A3%E6%95%B0.png" alt="正数情况"></p><h3 id="1-2-临界区-Critical-Section"><a href="#1-2-临界区-Critical-Section" class="headerlink" title="1.2 临界区 (Critical Section)"></a>1.2 临界区 (Critical Section)</h3><ul><li>一个程序运行多个线程本身是没有问题的</li><li>问题出在多个线程访问<strong>共享资源</strong>  <ul><li>多个线程读<strong>共享资源</strong>其实也没有问题  </li><li>在多个线程对<strong>共享资源</strong>读写操作时发生指令交错，就会出现问题</li></ul></li><li>一段代码块内如果存在对<strong>共享资源</strong>的多线程读写操作，称这段代码块为<strong>临界区</strong><br>例如，下面代码中的临界区  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 临界区</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 临界区</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> counter--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-竞态条件-Race-Condition"><a href="#1-3-竞态条件-Race-Condition" class="headerlink" title="1.3 竞态条件 (Race Condition)"></a>1.3 竞态条件 (Race Condition)</h3><p>多个线程在<strong>临界区</strong>内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了<strong>竞态条件</strong>  </p><h2 id="2-synchronized解决方案"><a href="#2-synchronized解决方案" class="headerlink" title="2. synchronized解决方案"></a>2. synchronized解决方案</h2><p>为了避免临界区的竞态条件发生，有多种手段可以达到目的。</p><ul><li>阻塞式的解决方案：synchronized，Lock</li><li>非阻塞式的解决方案：原子变量<br>下面介绍阻塞式的解决方案：<strong>synchronized</strong>，来解决上述问题，即俗称的<strong>对象锁</strong>，它采用<strong>互斥</strong>的方式让同一<br>时刻至多只有一个线程能持有<strong>对象锁</strong>，其它线程再想获取这个<strong>对象锁</strong>时就会<strong>阻塞</strong>住。这样就能保证拥有锁的线程可以安全的执行临界区内的代码，不用担心<strong>线程上下文切换</strong>。</li></ul><blockquote><p><strong>注意</strong><br>虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的：  </p></blockquote><ul><li><strong>互斥</strong>是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</li><li><strong>同步</strong>是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点  </li></ul><h3 id="2-1-synchronized"><a href="#2-1-synchronized" class="headerlink" title="2.1 synchronized"></a>2.1 synchronized</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) <span class="comment">// 线程1， 线程2(blocked)</span></span><br><span class="line">&#123;</span><br><span class="line"> 临界区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.SynchronizedTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                    counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                    counter--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        </span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        </span><br><span class="line">        log.debug(<span class="string">"counter = &#123;&#125;"</span>,counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次运行，执行结果都是0  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>:<span class="number">03</span>:<span class="number">43</span> [main] c.SynchronizedTest - counter = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>用图来表示<br><img src="%E5%9B%BE%E8%A7%A3.png" alt="图解">  </p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p><code>synchronized</code> 实际是用<strong>对象锁</strong>保证了<strong>临界区内代码的原子性</strong>，临界区内的代码对外是不可分割的，不会被线程切换所打断。<br>为了加深理解，请思考下面的问题</p><ul><li>如果把 synchronized(obj) 放在 for 循环的外面，如何理解？– 原子性</li><li>如果 t1 synchronized(obj1) 而 t2 synchronized(obj2) 会怎样运作？– 锁对象</li><li>如果 t1 synchronized(obj) 而 t2 没有加会怎么样？如何理解？– 锁对象</li></ul><h4 id="面向对象改进"><a href="#面向对象改进" class="headerlink" title="面向对象改进"></a>面向对象改进</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.SynchronizedTest01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CounterLock counterLock = <span class="keyword">new</span> CounterLock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counterLock.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counterLock.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">"counter = &#123;&#125;"</span>,counterLock.getCounter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterLock</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            counter--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCounter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> counter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-方法上的synchornized"><a href="#3-方法上的synchornized" class="headerlink" title="3.方法上的synchornized"></a>3.方法上的synchornized</h2><h3 id="synchornized加在成员方法上"><a href="#synchornized加在成员方法上" class="headerlink" title="synchornized加在成员方法上"></a>synchornized加在成员方法上</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="synchornized加在静态方法上"><a href="#synchornized加在静态方法上" class="headerlink" title="synchornized加在静态方法上"></a>synchornized加在静态方法上</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span>(Test.class) &#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不加-synchronized-的方法"><a href="#不加-synchronized-的方法" class="headerlink" title="不加 synchronized 的方法"></a>不加 synchronized 的方法</h3><p>不加 synchronzied 的方法就好比不遵守规则的人，不去老实排队（好比翻窗户进去的）</p><h3 id="所谓的“线程八锁”"><a href="#所谓的“线程八锁”" class="headerlink" title="所谓的“线程八锁”"></a>所谓的“线程八锁”</h3><p>其实就是考察 synchronized 锁住的是哪个对象</p><ul><li>情况1：输出结果为<code>1 2或者2 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Number"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Number n1 = <span class="keyword">new</span> Number();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.a();&#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.b();&#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>情况2：输出结果为<code>1s后1 2</code>或者为<code>2 1s后 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Number"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>情况3：输出结果为<code>3 1s后 1 2</code>或<code>2 3 1s后 1</code>或<code>3 2 1s后 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Number"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Number n1 = <span class="keyword">new</span> Number();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.a();&#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.b();&#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.c();&#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>情况4: 输出结果为<code>2 1s后 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Number"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Number n1 = <span class="keyword">new</span> Number();</span><br><span class="line">        Number n2 = <span class="keyword">new</span> Number();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.a();&#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n2.b();&#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>情况5：输出结果为<code>2 1s后 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Number"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Number n1 = <span class="keyword">new</span> Number();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.a();&#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.b();&#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>情况6：输出结果为<code>1s后 1 2</code>或<code>2 1s后 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Number"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>情况7：输出结果为<code>2 1s后 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Number"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Number n1 = <span class="keyword">new</span> Number();</span><br><span class="line">        Number n2 = <span class="keyword">new</span> Number();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.a();&#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n2.b();&#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>情况8：输出结果为<code>1s后 1 2</code>或<code>2 1s后 1</code>  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Number"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Number n1 = <span class="keyword">new</span> Number();</span><br><span class="line">        Number n2 = <span class="keyword">new</span> Number();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n1.a();&#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; log.debug(<span class="string">"begin..."</span>); n2.b();&#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-变量的线程安全分析"><a href="#4-变量的线程安全分析" class="headerlink" title="4. 变量的线程安全分析"></a>4. 变量的线程安全分析</h2><h3 id="4-1-成员变量和静态变量是否线程安全？"><a href="#4-1-成员变量和静态变量是否线程安全？" class="headerlink" title="4.1 成员变量和静态变量是否线程安全？"></a>4.1 成员变量和静态变量是否线程安全？</h3><ul><li>如果它们没有共享，则线程安全</li><li>如果它们被共享了，根据它们的状态是否能够改变，又分两种情况:<br>&nbsp;&nbsp;&nbsp;&nbsp;1. 如果只有读操作，则线程安全<br>&nbsp;&nbsp;&nbsp;&nbsp;2. 如果有读写操作，则这段代码是临界区，需要考虑线程安全</li></ul><h3 id="4-2-局部变量是否线程安全？"><a href="#4-2-局部变量是否线程安全？" class="headerlink" title="4.2 局部变量是否线程安全？"></a>4.2 局部变量是否线程安全？</h3><ul><li>局部变量是线程安全的</li><li>但局部变量引用的对象则未必<br>&nbsp;&nbsp;&nbsp;&nbsp;1. 如果该对象没有逃离方法的作用访问，它是线程安全的<br>&nbsp;&nbsp;&nbsp;&nbsp;2. 如果该对象逃离方法的作用范围，需要考虑线程安全</li></ul><h3 id="4-3-局部变量线程安全分析"><a href="#4-3-局部变量线程安全分析" class="headerlink" title="4.3 局部变量线程安全分析"></a>4.3 局部变量线程安全分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>每个线程</strong>调用 test1() 方法时<strong>局部变量</strong> i，<strong>会在每个线程的栈帧内存中被创建多份，因此不存在共享</strong><br>test1()编译之后产生的JVM字节码指令：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> bipush <span class="number">10</span></span><br><span class="line"><span class="number">2</span> istore_0</span><br><span class="line"><span class="number">3</span> iinc <span class="number">0</span> by <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>如图<br><img src="%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90.png" alt="局部变量线程安全分析">  </p><h4 id="局部变量引用的对象线程安全分析"><a href="#局部变量引用的对象线程安全分析" class="headerlink" title="局部变量引用的对象线程安全分析"></a>局部变量引用的对象线程安全分析</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalVariableTest03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> THREAD_NUM = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOOP_NUM = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadUnSafe threadUnSafe = <span class="keyword">new</span> ThreadUnSafe();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUM; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                threadUnSafe.operation(LOOP_NUM);</span><br><span class="line">            &#125;,<span class="string">"t"</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadUnSafe"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadUnSafe</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> loopNum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            add();</span><br><span class="line">            remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：  </p><ul><li>无论哪个线程中的 add 引用的都是同一个对象中的 list 成员变量</li><li>add与remove的分析相同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    list.add(<span class="string">"1"</span>);        <span class="comment">// 时间1. 会让内部 size ++</span></span><br><span class="line">    list.remove(<span class="number">0</span>); <span class="comment">// 时间3. 再次 remove size-- 出现角标越界</span></span><br><span class="line">&#125;, <span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    list.add(<span class="string">"2"</span>);        <span class="comment">// 时间1（并发发生）. 会让内部 size ++，但由于size的操作非原子性,  size 本该是2，但结果可能出现1</span></span><br><span class="line">    list.remove(<span class="number">0</span>); <span class="comment">// 时间2. 第一次 remove 能成功, 这时 size 已经是0</span></span><br><span class="line">&#125;, <span class="string">"t2"</span>).start();</span><br></pre></td></tr></table></figure><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><blockquote><p>将list修改为局部变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 局部变量引用之局部变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalVariableTest04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> THREAD_NUM = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOOP_NUM = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadSafe threadSafe = <span class="keyword">new</span> ThreadSafe();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUM; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                threadSafe.operation(LOOP_NUM);</span><br><span class="line">            &#125;,<span class="string">"t"</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadSafe"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> loopNum)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            add(list);</span><br><span class="line">            remove(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就不会出现线程不安全的问题。<br>分析：  </p><ul><li><code>list</code> 是局部变量，每个线程调用时会创建其不同实例，没有共享</li><li>而 <code>add</code> 的参数是从 <code>operation</code> 中传递过来的，与 <code>operation</code> 中引用同一个对象</li><li><code>add</code> 的参数分析与 <code>remove</code> 相同  </li></ul><h5 id="方法访问修饰符带来的线程安全问题"><a href="#方法访问修饰符带来的线程安全问题" class="headerlink" title="方法访问修饰符带来的线程安全问题"></a>方法访问修饰符带来的线程安全问题</h5><p>如果把 <code>add</code> 和 <code>remove</code> 的方法修改为 <code>public</code> 会不会代理线程安全问题？</p><ul><li>情况1：将<code>add</code>和<code>remove</code>的方法全部修改为<code>public</code>,其他线程调<code>operation()</code>方法</li><li>在 <code>情况1</code> 的基础上，为 <code>ThreadSafe01</code> 类添加子类，子类覆盖 <code>add</code> 或 <code>remove</code> 方法，即</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 局部变量引用之暴漏引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalVariableTest05</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> THREAD_NUM = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOOP_NUM = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadSafe01 threadSafe = <span class="keyword">new</span> ThreadSafeSub();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUM; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                threadSafe.operation(LOOP_NUM);</span><br><span class="line">            &#125;,<span class="string">"t"</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadSafe01"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe01</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> loopNum)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            add(list);</span><br><span class="line">            remove(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeSub</span> <span class="keyword">extends</span> <span class="title">ThreadSafe01</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            list.remove(<span class="number">0</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法改进：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法修饰符改进</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalVariableTest06</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> THREAD_NUM = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOOP_NUM = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadSafe02 threadSafe = <span class="keyword">new</span> ThreadSafe02();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUM; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                threadSafe.operation(LOOP_NUM);</span><br><span class="line">            &#125;,<span class="string">"t"</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadSafe02"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe02</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> loopNum)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            add(list);</span><br><span class="line">            remove(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>从这个例子可以看出 private 或 final 提供<strong>安全</strong>的意义所在，请体会开闭原则中的<strong>闭</strong></p></blockquote><h3 id="4-4-常见线程安全类"><a href="#4-4-常见线程安全类" class="headerlink" title="4.4 常见线程安全类"></a>4.4 常见线程安全类</h3><ul><li>String</li><li>Integer</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>HashTable</li><li>java.util.concurrent包下的类</li></ul><p>这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常见线程安全类举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.HashTableTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Hashtable&lt;Integer,Integer&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">                hashtable.put(<span class="keyword">new</span> Integer(i), i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">50000</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                hashtable.put(<span class="keyword">new</span> Integer(i), i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"hashtable size is &#123;&#125;"</span>,hashtable.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>它们的每个方法是原子的  </li><li>但注意它们多个方法的组合不是原子的(见后面分析),如下：</li></ul><h4 id="线程安全类方法的组合"><a href="#线程安全类方法的组合" class="headerlink" title="线程安全类方法的组合"></a>线程安全类方法的组合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程安全类的原子方法的组合不是原子的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.HashTableTest01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTableTest01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Hashtable&lt;Integer,Integer&gt; hashtable = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                operate(i,hashtable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                operate(i,hashtable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"hashtable size = &#123;&#125; "</span>,hashtable.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> i,Hashtable&lt;Integer,Integer&gt; hashtable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (HashTableTest01.class)&#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.get(i) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                hashtable.put(i, i);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                hashtable.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不可变类线程的安全性"><a href="#不可变类线程的安全性" class="headerlink" title="不可变类线程的安全性"></a>不可变类线程的安全性</h4><p>String、Integer 等都是不可变类，因为其内部的状态不可以改变，因此它们的方法都是线程安全的</p><blockquote><p>有同学或许有疑问，<code>String</code> 有 <code>replace</code>，<code>substring</code> 等方法<strong>可以</strong>改变值啊，那么这些方法又是如何保证线程安全的呢？<br>以<code>String</code>的<code>substring</code>方法为例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> subLen = value.length - beginIndex;</span><br><span class="line">       <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> (beginIndex == <span class="number">0</span>) ? <span class="keyword">this</span> : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>源码中存在一些方法，调用后可以得到改变后的值（<code>replace，replaceAll，toLowerCase</code>等）；通过源码可以知道，这些值表面上改变了，实际上方法内部创建了一个新的<code>String</code>对象并把这些对象重新赋值给当前的引用。</p><h3 id="4-5-线程安全案例分析"><a href="#4-5-线程安全案例分析" class="headerlink" title="4.5 线程安全案例分析"></a>4.5 线程安全案例分析</h3><ul><li>案例1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全？ 不安全</span></span><br><span class="line"> Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> <span class="comment">// 是否安全？ 不可变类安全</span></span><br><span class="line"> String S1 = <span class="string">"..."</span>;</span><br><span class="line"> <span class="comment">// 是否安全？ 安全</span></span><br><span class="line"> <span class="keyword">final</span> String S2 = <span class="string">"..."</span>;</span><br><span class="line"> <span class="comment">// 是否安全？ 不安全</span></span><br><span class="line"> Date D1 = <span class="keyword">new</span> Date();</span><br><span class="line"> <span class="comment">// 是否安全？ 不安全 属性可以修改</span></span><br><span class="line"> <span class="keyword">final</span> Date D2 = <span class="keyword">new</span> Date();</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 使用上述变量</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全？ 不安全 </span></span><br><span class="line"> <span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"> userService.update(...);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 记录调用次数</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"> count++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例3</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全？不安全 单例被共享</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> start = <span class="number">0L</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Before</span>(<span class="string">"execution(* *(..))"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> start = System.nanoTime();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@After</span>(<span class="string">"execution(* *(..))"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line"> System.out.println(<span class="string">"cost time:"</span> + (end-start));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例4</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全  安全</span></span><br><span class="line"> <span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"> userService.update(...);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全  安全 没有成员变量</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> userDao.update();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> String sql = <span class="string">"update user set password = ? where username = ?"</span>;</span><br><span class="line"> <span class="comment">// 是否安全  安全 局部变量</span></span><br><span class="line"> <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>))&#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例5</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全 安全</span></span><br><span class="line"> <span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"> userService.update(...);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全 安全</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> userDao.update();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全 不安全</span></span><br><span class="line"> <span class="keyword">private</span> Connection conn = <span class="keyword">null</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"> String sql = <span class="string">"update user set password = ? where username = ?"</span>;</span><br><span class="line"> conn = DriverManager.getConnection(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"> conn.close();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例6</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全 安全</span></span><br><span class="line"> <span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"> userService.update(...);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"> userDao.update();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全 安全</span></span><br><span class="line"> <span class="keyword">private</span> Connection = <span class="keyword">null</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"> String sql = <span class="string">"update user set password = ? where username = ?"</span>;</span><br><span class="line"> conn = DriverManager.getConnection(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"> conn.close();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例7</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 是否安全 不安全</span></span><br><span class="line"> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"> foo(sdf);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="title">foo</span><span class="params">(SimpleDateFormat sdf)</span></span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">new</span> Test().bar();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 foo 的行为是不确定的，可能导致不安全的发生，被称之为外星方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(SimpleDateFormat sdf)</span> </span>&#123;</span><br><span class="line"> String dateStr = <span class="string">"1999-10-11 00:00:00"</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line"> <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> sdf.parse(dateStr);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;).start();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请比较 JDK 中 String 类的实现</p><ul><li>案例8</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"> List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line"> Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5000</span>; k++) &#123;</span><br><span class="line"> <span class="keyword">synchronized</span> (i) &#123;</span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, <span class="string">""</span> + j);</span><br><span class="line"> list.add(thread);</span><br><span class="line"> &#125;</span><br><span class="line"> list.stream().forEach(t -&gt; t.start());</span><br><span class="line"> list.stream().forEach(t -&gt; &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> t.join();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> log.debug(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-习题"><a href="#5-习题" class="headerlink" title="5. 习题"></a>5. 习题</h2><h3 id="卖票练习"><a href="#卖票练习" class="headerlink" title="卖票练习"></a>卖票练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ExerciseSell"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerciseSell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟多人买票</span></span><br><span class="line">        <span class="comment">// 1. 创建售票窗口</span></span><br><span class="line">        TicketWindow ticketWindow = <span class="keyword">new</span> TicketWindow(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 线程集合</span></span><br><span class="line">        List&lt;Thread&gt; threadList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 记录卖出的票数</span></span><br><span class="line">        List&lt;Integer&gt; amountList = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="comment">// 2. 多人去买票</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 买票</span></span><br><span class="line">                <span class="keyword">int</span> amount = ticketWindow.sell(randomAmount());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(randomAmount());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                amountList.add(amount);</span><br><span class="line">            &#125;, <span class="string">"买家"</span> + i);</span><br><span class="line">            <span class="comment">// 线程启动添加到线程集合</span></span><br><span class="line">            threadList.add(thread);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待所有线程执行完毕</span></span><br><span class="line">        <span class="keyword">for</span> (Thread thread: threadList) &#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计卖出的票和剩余的票</span></span><br><span class="line">        log.debug(<span class="string">"卖票：&#123;&#125; 张"</span>,amountList.stream().mapToInt(i-&gt;i).sum());</span><br><span class="line">        log.debug(<span class="string">"余票：&#123;&#125; 张"</span>,ticketWindow.getCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Random为线程安全</span></span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="comment">// 随机1——5</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randomAmount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketWindow</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicketWindow</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取余票数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 售票</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">sell</span><span class="params">(<span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.count &gt;= amount)&#123;</span><br><span class="line">            <span class="keyword">this</span>.count -= amount;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转账练习"><a href="#转账练习" class="headerlink" title="转账练习"></a>转账练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ExerciseTransfer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerciseTransfer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建账户</span></span><br><span class="line">        Account account1 = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line">        Account account2 = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转账</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                account1.transfer(account2, randomAmount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"account1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                account2.transfer(account1, randomAmount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"account2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看转账2000次后的账户总金额</span></span><br><span class="line">        log.debug(<span class="string">"total = &#123;&#125;"</span>,account1.getMoney() + account2.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Random为线程安全</span></span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="comment">// 随机1——100</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randomAmount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户余额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转账</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Account target,<span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Account.class)&#123; <span class="comment">// 此处不可使用this,因为涉及两个账户的成员变量money的加锁，使用this只是对当前对象加锁</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.money &gt;= amount)&#123;</span><br><span class="line">                <span class="keyword">this</span>.setMoney(<span class="keyword">this</span>.getMoney() - amount);</span><br><span class="line">                target.setMoney(target.getMoney() + amount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Monitor-概念"><a href="#6-Monitor-概念" class="headerlink" title="6. Monitor 概念"></a>6. Monitor 概念</h2><h3 id="6-1-Java对象头"><a href="#6-1-Java对象头" class="headerlink" title="6.1 Java对象头"></a>6.1 Java对象头</h3><blockquote><p>此部分基于<code>JDK8</code>进行描述的。   </p></blockquote><p>对象在内存中的存储布局分为 3 块区域：<strong>对象头（Header）</strong>、<strong>实例数据（Instance Data）</strong>和<strong>对齐填充（Padding）</strong>。<br>使用<a href="https://openjdk.java.net/projects/code-tools/jol/" target="_blank" rel="noopener">jol</a>获取对象布局的总体结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectHeaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        L l = <span class="keyword">new</span> L();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(l).toPrintable());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">L</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">com.java.demo.monitor.L object internals:</span><br><span class="line"> OFFSET  SIZE      <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>           (object header)   //markword              <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000001</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">1</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>           (object header)   //markword              <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>           (object header)  //klass pointer 类元数据  <span class="number">43</span> c1 <span class="number">00</span> f8 (<span class="number">01000011</span> <span class="number">11000001</span> <span class="number">00000000</span> <span class="number">11111000</span>) (-<span class="number">134168253</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>       int L.count                                   <span class="number">1</span></span><br><span class="line">     <span class="number">16</span>     <span class="number">1</span>   boolean L.flag                                    true  // Instance Data 对象实际的数据</span><br><span class="line">     <span class="number">17</span>     <span class="number">7</span>           (loss due to the next object alignment)         //Padding 对齐填充数据</span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">7</span> bytes external = <span class="number">7</span> bytes total</span><br></pre></td></tr></table></figure><ul><li><code>OFFSET</code> 偏移地址，单位字节； </li><li><code>SIZE</code> 占用的内存大小，单位字节； </li><li><code>TYPE DESCRIPTION</code> 类型描述，其中<code>object header</code>为对象头；</li><li><code>VALUE</code> 对应内存中当前存储的值；</li></ul><p>根据对象头的格式，前8个字节为mark word（在64位JVM下）。<br>由于希望用尽可能少的二进制位表示尽可能多的信息，所以设置了lock标记。该标记的值不同，整个mark word表示的含义不同。<br>通过倒数三位数 我们可以判断出锁的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;  locked_value                 = <span class="number">0</span>, <span class="comment">// 0 00 轻量级锁</span></span><br><span class="line">         unlocked_value           = <span class="number">1</span>,<span class="comment">// 0 01 无锁</span></span><br><span class="line">         monitor_value            = <span class="number">2</span>,<span class="comment">// 0 10 重量级锁</span></span><br><span class="line">         marked_value             = <span class="number">3</span>,<span class="comment">// 0 11 gc标志</span></span><br><span class="line">         biased_lock_pattern      = <span class="number">5</span> <span class="comment">// 1 01 偏向锁</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>HotSpot采用<a href="https://www.zhihu.com/search?hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%22104494807%22%7D&hybrid_search_source=Entity&q=Oop-Klass%E6%A8%A1%E5%9E%8B&search_source=Entity&type=content" target="_blank" rel="noopener">Oop-Klass</a>模型来表示Java对象，其中Klass对应着Java对象的类型（Class），而Oop则对应着Java对象的实例（Instance）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/src/share/vm/oops/oop.hpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">oopDesc</span> &#123;</span></span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// 用于存储对象的运行时记录信息，如哈希值、GC分代年龄、锁状态等</span></span><br><span class="line">  <span class="keyword">volatile</span> markOop  _mark;</span><br><span class="line">  <span class="comment">// Klass指针的联合体，指向当前对象所属的Klass对象</span></span><br><span class="line">  <span class="keyword">union</span> _metadata &#123;</span><br><span class="line">    <span class="comment">// 未采用指针压缩技术时使用</span></span><br><span class="line">    Klass*      _klass;</span><br><span class="line">    <span class="comment">// 采用指针压缩技术时使用</span></span><br><span class="line">    narrowKlass _compressed_klass;</span><br><span class="line">  &#125; _metadata;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/oops/oop.hpp" target="_blank" rel="noopener">查看源码</a>  </li></ul><p>整个对象头由两个部分组成，即：<code>klass pointer</code>和<code>mark word</code>（<code>_mark</code>和<code>_metadata</code>被称为<strong>对象头</strong>）。其中前者存储对象的运行时记录信息；后者是一个指针，指向当前对象所属的Klass对象。  </p><ul><li>普通对象<br><img src="%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E5%A4%B4.png" alt="普通对象头">  </li><li>数组对象<br><img src="%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1.png" alt="数组对象"></li></ul><h4 id="klass-pointer"><a href="#klass-pointer" class="headerlink" title="klass pointer"></a>klass pointer</h4><ul><li><code>klass pointer</code>一般占<code>32bit</code>即<code>4</code>个字节，如果你有足够的原因关闭默认的指针压缩，即启动参数加上了<code>-XX:-UseCompressedOops</code>那么它就<code>64bit</code>。  </li><li><code>klass pointer</code>的存储内容是一个指针，指向了其类元数据的信息，<code>jvm</code>使用该指针来确定此对象是类的哪个实例.  </li></ul><p><img src="klassponiter.png" alt="klass poniter"></p><h4 id="mark-word"><a href="#mark-word" class="headerlink" title="mark word"></a>mark word</h4><p><code>mark word</code>主要用来存储对象自身的运行时数据，如<code>hashcode</code>、<code>gc</code>分代年龄等。<code>mark word</code>的位长度为<code>JVM</code>的一个<code>Word</code>大小，也就是说<code>32</code>位<code>JVM</code>的<code>Mark word</code>为<code>32</code>位，<code>64</code>位<code>JVM</code>为<code>64</code>位。<br><img src="32bit_mark_word.png" alt="32bit mark word"><br><img src="64bit_mark_word.png" alt="64bit_mark_word"> </p><ul><li><code>unsed</code>  未使用的</li><li><code>hashcode</code>  指<code>identity hashcode</code>。<code>identityHashCode</code>是<code>System</code>里面提供的本地方法，<code>identityHashCode</code>会返回对象的<code>hashCode</code>，而不管对象是否重写了<code>hashCode</code>方法。</li><li><code>thread</code>  偏向锁记录的线程标识  </li><li><code>epoch</code>  验证偏向锁有效性的时间戳</li><li><code>age</code>  分代年龄</li><li><code>biased_lock</code>  偏向锁标志</li><li><code>lock</code>  锁标志</li><li><code>pointer_to_lock_record</code>  轻量锁<code>lock record</code>指针  </li><li><code>pointer_to_heavyweight_monitor</code>  重量锁<code>monitor</code>指针</li></ul><h3 id="6-2-原理-之-Monitor-锁"><a href="#6-2-原理-之-Monitor-锁" class="headerlink" title="6.2 原理 之 Monitor(锁)"></a>6.2 原理 之 Monitor(锁)</h3><p><code>Monitor</code> 被翻译为<strong>监视器</strong>或<strong>管程</strong><br>每个 <code>Java</code> 对象都可以关联一个 <code>Monitor</code> 对象，如果使用 <code>synchronized</code> 给对象上锁（重量级）之后，该对象头的<br><code>Mark Word</code> 中就被设置指向 <code>Monitor</code> 对象的指针。<br><code>Monitor</code> 结构如下<br><img src="Monitor.png" alt="Monitor">  </p><ul><li>刚开始 <code>Monitor</code> 中 <code>Owner</code> 为 <code>null</code>  </li><li>当 <code>Thread-2</code> 执行 <code>synchronized(obj)</code> 就会将 <code>Monitor</code> 的所有者 <code>Owner</code> 置为 <code>Thread-2</code>，<code>Monitor</code>中只能有一<br>个 <code>Owner</code>  </li><li>在 <code>Thread-2</code> 上锁的过程中，如果 <code>Thread-3</code>，<code>Thread-4</code>，<code>Thread-5</code> 也来执行 <code>synchronized(obj)</code>，就会进入<br><code>EntryList BLOCKED</code>  </li><li><code>Thread-2</code> 执行完同步代码块的内容，然后唤醒 <code>EntryList</code> 中等待的线程来竞争锁，竞争的时是非公平的  </li><li>图中 <code>WaitSet</code> 中的 <code>Thread-0</code>，<code>Thread-1</code> 是之前获得过锁，但条件不满足进入 <code>WAITING</code> 状态的线程，后面讲<br><code>wait-notify</code> 时会分析  </li></ul><blockquote><p><strong>注意</strong></p><ul><li>synchronized 必须是进入同一个对象的 monitor 才有上述的效果  </li><li>不加 synchronized 的对象不会关联监视器，不遵从以上规则</li></ul></blockquote><h3 id="6-3-原理-之-synchronized"><a href="#6-3-原理-之-synchronized" class="headerlink" title="6.3 原理 之 synchronized"></a>6.3 原理 之 synchronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对应字节码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line"> descriptor: ([Ljava/lang/String;)V</span><br><span class="line"> flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"> Code:</span><br><span class="line"> stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line"> 0: getstatic #2 // &lt;- lock引用 （synchronized开始）</span><br><span class="line"> <span class="number">3</span>: dup</span><br><span class="line"> <span class="number">4</span>: astore_1 <span class="comment">// lock引用 -&gt; slot 1</span></span><br><span class="line"> <span class="number">5</span>: monitorenter <span class="comment">// 将 lock对象 MarkWord 置为 Monitor 指针</span></span><br><span class="line"> 6: getstatic #3 // &lt;- i</span><br><span class="line"> <span class="number">9</span>: iconst_1 <span class="comment">// 准备常数 1</span></span><br><span class="line"> <span class="number">10</span>: iadd <span class="comment">// +1</span></span><br><span class="line"> 11: putstatic #3 // -&gt; i</span><br><span class="line"> <span class="number">14</span>: aload_1 <span class="comment">// &lt;- lock引用</span></span><br><span class="line"> <span class="number">15</span>: monitorexit <span class="comment">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class="line"> <span class="number">16</span>: goto <span class="number">24</span></span><br><span class="line"> <span class="number">19</span>: astore_2 <span class="comment">// e -&gt; slot 2 </span></span><br><span class="line"> <span class="number">20</span>: aload_1 <span class="comment">// &lt;- lock引用</span></span><br><span class="line"> <span class="number">21</span>: monitorexit <span class="comment">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class="line"> <span class="number">22</span>: aload_2 <span class="comment">// &lt;- slot 2 (e)</span></span><br><span class="line"> <span class="number">23</span>: athrow <span class="comment">// throw e</span></span><br><span class="line"> <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line"> Exception table:</span><br><span class="line"> from to target type</span><br><span class="line"> <span class="number">6</span> <span class="number">16</span> <span class="number">19</span> any</span><br><span class="line"> <span class="number">19</span> <span class="number">22</span> <span class="number">19</span> any</span><br><span class="line"> LineNumberTable:</span><br><span class="line"> line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line"> line <span class="number">9</span>: <span class="number">6</span></span><br><span class="line"> line <span class="number">10</span>: <span class="number">14</span></span><br><span class="line"> line <span class="number">11</span>: <span class="number">24</span></span><br><span class="line"> LocalVariableTable:</span><br><span class="line"> Start Length Slot Name Signature</span><br><span class="line"> <span class="number">0</span> <span class="number">25</span> <span class="number">0</span> args [Ljava/lang/String;</span><br><span class="line"> StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line"> frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line"> offset_delta = <span class="number">19</span></span><br><span class="line"> locals = [ class "[Ljava/lang/String;", class java/lang/Object ]</span><br><span class="line"> stack = [ class java/lang/Throwable ]</span><br><span class="line"> frame_type = <span class="number">250</span> <span class="comment">/* chop */</span></span><br><span class="line"> offset_delta = <span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>注意<br>方法级别的 synchronized 不会在字节码指令中有所体现</p></blockquote><h3 id="6-4-原理-之-synchronized进阶"><a href="#6-4-原理-之-synchronized进阶" class="headerlink" title="6.4 原理 之 synchronized进阶"></a>6.4 原理 之 synchronized进阶</h3><h4 id="6-4-1-轻量级锁"><a href="#6-4-1-轻量级锁" class="headerlink" title="6.4.1 轻量级锁"></a>6.4.1 轻量级锁</h4><p>轻量级锁的使用场景  </p><blockquote><p>如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以<br>使用轻量级锁来优化。  </p></blockquote><p><strong>轻量级锁</strong>对使用者是透明的，即语法仍然是 <code>synchronized</code>。<br>假设有两个方法同步块，利用同一个对象加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">            <span class="comment">// 同步块 A</span></span><br><span class="line">            method2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">            <span class="comment">// 同步块 B</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png" alt="轻量级锁"></p><h4 id="6-4-2-锁膨胀"><a href="#6-4-2-锁膨胀" class="headerlink" title="6.4.2 锁膨胀"></a>6.4.2 锁膨胀</h4><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有<br>竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%E9%94%81%E8%86%A8%E8%83%80.png" alt="锁膨胀"></p><h4 id="6-4-3-自旋优化"><a href="#6-4-3-自旋优化" class="headerlink" title="6.4.3 自旋优化"></a>6.4.3 自旋优化</h4><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步<br>块，释放了锁），这时当前线程就可以避免阻塞。</p><ul><li>自旋重试成功的情况</li></ul><table><thead><tr><th>线程1(core 1上)</th><th>对象Mark</th><th>线程2(core 2上)</th></tr></thead><tbody><tr><td>-</td><td>10（重量锁）</td><td>-</td></tr><tr><td>访问同步块，获取monitor</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>成功（加锁）</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>访问同步块，获取monitor</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td>执行完毕</td><td>10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td>成功（解锁）</td><td>10（无锁）</td><td>自旋重试</td></tr><tr><td>-</td><td>10（重量锁）重量锁指针</td><td>成功（加锁）</td></tr><tr><td>-</td><td>10（重量锁）重量锁指针</td><td>执行同步块</td></tr><tr><td>-</td><td>…</td><td>…</td></tr></tbody></table><ul><li>自旋重试失败的情况</li></ul><table><thead><tr><th>线程1(core 1上)</th><th>对象Mark</th><th>线程2(core 2上)</th></tr></thead><tbody><tr><td>-</td><td>10（重量锁）</td><td>-</td></tr><tr><td>访问同步块，获取monitor</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>成功（加锁）</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>访问同步块，获取monitor</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>阻塞</td></tr><tr><td>-</td><td>…</td><td>…</td></tr></tbody></table><p><strong>注意：</strong></p><blockquote><ul><li>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。  </li><li>在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。  </li><li>Java 7 之后不能控制是否开启自旋功能</li></ul></blockquote><h4 id="6-4-4-偏向锁"><a href="#6-4-4-偏向锁" class="headerlink" title="6.4.4 偏向锁"></a>6.4.4 偏向锁</h4><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。<br>Java 6 中引入了<strong>偏向锁</strong>来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 A</span></span><br><span class="line"> m2();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 B</span></span><br><span class="line"> m3();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">    <span class="comment">// 同步块 C</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%E5%81%8F%E5%90%91%E9%94%811.png" alt="偏向锁"> </p><p><img src="%E5%81%8F%E5%90%91%E9%94%812.png" alt="偏向锁">  </p><h5 id="偏向状态"><a href="#偏向状态" class="headerlink" title="偏向状态"></a>偏向状态</h5><p>对象头格式<br><img src="64bit_mark_word.png" alt="64bit"><br>一个对象创建时：</p><ul><li>如果开启了偏向锁（默认开启），那么对象创建后，<code>markword</code> 值为 <code>0x05</code> 即最后 <code>3</code> 位为 <code>101</code>，这时它的<code>thread</code>、<code>epoch</code>、<code>age</code> 都为 <code>0</code>   </li><li>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 <code>VM</code> 参数 <code>-XX:BiasedLockingStartupDelay=0</code> 来禁用延迟  </li><li>如果没有开启偏向锁，那么对象创建后，<code>markword</code> 值为 <code>0x01</code> 即最后 <code>3</code> 位为 <code>001</code>，这时它的 <code>hashcode</code>、<code>age</code> 都为 <code>0</code>，第一次用到 <code>hashcode</code> 时才会赋值</li></ul><h6 id="测试延迟特性"><a href="#测试延迟特性" class="headerlink" title="测试延迟特性"></a>测试延迟特性</h6><p>测试代码运行时在添加 VM 参数<code>-XX:BiasedLockingStartupDelay=0</code> 禁用延迟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 偏向锁-测试延迟性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.BiasedTest01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiasedTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(<span class="keyword">new</span> Cat()).toPrintable());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(<span class="keyword">new</span> Cat()).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">com.java.demo.theory.Cat object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000001</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">1</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">com.java.demo.theory.Cat object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000101</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">5</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><h6 id="测试偏向锁"><a href="#测试偏向锁" class="headerlink" title="测试偏向锁"></a>测试偏向锁</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BiasedTest02"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiasedTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Monkey monkey = <span class="keyword">new</span> Monkey();</span><br><span class="line">        log.debug(ClassLayout.parseInstance(monkey).toPrintable());</span><br><span class="line">        <span class="keyword">synchronized</span> (monkey)&#123;</span><br><span class="line">            log.debug(ClassLayout.parseInstance(monkey).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(ClassLayout.parseInstance(monkey).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">51</span>:<span class="number">40</span> [main] c.BiasedTest02 - com.java.demo.theory.Monkey object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000101</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">5</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>:<span class="number">51</span>:<span class="number">40</span> [main] c.BiasedTest02 - com.java.demo.theory.Monkey object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">28</span> <span class="number">39</span> <span class="number">03</span> (<span class="number">00000101</span> <span class="number">00101000</span> <span class="number">00111001</span> <span class="number">00000011</span>) (<span class="number">54077445</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>:<span class="number">51</span>:<span class="number">40</span> [main] c.BiasedTest02 - com.java.demo.theory.Monkey object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">28</span> <span class="number">39</span> <span class="number">03</span> (<span class="number">00000101</span> <span class="number">00101000</span> <span class="number">00111001</span> <span class="number">00000011</span>) (<span class="number">54077445</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><p><strong>注意</strong>  </p><blockquote><p>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</p></blockquote><h6 id="禁用偏向锁"><a href="#禁用偏向锁" class="headerlink" title="禁用偏向锁"></a>禁用偏向锁</h6><p>在上面测试代码运行时在添加 VM 参数 <code>-XX:-UseBiasedLocking</code> 禁用偏向锁<br>输出结果如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">56</span>:<span class="number">07</span> [main] c.BiasedTest02 - com.java.demo.theory.Monkey object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000001</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">1</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>:<span class="number">56</span>:<span class="number">07</span> [main] c.BiasedTest02 - com.java.demo.theory.Monkey object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">18</span> f6 c4 <span class="number">02</span> (<span class="number">00011000</span> <span class="number">11110110</span> <span class="number">11000100</span> <span class="number">00000010</span>) (<span class="number">46462488</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>:<span class="number">56</span>:<span class="number">07</span> [main] c.BiasedTest02 - com.java.demo.theory.Monkey object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000001</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">1</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><h6 id="测试-hashCode"><a href="#测试-hashCode" class="headerlink" title="测试 hashCode"></a>测试 hashCode</h6><p>正常状态对象一开始是没有 hashCode 的，第一次调用才生成</p><h5 id="撤销-调用对象-hashCode"><a href="#撤销-调用对象-hashCode" class="headerlink" title="撤销 - 调用对象 hashCode"></a>撤销 - 调用对象 hashCode</h5><p>调用了对象的 <code>hashCode</code>，但偏向锁的对象 <code>MarkWord</code> 中存储的是线程 <code>id</code>，如果调用 <code>hashCode</code> 会导致偏向锁被撤销  </p><ul><li><strong>轻量级锁</strong>会在锁记录中记录 hashCode</li><li><strong>重量级锁</strong>会在 Monitor 中记录 hashCode<br>在调用 <code>hashCode</code> 后使用偏向锁，记得去掉<code>-XX:-UseBiasedLocking</code>,设置为<code>-XX:BiasedLockingStartupDelay=0</code> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BiasedTest03"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiasedTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rabbit rabbit = <span class="keyword">new</span> Rabbit();</span><br><span class="line">        rabbit.hashCode(); <span class="comment">// 调用hashcode禁用偏向锁</span></span><br><span class="line">        log.debug(ClassLayout.parseInstance(rabbit).toPrintable());</span><br><span class="line">        <span class="keyword">synchronized</span> (rabbit)&#123;</span><br><span class="line">            log.debug(ClassLayout.parseInstance(rabbit).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(ClassLayout.parseInstance(rabbit).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">14</span>:<span class="number">09</span> [main] c.BiasedTest03 - com.java.demo.theory.Rabbit object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">01</span> <span class="number">3</span>f aa <span class="number">4</span>c (<span class="number">00000001</span> <span class="number">00111111</span> <span class="number">10101010</span> <span class="number">01001100</span>) (<span class="number">1286225665</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">57</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">01010111</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">87</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">14</span>:<span class="number">09</span> [main] c.BiasedTest03 - com.java.demo.theory.Rabbit object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           c8 f6 da <span class="number">02</span> (<span class="number">11001000</span> <span class="number">11110110</span> <span class="number">11011010</span> <span class="number">00000010</span>) (<span class="number">47904456</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">14</span>:<span class="number">09</span> [main] c.BiasedTest03 - com.java.demo.theory.Rabbit object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">01</span> <span class="number">3</span>f aa <span class="number">4</span>c (<span class="number">00000001</span> <span class="number">00111111</span> <span class="number">10101010</span> <span class="number">01001100</span>) (<span class="number">1286225665</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">57</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">01010111</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">87</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><h5 id="撤销-其它线程使用对象"><a href="#撤销-其它线程使用对象" class="headerlink" title="撤销 - 其它线程使用对象"></a>撤销 - 其它线程使用对象</h5><p>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁<br>测试代码运行时在添加 VM 参数<code>-XX:BiasedLockingStartupDelay=0</code> 禁用延迟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BiasedTest04"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiasedTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(ClassLayout.parseInstance(test).toPrintable());</span><br><span class="line">            <span class="keyword">synchronized</span> (test) &#123;</span><br><span class="line">                log.debug(ClassLayout.parseInstance(test).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(ClassLayout.parseInstance(test).toPrintable());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (BiasedTest04.class)&#123;</span><br><span class="line">                BiasedTest04.class.notify();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (BiasedTest04.class)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    BiasedTest04.class.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.debug(ClassLayout.parseInstance(test).toPrintable());</span><br><span class="line">            <span class="keyword">synchronized</span> (test) &#123;</span><br><span class="line">                log.debug(ClassLayout.parseInstance(test).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(ClassLayout.parseInstance(test).toPrintable());</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">11</span>:<span class="number">49</span> [t1] c.BiasedTest04 - com.java.demo.theory.Test object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000101</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">5</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">11</span>:<span class="number">49</span> [t1] c.BiasedTest04 - com.java.demo.theory.Test object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">50</span> d3 <span class="number">1</span>f (<span class="number">00000101</span> <span class="number">01010000</span> <span class="number">11010011</span> <span class="number">00011111</span>) (<span class="number">533942277</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">11</span>:<span class="number">49</span> [t1] c.BiasedTest04 - com.java.demo.theory.Test object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">50</span> d3 <span class="number">1</span>f (<span class="number">00000101</span> <span class="number">01010000</span> <span class="number">11010011</span> <span class="number">00011111</span>) (<span class="number">533942277</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">11</span>:<span class="number">49</span> [t2] c.BiasedTest04 - com.java.demo.theory.Test object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">50</span> d3 <span class="number">1</span>f (<span class="number">00000101</span> <span class="number">01010000</span> <span class="number">11010011</span> <span class="number">00011111</span>) (<span class="number">533942277</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">11</span>:<span class="number">49</span> [t2] c.BiasedTest04 - com.java.demo.theory.Test object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">30</span> ef <span class="number">2</span>a <span class="number">20</span> (<span class="number">00110000</span> <span class="number">11101111</span> <span class="number">00101010</span> <span class="number">00100000</span>) (<span class="number">539684656</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">11</span>:<span class="number">49</span> [t2] c.BiasedTest04 - com.java.demo.theory.Test object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000001</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">1</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><h5 id="撤销-调用-wait-notify"><a href="#撤销-调用-wait-notify" class="headerlink" title="撤销 - 调用 wait/notify"></a>撤销 - 调用 wait/notify</h5><p>测试代码运行时在添加 VM 参数<code>-XX:BiasedLockingStartupDelay=0</code> 禁用延迟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BiasedTest05"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiasedTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            log.debug(ClassLayout.parseInstance(dog).toPrintable());</span><br><span class="line">            <span class="keyword">synchronized</span> (dog)&#123;</span><br><span class="line">                log.debug(ClassLayout.parseInstance(dog).toPrintable());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dog.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(ClassLayout.parseInstance(dog).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(ClassLayout.parseInstance(dog).toPrintable());</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (dog) &#123;</span><br><span class="line">                log.debug(<span class="string">"notify"</span>);</span><br><span class="line">                dog.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">23</span> [t1] c.BiasedTest05 - com.java.demo.theory.Dog object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000101</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">5</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">23</span> [t1] c.BiasedTest05 - com.java.demo.theory.Dog object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">05</span> <span class="number">38</span> c0 <span class="number">1</span>f (<span class="number">00000101</span> <span class="number">00111000</span> <span class="number">11000000</span> <span class="number">00011111</span>) (<span class="number">532690949</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">27</span> [t2] c.BiasedTest05 - notify</span><br><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">27</span> [t1] c.BiasedTest05 - com.java.demo.theory.Dog object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">4</span>a <span class="number">0</span>e b7 <span class="number">1</span>c (<span class="number">01001010</span> <span class="number">00001110</span> <span class="number">10110111</span> <span class="number">00011100</span>) (<span class="number">481758794</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">27</span> [t1] c.BiasedTest05 - com.java.demo.theory.Dog object internals:</span><br><span class="line"> OFFSET  SIZE   <span class="built_in">TYPE</span> DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">4</span>a <span class="number">0</span>e b7 <span class="number">1</span>c (<span class="number">01001010</span> <span class="number">00001110</span> <span class="number">10110111</span> <span class="number">00011100</span>) (<span class="number">481758794</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">0</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           a4 <span class="number">8</span>b <span class="number">01</span> f8 (<span class="number">10100100</span> <span class="number">10001011</span> <span class="number">00000001</span> <span class="number">11111000</span>) (-<span class="number">134116444</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">16</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><h5 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h5><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 <code>T1</code> 的对象仍有机会重新偏向 <code>T2</code>，重偏向会重置对象的 <code>Thread ID</code><br>当撤销偏向锁阈值超过 <code>20</code> 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至加锁线程<br>测试代码运行时在添加 VM 参数<code>-XX:BiasedLockingStartupDelay=0</code> 禁用延迟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量重偏向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BiasedTest06"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiasedTest06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Dog&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">                Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">                list.add(dog);</span><br><span class="line">                <span class="keyword">synchronized</span> (dog)&#123;</span><br><span class="line">                    log.debug(i + <span class="string">"/t"</span> + ClassLayout.parseInstance(dog).toPrintable());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                list.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">"===============&gt;&gt;&gt; "</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">                Dog d = list.get(i);</span><br><span class="line">                log.debug(i + <span class="string">"/t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                <span class="keyword">synchronized</span> (d)&#123;</span><br><span class="line">                    log.debug(i + <span class="string">"/t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(i + <span class="string">"/t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="批量撤销"><a href="#批量撤销" class="headerlink" title="批量撤销"></a>批量撤销</h5><p>当撤销偏向锁阈值超过 <code>40</code> 次后，<code>jvm</code> 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量撤销</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BiasedTest07"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiasedTest07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        test4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Thread t1,t2,t3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Vector&lt;Dog&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> loopNumber = <span class="number">39</span>;</span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">                Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">                list.add(d);</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    log.debug(i + <span class="string">"\t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            LockSupport.unpark(t2);</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">"===============&gt; "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">                Dog d = list.get(i);</span><br><span class="line">                log.debug(i + <span class="string">"\t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    log.debug(i + <span class="string">"\t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(i + <span class="string">"\t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">            LockSupport.unpark(t3);</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">"===============&gt; "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">                Dog d = list.get(i);</span><br><span class="line">                log.debug(i + <span class="string">"\t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    log.debug(i + <span class="string">"\t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(i + <span class="string">"\t"</span> + ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t3"</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        t3.join();</span><br><span class="line">        log.debug(ClassLayout.parseInstance(<span class="keyword">new</span> Dog()).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-5-锁消除"><a href="#6-4-5-锁消除" class="headerlink" title="6.4.5 锁消除"></a>6.4.5 锁消除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Fork</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@BenchmarkMode</span>(Mode.AverageTime)</span><br><span class="line"><span class="meta">@Warmup</span>(iterations=<span class="number">3</span>)</span><br><span class="line"><span class="meta">@Measurement</span>(iterations=<span class="number">5</span>)</span><br><span class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.NANOSECONDS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EliminateLocks</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options options = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(EliminateLocks.class.getSimpleName())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">new</span> Runner(options).run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            x++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Benchmark         Mode  Cnt  Score   Error  Units</span><br><span class="line">EliminateLocks.a  avgt    5  2.854 ± 0.862  ns/op</span><br><span class="line">EliminateLocks.b  avgt    5  2.109 ± 0.272  ns/op</span><br></pre></td></tr></table></figure><ul><li>添加<code>-XX:-EliminateLocks</code>参数测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Benchmark         Mode  Cnt   Score   Error  Units</span><br><span class="line">EliminateLocks.a  avgt    5   2.788 ± 0.359  ns/op</span><br><span class="line">EliminateLocks.b  avgt    5  27.844 ± 6.160  ns/op</span><br></pre></td></tr></table></figure><h2 id="7-wait-notify"><a href="#7-wait-notify" class="headerlink" title="7. wait notify"></a>7. wait notify</h2><h3 id="7-1-wait-notify原理"><a href="#7-1-wait-notify原理" class="headerlink" title="7.1 wait notify原理"></a>7.1 wait notify原理</h3><p>![](wait notify原理.png)</p><ul><li><code>Owner</code> 线程发现条件不满足，调用 <code>wait</code> 方法，即可进入 <code>WaitSet</code> 变为 <code>WAITING</code> 状态 </li><li><code>BLOCKED</code> 和 <code>WAITING</code> 的线程都处于阻塞状态，不占用 <code>CPU</code> 时间片 </li><li><code>BLOCKED</code> 线程会在 <code>Owner</code> 线程释放锁时唤醒 </li><li><code>WAITING</code> 线程会在 <code>Owner</code> 线程调用 <code>notify</code> 或 <code>notifyAll</code> 时唤醒，但唤醒后并不意味者立刻获得锁，仍需进入 <code>EntryList</code> 重新竞争</li></ul><h3 id="7-2-API介绍"><a href="#7-2-API介绍" class="headerlink" title="7.2 API介绍"></a>7.2 API介绍</h3><ul><li><code>obj.wait()</code> 让进入 <code>object</code> 监视器的线程到 <code>waitSet</code> 等待 </li><li><code>obj.notify()</code>在 <code>object</code> 上正在 <code>waitSet</code> 等待的线程中挑一个唤醒 </li><li><code>obj.notifyAll()</code> 让 <code>object</code> 上正在 <code>waitSet</code>等待的线程全部唤醒</li></ul><p>它们都是线程之间进行协作的手段，都属于 Object 对象的方法。必须获得此对象的锁，才能调用这几个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * wait-notify/notifyAll测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.waitNotify"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                log.debug(<span class="string">"执行...."</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait(); <span class="comment">// 让线程在obj上一直等待下去</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"其它代码...."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                log.debug(<span class="string">"执行...."</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait(); <span class="comment">// 让线程在obj上一直等待下去</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"其它代码...."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程两秒后执行</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        log.debug(<span class="string">"唤醒 obj 上其它线程"</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">//lock.notify(); // 唤醒obj上一个线程</span></span><br><span class="line">            lock.notifyAll(); <span class="comment">// 唤醒obj上所有等待线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>notify</code>的一种结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">22:14:38 [t1] c.waitNotify - 执行....</span><br><span class="line">22:14:38 [t1] c.waitNotify - 执行....</span><br><span class="line">22:14:40 [main] c.waitNotify - 唤醒 obj 上其它线程</span><br><span class="line">22:14:40 [t1] c.waitNotify - 其它代码....</span><br></pre></td></tr></table></figure></li><li><p><code>notifyAll</code>的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">22:12:50 [t1] c.waitNotify - 执行....</span><br><span class="line">22:12:50 [t1] c.waitNotify - 执行....</span><br><span class="line">22:12:52 [main] c.waitNotify - 唤醒 obj 上其它线程</span><br><span class="line">22:12:52 [t1] c.waitNotify - 其它代码....</span><br><span class="line">22:12:52 [t1] c.waitNotify - 其它代码....</span><br></pre></td></tr></table></figure></li></ul><p><code>wait()</code> 方法会释放对象的锁，进入 <code>WaitSet</code> 等待区，从而让其他线程就机会获取对象的锁。无限制等待，直到 <code>notify</code> 为止 ;</p><p><code>wait(long n)</code> 有时限的等待, 到 <code>n</code> 毫秒后结束等待，或是被 <code>notify</code>。</p><h2 id="8-wait-notify的正确姿势"><a href="#8-wait-notify的正确姿势" class="headerlink" title="8. wait notify的正确姿势"></a>8. wait notify的正确姿势</h2><h3 id="sleep-long-n-和wait-long-n-的区别"><a href="#sleep-long-n-和wait-long-n-的区别" class="headerlink" title="sleep(long n)和wait(long n)的区别"></a>sleep(long n)和wait(long n)的区别</h3><ol><li><p><code>sleep</code>是<code>Thread</code>的方法，而<code>wait</code>是<code>Object</code>的方法</p></li><li><p><code>sleep</code>不需要强制和<code>synchronized</code>配合使用，但是<code>wait</code>需要和<code>synchronized</code>一起用</p></li><li><p><code>sleep</code>在睡眠的同时，不会释放对象锁的，但<code>wait</code>在等待的时候会释放对象锁</p></li><li><p>它们 状态 <code>TIMED_WAITING</code></p></li></ol><h3 id="Step-1（Sleep方式）"><a href="#Step-1（Sleep方式）" class="headerlink" title="Step 1（Sleep方式）"></a>Step 1（Sleep方式）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用sleep方法解决</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.step1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyCorrectPostureStep1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object room = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasCigarette = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasTakeout = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"没烟，先歇会！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"小南"</span>).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">"其它人"</span>).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 这里能不能加 synchronized (room)？</span></span><br><span class="line">            hasCigarette = <span class="keyword">true</span>;</span><br><span class="line">            log.debug(<span class="string">"烟到了噢！"</span>);</span><br><span class="line">        &#125;, <span class="string">"送烟的"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3:33:20 [小南] c.step1 - 有烟没？[false]</span><br><span class="line">23:33:20 [小南] c.step1 - 没烟，先歇会！</span><br><span class="line">23:33:21 [送烟的] c.step1 - 烟到了噢！</span><br><span class="line">23:33:22 [小南] c.step1 - 有烟没？[true]</span><br><span class="line">23:33:22 [小南] c.step1 - 可以开始干活了</span><br><span class="line">23:33:22 [其它人] c.step1 - 可以开始干活了</span><br><span class="line">23:33:22 [其它人] c.step1 - 可以开始干活了</span><br><span class="line">23:33:22 [其它人] c.step1 - 可以开始干活了</span><br><span class="line">23:33:22 [其它人] c.step1 - 可以开始干活了</span><br><span class="line">23:33:22 [其它人] c.step1 - 可以开始干活了</span><br></pre></td></tr></table></figure><ul><li>其它干活的线程，都要一直阻塞，效率太低 </li><li>小南线程必须睡足 2s 后才能醒来，就算烟提前送到，也无法立刻醒来 </li><li>加了 synchronized (room) 后，就好比小南在里面反锁了门睡觉，烟根本没法送进门，main 没加 synchronized 就好像 main 线程是翻窗户进来的 </li><li>解决方法，使用 <code>wait - notify</code> 机制</li></ul><h3 id="step-2（wait-notify机制）"><a href="#step-2（wait-notify机制）" class="headerlink" title="step 2（wait-notify机制）"></a>step 2（wait-notify机制）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.step2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyCorrectPostureStep2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object room = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasCigarette = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasTakeout = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"没烟，先歇会！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"小南"</span>).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">"其它人"</span>).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room)&#123;</span><br><span class="line">                hasCigarette = <span class="keyword">true</span>;</span><br><span class="line">                log.debug(<span class="string">"烟到了噢！"</span>);</span><br><span class="line">                room.notify();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"送烟的"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">11:06:34 [小南] c.step2 - 有烟没？[false]</span><br><span class="line">11:06:34 [小南] c.step2 - 没烟，先歇会！</span><br><span class="line">11:06:34 [其它人] c.step2 - 可以开始干活了</span><br><span class="line">11:06:34 [其它人] c.step2 - 可以开始干活了</span><br><span class="line">11:06:34 [其它人] c.step2 - 可以开始干活了</span><br><span class="line">11:06:34 [其它人] c.step2 - 可以开始干活了</span><br><span class="line">11:06:34 [其它人] c.step2 - 可以开始干活了</span><br><span class="line">11:06:35 [送烟的] c.step2 - 烟到了噢！</span><br><span class="line">11:06:35 [小南] c.step2 - 有烟没？[true]</span><br><span class="line">11:06:35 [小南] c.step2 - 可以开始干活了</span><br></pre></td></tr></table></figure><ul><li>解决了其它干活的线程阻塞的问题 </li><li>但如果有其它线程也在等待条件呢？</li></ul><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.step3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyCorrectPostureStep3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object room = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasCigarette = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasTakeout = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room)&#123;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"没烟，先歇会！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">"没干成活"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小南"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                Thread thread = Thread.currentThread();</span><br><span class="line">                log.debug(<span class="string">"外卖送到没？[&#123;&#125;]"</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">if</span> (!hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">"没外卖，先歇会！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"外卖送到没？[&#123;&#125;]"</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">if</span> (hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">"没干成活..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小女"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                hasTakeout = <span class="keyword">true</span>;</span><br><span class="line">                log.debug(<span class="string">"外卖到了噢！"</span>);</span><br><span class="line">                room.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"送外卖的"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">11:08:46 [小女] c.step3 - 外卖送到没？[false]</span><br><span class="line">11:08:46 [小女] c.step3 - 没外卖，先歇会！</span><br><span class="line">11:08:46 [小南] c.step3 - 有烟没？[false]</span><br><span class="line">11:08:46 [小南] c.step3 - 没烟，先歇会！</span><br><span class="line">11:08:47 [送外卖的] c.step3 - 外卖到了噢！</span><br><span class="line">11:08:47 [小女] c.step3 - 外卖送到没？[true]</span><br><span class="line">11:08:47 [小女] c.step3 - 可以开始干活了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">11:09:09 [小南] c.step3 - 有烟没？[false]</span><br><span class="line">11:09:09 [小南] c.step3 - 没烟，先歇会！</span><br><span class="line">11:09:09 [小女] c.step3 - 外卖送到没？[false]</span><br><span class="line">11:09:09 [小女] c.step3 - 没外卖，先歇会！</span><br><span class="line">11:09:10 [送外卖的] c.step3 - 外卖到了噢！</span><br><span class="line">11:09:10 [小南] c.step3 - 有烟没？[false]</span><br><span class="line">11:09:10 [小南] c.step3 - 没干成活</span><br></pre></td></tr></table></figure><ul><li><code>notify</code> 只能随机唤醒一个 <code>WaitSet</code> 中的线程，这时如果有其它线程也在等待，那么就可能唤醒不了正确的线 程，称之为<strong>虚假唤醒</strong></li><li>解决方法，改为 <code>notifyAll</code></li></ul><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.step4"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyCorrectPostureStep4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object room = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasCigarette = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasTakeout = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room)&#123;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"没烟，先歇会！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">"没干成活"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小南"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                Thread thread = Thread.currentThread();</span><br><span class="line">                log.debug(<span class="string">"外卖送到没？[&#123;&#125;]"</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">if</span> (!hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">"没外卖，先歇会！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"外卖送到没？[&#123;&#125;]"</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">if</span> (hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">"没干成活..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小女"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                hasTakeout = <span class="keyword">true</span>;</span><br><span class="line">                log.debug(<span class="string">"外卖到了噢！"</span>);</span><br><span class="line">                room.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"送外卖的"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">11:16:07 [小南] c.step4 - 有烟没？[false]</span><br><span class="line">11:16:07 [小南] c.step4 - 没烟，先歇会！</span><br><span class="line">11:16:07 [小女] c.step4 - 外卖送到没？[false]</span><br><span class="line">11:16:07 [小女] c.step4 - 没外卖，先歇会！</span><br><span class="line">11:16:08 [送外卖的] c.step4 - 外卖到了噢！</span><br><span class="line">11:16:08 [小女] c.step4 - 外卖送到没？[true]</span><br><span class="line">11:16:08 [小女] c.step4 - 可以开始干活了</span><br><span class="line">11:16:08 [小南] c.step4 - 有烟没？[false]</span><br><span class="line">11:16:08 [小南] c.step4 - 没干成活</span><br></pre></td></tr></table></figure><ul><li>用 notifyAll 仅解决某个线程的唤醒问题，但使用 if + wait 判断仅有一次机会，一旦条件不成立，就没有重新 判断的机会了 </li><li>解决方法，用 while + wait，当条件不成立，再次 wait</li></ul><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.step5"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyCorrectPostureStep5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object room = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasCigarette = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasTakeout = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room)&#123;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">while</span> (!hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"没烟，先歇会！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"有烟没？[&#123;&#125;]"</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">"没干成活"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小南"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                Thread thread = Thread.currentThread();</span><br><span class="line">                log.debug(<span class="string">"外卖送到没？[&#123;&#125;]"</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">if</span> (!hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">"没外卖，先歇会！"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        room.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"外卖送到没？[&#123;&#125;]"</span>, hasTakeout);</span><br><span class="line">                <span class="keyword">if</span> (hasTakeout) &#123;</span><br><span class="line">                    log.debug(<span class="string">"可以开始干活了"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">"没干成活..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小女"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                hasTakeout = <span class="keyword">true</span>;</span><br><span class="line">                log.debug(<span class="string">"外卖到了噢！"</span>);</span><br><span class="line">                room.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"送外卖的"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wait-Notify-NotifyAll正确姿势"><a href="#Wait-Notify-NotifyAll正确姿势" class="headerlink" title="Wait-Notify/NotifyAll正确姿势"></a>Wait-Notify/NotifyAll正确姿势</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">    <span class="keyword">while</span>(条件判断)&#123;</span><br><span class="line">        lock.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个线程</span></span><br><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">    lock.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步模式-之-保护性暂停（Guarded-Suspension）"><a href="#同步模式-之-保护性暂停（Guarded-Suspension）" class="headerlink" title="同步模式 之 保护性暂停（Guarded Suspension）"></a>同步模式 之 保护性暂停（Guarded Suspension）</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>即 <code>Guarded Suspension</code>，用在一个线程等待另一个线程的执行结果 </p><p>要点 </p><ul><li>有一个结果需要从一个线程传递到另一个线程，让他们关联同一个 <code>GuardedObject</code> </li><li>如果有结果不断从一个线程到另一个线程那么可以使用消息队列（见生产者/消费者） </li><li><code>JDK</code> 中，<code>join</code> 的实现、<code>Future</code> 的实现，采用的就是此模式 </li><li>因为要等待另一方的结果，因此归类到同步模式</li></ul><p><img src="%E5%90%8C%E6%AD%A5%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BF%9D%E6%8A%A4%E6%80%A7%E6%9A%82%E5%81%9C.png" alt></p><h4 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.gurededObject"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardedObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">this</span>.response == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Object response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.response = response;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.GuardedObjectTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardedObjectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GuardedObject guardedObject = <span class="keyword">new</span> GuardedObject();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 子线程执行下载</span></span><br><span class="line">                List&lt;String&gt; response = Downloader.download();</span><br><span class="line">                log.debug(<span class="string">"download complete..."</span>);</span><br><span class="line">                guardedObject.set(response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"downloader"</span>).start();</span><br><span class="line">        log.debug(<span class="string">"waiting..."</span>);</span><br><span class="line">        <span class="comment">// 主线程阻塞等待</span></span><br><span class="line">        Object response = guardedObject.get();</span><br><span class="line">        log.debug(<span class="string">"get response: [&#123;&#125;] lines"</span>, ((List&lt;String&gt;) response).size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">19:19:58 [main] c.test - waiting...</span><br><span class="line">19:20:02 [downloader] c.test - download complete...</span><br><span class="line">19:20:02 [main] c.test - get response: [2] lines</span><br></pre></td></tr></table></figure><h4 id="3-带超时版的GuardedObject"><a href="#3-带超时版的GuardedObject" class="headerlink" title="3. 带超时版的GuardedObject"></a>3. 带超时版的GuardedObject</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TimeOutGuardedObject"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeOutGuardedObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取线程执行结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="comment">// 开始时间</span></span><br><span class="line">            <span class="keyword">long</span> begin = System.currentTimeMillis(); <span class="comment">// 15:00:00</span></span><br><span class="line">            <span class="comment">// 经历时间</span></span><br><span class="line">            <span class="keyword">long</span> period = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">this</span>.response == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">long</span> waitTime = timeout - period;</span><br><span class="line">                log.debug(<span class="string">"waitTime : &#123;&#125;"</span>, waitTime);</span><br><span class="line">                <span class="comment">// 经历的时间大于最大等待时间，退出循环</span></span><br><span class="line">                <span class="keyword">if</span> (waitTime &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait(waitTime);  <span class="comment">// 虚假唤醒  15:00:01</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                period = System.currentTimeMillis() - begin;  <span class="comment">// 15:00:02  1s</span></span><br><span class="line">                log.debug(<span class="string">"period: &#123;&#125;, object is null &#123;&#125;"</span>,</span><br><span class="line">                        period, response == <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Object response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.response = response;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li><p>超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TimeOutGuardedObjectTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeOutGuardedObjectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TimeOutGuardedObject timeOutGuardedObject = <span class="keyword">new</span> TimeOutGuardedObject();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 子线程执行下载</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;String&gt; response = Downloader.download();</span><br><span class="line">                timeOutGuardedObject.set(response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException|InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"download complete..."</span>);</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">"downloader"</span>).start();</span><br><span class="line">        log.debug(<span class="string">"waiting..."</span>);</span><br><span class="line">        <span class="comment">// 主线程阻塞等待</span></span><br><span class="line">        Object response = timeOutGuardedObject.get(<span class="number">1000</span>);</span><br><span class="line">        log.debug(<span class="string">"get response: [&#123;&#125;] lines"</span>, (response == <span class="keyword">null</span> ? <span class="string">"response is null"</span>:((List&lt;String&gt;) response).size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">19:48:29 [main] c.TimeOutGuardedObjectTest - waiting...</span><br><span class="line">19:48:29 [main] c.TimeOutGuardedObject - waitTime : 1000</span><br><span class="line">19:48:30 [main] c.TimeOutGuardedObject - period: 1009, object is null <span class="literal">true</span></span><br><span class="line">19:48:30 [main] c.TimeOutGuardedObject - waitTime : -9</span><br><span class="line">19:48:30 [main] c.TimeOutGuardedObjectTest - get response: [response is null] lines</span><br><span class="line">19:48:34 [downloader] c.TimeOutGuardedObjectTest - download complete...</span><br></pre></td></tr></table></figure></li><li><p>不超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TimeOutGuardedObjectTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeOutGuardedObjectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TimeOutGuardedObject timeOutGuardedObject = <span class="keyword">new</span> TimeOutGuardedObject();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 子线程执行下载</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;String&gt; response = Downloader.download();</span><br><span class="line">                timeOutGuardedObject.set(response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException|InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"download complete..."</span>);</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">"downloader"</span>).start();</span><br><span class="line">        log.debug(<span class="string">"waiting..."</span>);</span><br><span class="line">        <span class="comment">// 主线程阻塞等待</span></span><br><span class="line">        Object response = timeOutGuardedObject.get(<span class="number">5000</span>);</span><br><span class="line">        log.debug(<span class="string">"get response: [&#123;&#125;] lines"</span>, (response == <span class="keyword">null</span> ? <span class="string">"response is null"</span>:((List&lt;String&gt;) response).size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">20:05:57 [main] c.TimeOutGuardedObjectTest - waiting...</span><br><span class="line">20:05:57 [main] c.TimeOutGuardedObject - waitTime : 5000</span><br><span class="line">20:06:01 [main] c.TimeOutGuardedObject - period: 4131, object is null <span class="literal">false</span></span><br><span class="line">20:06:01 [downloader] c.TimeOutGuardedObjectTest - download complete...</span><br><span class="line">20:06:01 [main] c.TimeOutGuardedObjectTest - get response: [2] lines</span><br></pre></td></tr></table></figure></li></ul><h5 id="原理-之-join"><a href="#原理-之-join" class="headerlink" title="原理 之 join"></a>原理 之 join</h5><p><code>join</code>是<code>Thread</code>类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Waits at most &#123;<span class="doctag">@code</span> millis&#125; milliseconds for this thread to</span></span><br><span class="line"><span class="comment"> * die. A timeout of &#123;<span class="doctag">@code</span> 0&#125; means to wait forever.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; This implementation uses a loop of &#123;<span class="doctag">@code</span> this.wait&#125; calls</span></span><br><span class="line"><span class="comment"> * conditioned on &#123;<span class="doctag">@code</span> this.isAlive&#125;. As a thread terminates the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> this.notifyAll&#125; method is invoked. It is recommended that</span></span><br><span class="line"><span class="comment"> * applications not use &#123;<span class="doctag">@code</span> wait&#125;, &#123;<span class="doctag">@code</span> notify&#125;, or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> notifyAll&#125; on &#123;<span class="doctag">@code</span> Thread&#125; instances.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  millis</span></span><br><span class="line"><span class="comment"> *         the time to wait in milliseconds</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          if the value of &#123;<span class="doctag">@code</span> millis&#125; is negative</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  InterruptedException</span></span><br><span class="line"><span class="comment"> *          if any thread has interrupted the current thread. The</span></span><br><span class="line"><span class="comment"> *          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is</span></span><br><span class="line"><span class="comment"> *          cleared when this exception is thrown.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意 </p><p><code>join</code> 体现的是<strong>保护性暂停</strong>模式，请参考之</p></blockquote><h4 id="4-多任务版-GuardedObject"><a href="#4-多任务版-GuardedObject" class="headerlink" title="4. 多任务版 GuardedObject"></a>4. 多任务版 GuardedObject</h4><p><img src="%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%89%88GuardedObject.png" alt></p><p>图中 <code>Futures</code> 就好比居民楼一层的<strong>信箱</strong>（每个信箱有房间编号），左侧的<code>t0</code>，<code>t2</code>，<code>t4</code> 就好比等待邮件的居民，右 侧的 <code>t1</code>，<code>t3</code>，<code>t5</code> 就好比邮递员 如果需要在多个类之间使用 <code>GuardedObject</code> 对象，作为参数传递不是很方便，因此设计一个用来解耦的中间类， 这样不仅能够解耦【结果等待者】和【结果生产者】，还能够同时支持多个任务的管理。</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.MultitaskingGuardedObject"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultitaskingGuardedObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标识执行不同任务的GuardObject</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultitaskingGuardedObject</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储线程执行任务的结果</span></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取线程执行任务的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeOut 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeOut)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">long</span> period = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">this</span>.response == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">long</span> waitTime = timeOut - period;</span><br><span class="line">                <span class="keyword">if</span>(waitTime &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait(waitTime);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                period = System.currentTimeMillis() - begin;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置线程执行任务的返回结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Object response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.response = response;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuardObjectHolder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, MultitaskingGuardedObject&gt; multitaskingGuardedObjectMap = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">generateId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MultitaskingGuardedObject <span class="title">createMultitaskingGuardedObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MultitaskingGuardedObject multitaskingGuardedObject = <span class="keyword">new</span> MultitaskingGuardedObject(generateId());</span><br><span class="line">        multitaskingGuardedObjectMap.put(multitaskingGuardedObject.getId(),multitaskingGuardedObject);</span><br><span class="line">        <span class="keyword">return</span> multitaskingGuardedObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title">getIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> multitaskingGuardedObjectMap.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MultitaskingGuardedObject <span class="title">getMultitaskingGuardedObject</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> multitaskingGuardedObjectMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Sender"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sender</span><span class="params">(<span class="keyword">int</span> id, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MultitaskingGuardedObject multitaskingGuardedObject = GuardObjectHolder.getMultitaskingGuardedObject(id);</span><br><span class="line">        log.debug(<span class="string">"发送消息 id = &#123;&#125;,发送的消息内容 receiveContent = &#123;&#125;"</span>,id,message);</span><br><span class="line">        multitaskingGuardedObject.set(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Receiver"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MultitaskingGuardedObject multitaskingGuardedObject = GuardObjectHolder.createMultitaskingGuardedObject();</span><br><span class="line">        log.debug(<span class="string">"等待接收消息中 id = &#123;&#125;"</span>,multitaskingGuardedObject.getId());</span><br><span class="line">        Object receiveContent = multitaskingGuardedObject.get(<span class="number">5000</span>);</span><br><span class="line">        log.debug(<span class="string">"收到发送的消息 id = &#123;&#125;,收到发送的消息内容 receiveContent = &#123;&#125;"</span>,multitaskingGuardedObject.getId(),receiveContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiGuardObjectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">            receiver.setName(<span class="string">"接收者"</span> + (i+<span class="number">1</span>));</span><br><span class="line">            receiver.start();</span><br><span class="line">        &#125;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> id: GuardObjectHolder.getIds()) &#123;</span><br><span class="line">            Sender sender = <span class="keyword">new</span> Sender(id,<span class="string">"消息"</span>+id);</span><br><span class="line">            sender.setName(<span class="string">"发送者"</span> + id);</span><br><span class="line">            sender.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">51</span> [接收者<span class="number">2</span>] c.Receiver - 等待接收消息中 id = <span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">51</span> [接收者<span class="number">1</span>] c.Receiver - 等待接收消息中 id = <span class="number">1</span></span><br><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">51</span> [接收者<span class="number">3</span>] c.Receiver - 等待接收消息中 id = <span class="number">2</span></span><br><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">52</span> [发送者<span class="number">3</span>] c.Sender - 发送消息 id = <span class="number">3</span>,发送的消息内容 receiveContent = 消息<span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">52</span> [发送者<span class="number">2</span>] c.Sender - 发送消息 id = <span class="number">2</span>,发送的消息内容 receiveContent = 消息<span class="number">2</span></span><br><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">52</span> [发送者<span class="number">1</span>] c.Sender - 发送消息 id = <span class="number">1</span>,发送的消息内容 receiveContent = 消息<span class="number">1</span></span><br><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">52</span> [接收者<span class="number">3</span>] c.Receiver - 收到发送的消息 id = <span class="number">2</span>,收到发送的消息内容 receiveContent = 消息<span class="number">2</span></span><br><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">52</span> [接收者<span class="number">2</span>] c.Receiver - 收到发送的消息 id = <span class="number">3</span>,收到发送的消息内容 receiveContent = 消息<span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">42</span>:<span class="number">52</span> [接收者<span class="number">1</span>] c.Receiver - 收到发送的消息 id = <span class="number">1</span>,收到发送的消息内容 receiveContent = 消息<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="异步模式之-生产者消费者"><a href="#异步模式之-生产者消费者" class="headerlink" title="异步模式之 生产者消费者"></a>异步模式之 生产者消费者</h3><h4 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>与前面的保护性暂停中的 <code>GuardObject</code> 不同，不需要产生结果和消费结果的线程一一对应 消费队列可以用来平衡生产和消费的线程资源 生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据 消息队列是有容量限制的，满时不会再加入数据，空时不会再消耗数据 <code>JDK</code> 中各种阻塞队列，采用的就是这种模式</p><p><img src="%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85.png" alt></p><h4 id="2-实现-1"><a href="#2-实现-1" class="headerlink" title="2.实现"></a>2.实现</h4><p>消息类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.asynchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息队列类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.asynchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列类，java线程之间通信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.MessageQueue"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储消息内容的集合</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Message&gt; messageList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageQueue</span><span class="params">(<span class="keyword">int</span> capity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capity = capity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (messageList)&#123;</span><br><span class="line">            <span class="comment">// 检查队列是否已经存储满了</span></span><br><span class="line">            <span class="keyword">while</span>(messageList.size() == capity)&#123;</span><br><span class="line">                <span class="comment">// 满了等待消息消费之后再存入</span></span><br><span class="line">                log.debug(<span class="string">"队列满了，生产者线程等待中..."</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    messageList.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果消息队列存储的消息未达到最大容量则存入消息队列尾部</span></span><br><span class="line">            messageList.addLast(message);</span><br><span class="line">            log.debug(<span class="string">"生产消息:&#123;&#125;"</span>,message);</span><br><span class="line">            <span class="comment">// 唤醒正在等待消费的线程</span></span><br><span class="line">            messageList.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">consume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (messageList)&#123;</span><br><span class="line">            <span class="keyword">while</span> (messageList.isEmpty())&#123;</span><br><span class="line">                log.debug(<span class="string">"队列为空，消费者线程等待中..."</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    messageList.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从消息队列头部获取消息并返回</span></span><br><span class="line">            Message message = messageList.removeFirst();</span><br><span class="line">            log.debug(<span class="string">"消费消息:&#123;&#125;"</span>,message);</span><br><span class="line">            <span class="comment">// 唤醒正在等待生产的线程</span></span><br><span class="line">            messageList.notifyAll();</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.asynchronous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ProducerConsumerTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化消息队列</span></span><br><span class="line">        MessageQueue messageQueue = <span class="keyword">new</span> MessageQueue(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 定义生产者线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                messageQueue.push(<span class="keyword">new</span> Message(id,<span class="string">"message"</span>+id));</span><br><span class="line">            &#125;,<span class="string">"生产者"</span> + id).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义消费者</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                messageQueue.consume();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"消费者"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">11</span>:<span class="number">27</span> [生产者<span class="number">1</span>] c.MessageQueue - 生产消息:Message(id=<span class="number">1</span>, message=message1)</span><br><span class="line"><span class="number">14</span>:<span class="number">11</span>:<span class="number">27</span> [生产者<span class="number">3</span>] c.MessageQueue - 生产消息:Message(id=<span class="number">3</span>, message=message3)</span><br><span class="line"><span class="number">14</span>:<span class="number">11</span>:<span class="number">27</span> [生产者<span class="number">2</span>] c.MessageQueue - 队列满了，生产者线程等待中...</span><br><span class="line"><span class="number">14</span>:<span class="number">11</span>:<span class="number">28</span> [消费者] c.MessageQueue - 消费消息:Message(id=<span class="number">1</span>, message=message1)</span><br><span class="line"><span class="number">14</span>:<span class="number">11</span>:<span class="number">28</span> [生产者<span class="number">2</span>] c.MessageQueue - 生产消息:Message(id=<span class="number">2</span>, message=message2)</span><br><span class="line"><span class="number">14</span>:<span class="number">11</span>:<span class="number">29</span> [消费者] c.MessageQueue - 消费消息:Message(id=<span class="number">3</span>, message=message3)</span><br><span class="line"><span class="number">14</span>:<span class="number">11</span>:<span class="number">30</span> [消费者] c.MessageQueue - 消费消息:Message(id=<span class="number">2</span>, message=message2)</span><br><span class="line"><span class="number">14</span>:<span class="number">11</span>:<span class="number">31</span> [消费者] c.MessageQueue - 队列为空，消费者线程等待中...</span><br></pre></td></tr></table></figure><h2 id="9-park-amp-unPark"><a href="#9-park-amp-unPark" class="headerlink" title="9.park&amp;unPark"></a>9.park&amp;unPark</h2><h3 id="9-1-基本使用"><a href="#9-1-基本使用" class="headerlink" title="9.1 基本使用"></a>9.1 基本使用</h3><p>这两个方法是LockSupport类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暂停当前线程</span></span><br><span class="line">LockSupport.park();</span><br><span class="line"><span class="comment">// 恢复某个线程的运行</span></span><br><span class="line">LockSupport.unpark(暂停线程对象);</span><br></pre></td></tr></table></figure><p>先park再unpark</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ParkUnParkTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParkUnParkTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            log.debug(<span class="string">"start..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"park..."</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">"resume..."</span>);</span><br><span class="line">        &#125;,<span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"unpark..."</span>);</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">02</span>:<span class="number">32</span> [t1] c.ParkUnParkTest - start...</span><br><span class="line"><span class="number">15</span>:<span class="number">02</span>:<span class="number">33</span> [t1] c.ParkUnParkTest - park...</span><br><span class="line"><span class="number">15</span>:<span class="number">02</span>:<span class="number">34</span> [main] c.ParkUnParkTest - unpark...</span><br><span class="line"><span class="number">15</span>:<span class="number">02</span>:<span class="number">34</span> [t1] c.ParkUnParkTest - resume...</span><br></pre></td></tr></table></figure><p>先unpark再park</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ParkUnParkTest1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParkUnParkTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            log.debug(<span class="string">"start..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"park..."</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">"resume..."</span>);</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">"t2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">"unpark..."</span>);</span><br><span class="line">        LockSupport.unpark(t2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">37</span> [t2] c.ParkUnParkTest1 - start...</span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">38</span> [main] c.ParkUnParkTest1 - unpark...</span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">39</span> [t2] c.ParkUnParkTest1 - park...</span><br><span class="line"><span class="number">15</span>:<span class="number">18</span>:<span class="number">39</span> [t2] c.ParkUnParkTest1 - resume...</span><br></pre></td></tr></table></figure><h3 id="9-2-特点"><a href="#9-2-特点" class="headerlink" title="9.2 特点"></a>9.2 特点</h3><p>与<code>Object</code>的<code>wait &amp; notify</code>相比</p><ul><li><code>wait，notify</code>和<code>notifyAll</code>必须配合<code>Object Monitor</code>一起使用，而<code>park，unpark</code>不必。</li><li><code>park &amp; unpark</code>是以线程为单位来<strong>阻塞</strong>和<strong>唤醒</strong>线程，而<code>notify</code>只能随机唤醒一个等待线程，<code>notifyAll</code>是唤星所有等待线程，就不那么精确。</li><li><code>park &amp; unpark</code>可以先<code>unpark</code>,而<code>wait &amp; notify</code>不能先<code>notify</code>。</li></ul><h3 id="9-3-原理-之-park-unpark-原理"><a href="#9-3-原理-之-park-unpark-原理" class="headerlink" title="9.3 原理 之 park unpark 原理"></a>9.3 原理 之 park unpark 原理</h3><p>每个线程都有自己的一个 <code>Parker</code> 对象，由三部分组成 <code>_counter</code> ， <code>_cond</code> 和 <code>_mutex</code> 打个比喻</p><ul><li>线程就像一个旅人，Parker 就像他随身携带的背包，条件变量就好比背包中的帐篷。_counter 就好比背包中 的备用干粮（0 为耗尽，1 为充足)</li><li>调用 park 就是要看需不需要停下来歇息 <ul><li>如果备用干粮耗尽，那么钻进帐篷歇息 </li><li>如果备用干粮充足，那么不需停留，继续前进 </li></ul></li><li>调用 unpark，就好比令干粮充足 <ul><li>如果这时线程还在帐篷，就唤醒让他继续前进 </li><li>如果这时线程还在运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需停留继续前进 <ul><li>因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮</li></ul></li></ul></li></ul><p><img src="park1unpark2.png" alt></p><ol><li>当前线程调用 Unsafe.park() 方法 </li><li>检查 _counter ，本情况为 0，这时，获得 _mutex 互斥锁 </li><li>线程进入 _cond 条件变量阻塞 </li><li>设置 _counter = 0</li></ol><p><img src="unpark1park2.png" alt></p><ol><li>调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1 </li><li>唤醒 _cond 条件变量中的 Thread_0 </li><li>Thread_0 恢复运行 </li><li>设置 _counter 为 0</li></ol><hr><p><img src="unpark_park.png" alt></p><ol><li>调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1 </li><li>当前线程调用 Unsafe.park() 方法 </li><li>检查 _counter ，本情况为 1，这时线程无需阻塞，继续运行 </li><li>设置 _counter 为 0</li></ol><h2 id="10-线程状态转换"><a href="#10-线程状态转换" class="headerlink" title="10. 线程状态转换"></a>10. 线程状态转换</h2><p><img src="%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2.png" alt></p><blockquote><p>以下情况假设有线程<code>Thread t</code></p></blockquote><h3 id="情况1-NEW-➡-RUNNABLE"><a href="#情况1-NEW-➡-RUNNABLE" class="headerlink" title="情况1 NEW ➡ RUNNABLE"></a>情况1 <code>NEW ➡ RUNNABLE</code></h3><ul><li>当调用<code>t.start()</code>方法时，由<code>NEW➡RUNNABLE</code></li></ul><h3 id="情况2-RUNNABLE-⬅➡-WAITING"><a href="#情况2-RUNNABLE-⬅➡-WAITING" class="headerlink" title="情况2 RUNNABLE ⬅➡ WAITING"></a>情况2 <code>RUNNABLE ⬅➡ WAITING</code></h3><p>t线程用<code>synchronized(obj)</code>获取对象锁后</p><ul><li>调用<code>obj.wait()</code>方法时，他线程从<code>RUNNABLE ➡WAITING</code></li><li>调用<code>obj.notify()</code>,<code>obj.notifyAll()</code>,<code>t.interrupt()</code>时，<ul><li>竞争锁成功，t线程从<code>WAITING ➡ RUNNABLE</code></li><li>竞争锁失败，t线程从<code>WAITING ➡BLOCKED</code></li></ul></li></ul><h3 id="情况3-RUNNABLE⬅➡WAITING"><a href="#情况3-RUNNABLE⬅➡WAITING" class="headerlink" title="情况3 RUNNABLE⬅➡WAITING"></a>情况3 <code>RUNNABLE⬅➡WAITING</code></h3><ul><li>当前线程调用<code>t.join()</code>方法时，当前线程从<code>RUNNABLE➡WAITING</code><ul><li>注意是当前线程在t线程对象的监视器上等待</li></ul></li><li>t线程运行结束，或调用了当前线程的<code>interrupt()</code>时，当前线程从<code>WAITING➡RUNNABLE</code></li></ul><h3 id="情况4-RUNNABLE⬅➡WAITING"><a href="#情况4-RUNNABLE⬅➡WAITING" class="headerlink" title="情况4 RUNNABLE⬅➡WAITING"></a>情况4 <code>RUNNABLE⬅➡WAITING</code></h3><ul><li>当前线程调用 <code>LockSupport.park()</code> 方法会让当前线程从 <code>RUNNABLE ➡ WAITING</code> 调用</li><li><code>LockSupport.unpark(目标线程)</code> 或调用了线程 的 <code>interrupt()</code> ，会让目标线程从 <code>WAITING ➡ RUNNABLE</code></li></ul><h3 id="情况5-RUNNABLE⬅➡TIMED-WAITING"><a href="#情况5-RUNNABLE⬅➡TIMED-WAITING" class="headerlink" title="情况5 RUNNABLE⬅➡TIMED_WAITING"></a>情况5 <code>RUNNABLE⬅➡TIMED_WAITING</code></h3><ul><li>t 线程用 <code>synchronized(obj)</code> 获取了对象锁后 <ul><li>调用 <code>obj.wait(long n)</code> 方法时，t 线程从 <code>RUNNABLE ➡TIMED_WAITING</code> </li><li>t 线程等待时间超过了 n 毫秒，或调用 <code>obj.notify()</code> ， <code>obj.notifyAll()</code> ， <code>t.interrupt()</code> 时 <ul><li>竞争锁成功，t 线程从 <code>TIMED_WAITING ➡ RUNNABLE</code> </li><li>竞争锁失败，t 线程从 <code>TIMED_WAITING ➡ BLOCKED</code></li></ul></li></ul></li></ul><h3 id="情况6-RUNNABLE⬅➡TIMED-WAITING"><a href="#情况6-RUNNABLE⬅➡TIMED-WAITING" class="headerlink" title="情况6 RUNNABLE⬅➡TIMED_WAITING"></a>情况6 <code>RUNNABLE⬅➡TIMED_WAITING</code></h3><ul><li>当前线程调用 <code>t.join(long n)</code> 方法时，当前线程从 <code>RUNNABLE➡TIMED_WAITING</code> <ul><li>注意是当前线程在t 线程对象的监视器上等待</li></ul></li><li>当前线程等待时间超过了 n 毫秒，或t 线程运行结束，或调用了当前线程的 <code>interrupt()</code> 时，当前线程从 <code>TIMED_WAITING ➡ RUNNABLE</code></li></ul><h3 id="情况7-RUNNABLE⬅➡TIMED-WAITING"><a href="#情况7-RUNNABLE⬅➡TIMED-WAITING" class="headerlink" title="情况7 RUNNABLE⬅➡TIMED_WAITING"></a>情况7 <code>RUNNABLE⬅➡TIMED_WAITING</code></h3><ul><li>当前线程调用 <code>Thread.sleep(long n)</code> ，当前线程从 <code>RUNNABLE ➡ TIMED_WAITING</code> </li><li>当前线程等待时间超过了 n 毫秒，当前线程从 <code>TIMED_WAITING ➡ RUNNABLE</code></li></ul><h3 id="情况8-RUNNABLE⬅➡TIMED-WAITING"><a href="#情况8-RUNNABLE⬅➡TIMED-WAITING" class="headerlink" title="情况8 RUNNABLE⬅➡TIMED_WAITING"></a>情况8 <code>RUNNABLE⬅➡TIMED_WAITING</code></h3><ul><li>当前线程调用 <code>LockSupport.parkNanos(long nanos)</code> 或 <code>LockSupport.parkUntil(long millis)</code> 时，当前线 程从 <code>RUNNABLE ➡ TIMED_WAITING</code></li><li>调用 <code>LockSupport.unpark(目标线程)</code> 或调用了线程 的 <code>interrupt()</code> ，或是等待超时，会让目标线程从 <code>TIMED_WAITING➡RUNNABLE</code></li></ul><h3 id="情况9-RUNNABLE-⬅➡-BLOCKED"><a href="#情况9-RUNNABLE-⬅➡-BLOCKED" class="headerlink" title="情况9 RUNNABLE ⬅➡ BLOCKED"></a>情况9 <code>RUNNABLE ⬅➡ BLOCKED</code></h3><ul><li>t 线程用 <code>synchronized(obj)</code> 获取了对象锁时如果竞争失败，从 <code>RUNNABLE ➡ BLOCKED</code> </li><li>持 obj 锁线程的同步代码块执行完毕，会唤醒该对象上所有 <code>BLOCKED</code> 的线程重新竞争，如果其中 t 线程竞争 成功，从 <code>BLOCKED ➡ RUNNABLE</code> ，其它失败的线程仍然 <code>BLOCKED</code></li></ul><h3 id="情况10-RUNNABLE-⬅➡-TERMINATED"><a href="#情况10-RUNNABLE-⬅➡-TERMINATED" class="headerlink" title="情况10  RUNNABLE ⬅➡ TERMINATED"></a>情况10  <code>RUNNABLE ⬅➡ TERMINATED</code></h3><p>当前线程所有代码运行完毕，进入 <code>TERMINATED</code></p><h2 id="11-多把锁"><a href="#11-多把锁" class="headerlink" title="11. 多把锁"></a>11. 多把锁</h2><p>一间大屋子有两个功能：睡觉、学习，互不相干。 现在小南要学习，小女要睡觉，但如果只用一间屋子（一个对象锁）的话，那么并发度很低 解决方法是准备多个房间（多个对象锁）</p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.MultiLockTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiLockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigRooms bigRooms = <span class="keyword">new</span> BigRooms();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bigRooms.sleep();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小南"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bigRooms.study();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小女"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BigRooms"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigRooms</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">"休息1h"</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">"学习2h"</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">11</span> [小南] c.BigRooms - 休息<span class="number">1</span>h</span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">12</span> [小女] c.BigRooms - 学习<span class="number">2</span>h</span><br></pre></td></tr></table></figure><p>细分锁粒度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.MultiLockTest01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiLockTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rooms bigRooms = <span class="keyword">new</span> Rooms();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bigRooms.sleep();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小南"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bigRooms.study();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"小女"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.BigRooms"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rooms</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object studyRoom = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object bedRoom = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (bedRoom) &#123;</span><br><span class="line">            log.debug(<span class="string">"休息1h"</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (studyRoom) &#123;</span><br><span class="line">            log.debug(<span class="string">"学习2h"</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">22</span>:<span class="number">12</span> [小南] c.BigRooms - 休息<span class="number">1</span>h</span><br><span class="line"><span class="number">11</span>:<span class="number">22</span>:<span class="number">12</span> [小女] c.BigRooms - 学习<span class="number">2</span>h</span><br></pre></td></tr></table></figure><p>将锁的粒度细分 </p><ul><li>好处，是可以增强并发度 </li><li>坏处，如果一个线程需要同时获得多把锁，就容易发生死锁</li></ul><h2 id="12-活跃性"><a href="#12-活跃性" class="headerlink" title="12. 活跃性"></a>12. 活跃性</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>有这样的情况：一个线程需要同时获取多把锁，这时就容易发生死锁 <code>t1</code> 线程 获得 <code>o1</code>对象 锁，接下来想获取 <code>o2</code>对象 的锁 <code>t2</code> 线程 获得 <code>o2</code>对象 锁，接下来想获取 <code>o1</code>对象 的锁 例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.DeadLockTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">        Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                log.debug(<span class="string">"lock o1"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    log.debug(<span class="string">"lock o2"</span>);</span><br><span class="line">                    log.debug(<span class="string">"操作..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                log.debug(<span class="string">"lock o2"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    log.debug(<span class="string">"lock o1"</span>);</span><br><span class="line">                    log.debug(<span class="string">"操作..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">54</span>:<span class="number">58</span> [t2] c.DeadLockTest - lock o2</span><br><span class="line"><span class="number">11</span>:<span class="number">54</span>:<span class="number">58</span> [t1] c.DeadLockTest - lock o1</span><br></pre></td></tr></table></figure><h3 id="定位死锁"><a href="#定位死锁" class="headerlink" title="定位死锁"></a>定位死锁</h3><p>检测死锁可以使用 <code>jconsole</code>工具，或者使用<code>jps</code> 定位进程 <code>id</code>，再用 <code>jstack</code> 定位死锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">PS D:\idea_projects\java-example&gt; jps</span><br><span class="line">295844 Launcher</span><br><span class="line">7236     </span><br><span class="line">65464 Jps</span><br><span class="line">289576 DeadLockTest</span><br><span class="line">PS D:\idea_projects\java-example&gt; jstack 289576</span><br><span class="line">2022-05-30 13:30:47</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.251-b08 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;DestroyJavaVM&quot; #14 prio=5 os_prio=0 tid=0x0000000003373000 nid=0x48aac waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;t2&quot; #13 prio=5 os_prio=0 tid=0x00000000200fb000 nid=0x31d70 waiting for monitor entry [0x000000002060e000]      </span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at com.java.demo.monitor.DeadLockTest.lambda$main$1(DeadLockTest.java:38)</span><br><span class="line">        - waiting to lock &lt;0x000000076d0ac540&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076d0ac550&gt; (a java.lang.Object)</span><br><span class="line">        at com.java.demo.monitor.DeadLockTest$$Lambda$2/1416233903.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">&quot;t1&quot; #12 prio=5 os_prio=0 tid=0x00000000200fa800 nid=0x41234 waiting for monitor entry [0x000000002050f000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at com.java.demo.monitor.DeadLockTest.lambda$main$0(DeadLockTest.java:22)</span><br><span class="line">        - waiting to lock &lt;0x000000076d0ac550&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076d0ac540&gt; (a java.lang.Object)</span><br><span class="line">        at com.java.demo.monitor.DeadLockTest$$Lambda$1/787387795.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">&quot;Service Thread&quot; #11 daemon prio=9 os_prio=0 tid=0x000000001ed09000 nid=0x44e10 runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C1 CompilerThread3&quot; #10 daemon prio=9 os_prio=2 tid=0x000000001ec6b800 nid=0x48704 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread2&quot; #9 daemon prio=9 os_prio=2 tid=0x000000001ec5e800 nid=0x2c260 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread1&quot; #8 daemon prio=9 os_prio=2 tid=0x000000001ec5a800 nid=0x46d84 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread0&quot; #7 daemon prio=9 os_prio=2 tid=0x000000001ec59000 nid=0x455fc waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Monitor Ctrl-Break&quot; #6 daemon prio=5 os_prio=0 tid=0x000000001ec56000 nid=0x475c4 runnable [0x000000001f46e000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:171)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:141)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</span><br><span class="line">        - locked &lt;0x000000076c6449c0&gt; (a java.io.InputStreamReader)</span><br><span class="line">        at java.io.InputStreamReader.read(InputStreamReader.java:184)</span><br><span class="line">        at java.io.BufferedReader.fill(BufferedReader.java:161)</span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:324)</span><br><span class="line">        - locked &lt;0x000000076c6449c0&gt; (a java.io.InputStreamReader)</span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:389)</span><br><span class="line">        at com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:49)</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #5 daemon prio=5 os_prio=2 tid=0x000000001eb8e000 nid=0x438e0 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=2 tid=0x000000001eb8d000 nid=0x466cc runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Finalizer&quot; #3 daemon prio=8 os_prio=1 tid=0x000000001eb21000 nid=0x46710 in Object.wait() [0x000000001f0ff000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x000000076c388ee0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)</span><br><span class="line">        - locked &lt;0x000000076c388ee0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)</span><br><span class="line">        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)</span><br><span class="line"></span><br><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=2 tid=0x000000001eb20800 nid=0x43f74 in Object.wait() [0x000000001effe000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x000000076c386c00&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">        at java.lang.Object.wait(Object.java:502)</span><br><span class="line">        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">        - locked &lt;0x000000076c386c00&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os_prio=2 tid=0x000000001cd18800 nid=0x46ad4 runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#0 (ParallelGC)&quot; os_prio=0 tid=0x0000000003388800 nid=0x3b034 runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#1 (ParallelGC)&quot; os_prio=0 tid=0x000000000338a000 nid=0x47e3c runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#2 (ParallelGC)&quot; os_prio=0 tid=0x000000000338b800 nid=0x48a60 runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#3 (ParallelGC)&quot; os_prio=0 tid=0x000000000338d800 nid=0x47aac runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#4 (ParallelGC)&quot; os_prio=0 tid=0x000000000338f800 nid=0x473c8 runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#5 (ParallelGC)&quot; os_prio=0 tid=0x0000000003391800 nid=0x48494 runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#6 (ParallelGC)&quot; os_prio=0 tid=0x0000000003395000 nid=0x46dec runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#7 (ParallelGC)&quot; os_prio=0 tid=0x0000000003396000 nid=0x4794c runnable</span><br><span class="line"></span><br><span class="line">&quot;VM Periodic Task Thread&quot; os_prio=2 tid=0x000000001ed8a000 nid=0x482b4 waiting on condition</span><br><span class="line"></span><br><span class="line">JNI global references: 316</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line">&quot;t2&quot;:</span><br><span class="line">  waiting to lock monitor 0x000000001cd20e58 (object 0x000000076d0ac540, a java.lang.Object),</span><br><span class="line">  which is held by &quot;t1&quot;</span><br><span class="line">&quot;t1&quot;:</span><br><span class="line">  waiting to lock monitor 0x000000001cd23218 (object 0x000000076d0ac550, a java.lang.Object),</span><br><span class="line">  which is held by &quot;t2&quot;</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">&quot;t2&quot;:</span><br><span class="line">        at com.java.demo.monitor.DeadLockTest.lambda$main$1(DeadLockTest.java:38)</span><br><span class="line">        - waiting to lock &lt;0x000000076d0ac540&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076d0ac550&gt; (a java.lang.Object)</span><br><span class="line">        at com.java.demo.monitor.DeadLockTest$$Lambda$2/1416233903.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">&quot;t1&quot;:</span><br><span class="line">        at com.java.demo.monitor.DeadLockTest.lambda$main$0(DeadLockTest.java:22)</span><br><span class="line">        - waiting to lock &lt;0x000000076d0ac550&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076d0ac540&gt; (a java.lang.Object)</span><br><span class="line">        at com.java.demo.monitor.DeadLockTest$$Lambda$1/787387795.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br><span class="line"></span><br><span class="line">PS D:\idea_projects\java-example&gt;</span><br></pre></td></tr></table></figure><h3 id="哲学家就餐—死锁问题"><a href="#哲学家就餐—死锁问题" class="headerlink" title="哲学家就餐—死锁问题"></a>哲学家就餐—死锁问题</h3><p><img src="%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90.png" alt></p><p>有五位哲学家，围坐在圆桌旁。 他们只做两件事，思考和吃饭，思考一会吃口饭，吃完饭后接着思考。 吃饭时要用两根筷子吃，桌上共有 5 根筷子，每位哲学家左右手边各有一根筷子。 如果筷子被身边的人拿着，自己就得等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chopstick</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"筷子&#123;"</span> + name + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Philpsopher"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Chopstick left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Chopstick right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Philosopher</span><span class="params">(String name,Chopstick left,Chopstick right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"eating..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 获得左手筷子</span></span><br><span class="line">            <span class="keyword">synchronized</span> (left) &#123;</span><br><span class="line">                <span class="comment">// 获得右手筷子</span></span><br><span class="line">                <span class="keyword">synchronized</span> (right) &#123;</span><br><span class="line">                    <span class="comment">// 吃饭</span></span><br><span class="line">                    eat();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 放下右手筷子</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 放下左手筷子</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chopstick c1 = <span class="keyword">new</span> Chopstick(<span class="string">"1"</span>);</span><br><span class="line">        Chopstick c2 = <span class="keyword">new</span> Chopstick(<span class="string">"2"</span>);</span><br><span class="line">        Chopstick c3 = <span class="keyword">new</span> Chopstick(<span class="string">"3"</span>);</span><br><span class="line">        Chopstick c4 = <span class="keyword">new</span> Chopstick(<span class="string">"4"</span>);</span><br><span class="line">        Chopstick c5 = <span class="keyword">new</span> Chopstick(<span class="string">"5"</span>);</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">"苏格拉底"</span>, c1, c2).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">"柏拉图"</span>, c2, c3).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">"亚里士多德"</span>, c3, c4).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">"赫拉克利特"</span>, c4, c5).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">"阿基米德"</span>, c5, c1).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行一小会，执行不下去了，卡住了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">17</span>:<span class="number">22</span> [苏格拉底] c.Philpsopher - eating...</span><br><span class="line"><span class="number">14</span>:<span class="number">17</span>:<span class="number">22</span> [亚里士多德] c.Philpsopher - eating...</span><br><span class="line"><span class="number">14</span>:<span class="number">17</span>:<span class="number">23</span> [亚里士多德] c.Philpsopher - eating...</span><br><span class="line"><span class="number">14</span>:<span class="number">17</span>:<span class="number">23</span> [阿基米德] c.Philpsopher - eating...</span><br><span class="line"><span class="number">14</span>:<span class="number">17</span>:<span class="number">24</span> [阿基米德] c.Philpsopher - eating...</span><br><span class="line"><span class="number">14</span>:<span class="number">17</span>:<span class="number">24</span> [亚里士多德] c.Philpsopher - eating...</span><br><span class="line"><span class="number">14</span>:<span class="number">17</span>:<span class="number">25</span> [阿基米德] c.Philpsopher - eating...</span><br></pre></td></tr></table></figure><p>使用 <code>jconsole</code> 检测死锁，发现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">名称: 阿基米德</span><br><span class="line">状态: com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">609</span>a727c上的BLOCKED, 拥有者: 苏格拉底</span><br><span class="line">总阻止数: <span class="number">4</span>, 总等待数: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com.java.demo.monitor.deadlock.v1.Philosopher.run(Philosopher.java:<span class="number">37</span>)</span><br><span class="line">   - 已锁定 com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">28362027</span>  </span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">名称: 苏格拉底</span><br><span class="line">状态: com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">39722420</span>上的BLOCKED, 拥有者: 柏拉图</span><br><span class="line">总阻止数: <span class="number">2</span>, 总等待数: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com.java.demo.monitor.deadlock.v1.Philosopher.run(Philosopher.java:<span class="number">37</span>)</span><br><span class="line">   - 已锁定 com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">609</span>a727c</span><br><span class="line">-------------------------------------------------------------------- </span><br><span class="line">名称: 柏拉图</span><br><span class="line">状态: com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">704889</span>ef上的BLOCKED, 拥有者: 亚里士多德</span><br><span class="line">总阻止数: <span class="number">2</span>, 总等待数: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com.java.demo.monitor.deadlock.v1.Philosopher.run(Philosopher.java:<span class="number">37</span>)</span><br><span class="line">   - 已锁定 com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">39722420</span></span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">名称: 亚里士多德</span><br><span class="line">状态: com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">39</span>eac34d上的BLOCKED, 拥有者: 赫拉克利特</span><br><span class="line">总阻止数: <span class="number">12</span>, 总等待数: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com.java.demo.monitor.deadlock.v1.Philosopher.run(Philosopher.java:<span class="number">37</span>)</span><br><span class="line">   - 已锁定 com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">704889</span>ef</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">名称: 赫拉克利特</span><br><span class="line">状态: com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">28362027</span>上的BLOCKED, 拥有者: 阿基米德</span><br><span class="line">总阻止数: <span class="number">2</span>, 总等待数: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">com.java.demo.monitor.deadlock.v1.Philosopher.run(Philosopher.java:<span class="number">37</span>)</span><br><span class="line">   - 已锁定 com.java.demo.monitor.deadlock.v1.Chopstick@<span class="number">39</span>eac34d</span><br></pre></td></tr></table></figure><h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><p>活锁出现在两个线程互相改变对方的结束条件，最后谁也无法结束，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor.livelock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.LiveLockTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiveLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 期望减到 0 退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">                log.debug(<span class="string">"count: &#123;&#125;"</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 期望减到 0 退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">                log.debug(<span class="string">"count: &#123;&#125;"</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h3><p>很多教程中把饥饿定义为，一个线程由于优先级太低，始终得不到 CPU 调度执行，也不能够结束，饥饿的情况不易演示，读写锁时会涉及饥饿问题。</p><p>用顺序加锁的方式解决之前的死锁问题</p><p><img src="%E6%AD%BB%E9%94%81.png" alt></p><p>顺序加锁的解决方案</p><p><img src="%E6%AD%BB%E9%94%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88_%E9%A1%BA%E5%BA%8F%E5%8A%A0%E9%94%81.png" alt></p><h2 id="13-ReentrantLock"><a href="#13-ReentrantLock" class="headerlink" title="13.  ReentrantLock"></a>13.  ReentrantLock</h2><p>相对于 synchronized 它具备如下特点 </p><ul><li>可中断 </li><li>可以设置超时时间 </li><li>可以设置为公平锁 </li><li>支持多个条件变量   </li></ul><p>与<code>synchronized</code>一样，都支持可重入</p><p><strong>基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line">reentrantLock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#125;funally&#123;</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    reentrantLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-1-可重入"><a href="#13-1-可重入" class="headerlink" title="13.1 可重入"></a>13.1 可重入</h3><p><strong>可重入</strong>是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁。 <strong>如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor.reentrantlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ReentrantTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            log.debug(<span class="string">"excute main method..."</span>);</span><br><span class="line">            m1();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            log.debug(<span class="string">"excute m1 method..."</span>);</span><br><span class="line">            m2();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            log.debug(<span class="string">"excute m2 method..."</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">38</span>:<span class="number">40</span> [main] c.ReentrantTest - excute main method...</span><br><span class="line"><span class="number">15</span>:<span class="number">38</span>:<span class="number">40</span> [main] c.ReentrantTest - excute m1 method...</span><br><span class="line"><span class="number">15</span>:<span class="number">38</span>:<span class="number">40</span> [main] c.ReentrantTest - excute m2 method...</span><br></pre></td></tr></table></figure><h3 id="13-2-可打断"><a href="#13-2-可打断" class="headerlink" title="13.2 可打断"></a>13.2 可打断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor.reentrantlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.InterruptTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">"尝试去获得锁..."</span>);</span><br><span class="line">                lock.lockInterruptibly();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                log.debug(<span class="string">"获得锁过程中被打断，没有获得锁..."</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">"获得锁..."</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">"打断t1..."</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>:<span class="number">23</span>:<span class="number">22</span> [t1] c.InterruptTest - 尝试去获得锁...</span><br><span class="line"><span class="number">20</span>:<span class="number">23</span>:<span class="number">23</span> [main] c.InterruptTest - 打断t1...</span><br><span class="line"><span class="number">20</span>:<span class="number">23</span>:<span class="number">23</span> [t1] c.InterruptTest - 获得锁过程中被打断，没有获得锁...</span><br><span class="line">java.lang.InterruptedException</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(AbstractQueuedSynchronizer.java:<span class="number">898</span>)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:<span class="number">1222</span>)</span><br><span class="line">at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:<span class="number">335</span>)</span><br><span class="line">at com.java.demo.monitor.reentrantlock.InterruptTest.lambda$main$<span class="number">0</span>(InterruptTest.java:<span class="number">19</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><h3 id="13-3-锁超时"><a href="#13-3-锁超时" class="headerlink" title="13.3 锁超时"></a>13.3 锁超时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor.reentrantlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.LockTimeoutTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTimeoutTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"尝试获取锁..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!lock.tryLock(<span class="number">2</span>, TimeUnit.SECONDS))&#123;</span><br><span class="line">                    log.debug(<span class="string">"获取不到锁..."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                log.debug(<span class="string">"获取到锁..."</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        log.debug(<span class="string">"获得到锁..."</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">"释放了锁..."</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>:<span class="number">24</span>:<span class="number">18</span> [main] c.LockTimeoutTest - 获得到锁...</span><br><span class="line"><span class="number">20</span>:<span class="number">24</span>:<span class="number">18</span> [t1] c.LockTimeoutTest - 尝试获取锁...</span><br><span class="line"><span class="number">20</span>:<span class="number">24</span>:<span class="number">19</span> [main] c.LockTimeoutTest - 释放了锁...</span><br><span class="line"><span class="number">20</span>:<span class="number">24</span>:<span class="number">19</span> [t1] c.LockTimeoutTest - 获取到锁...</span><br></pre></td></tr></table></figure><h3 id="13-4-公平锁"><a href="#13-4-公平锁" class="headerlink" title="13.4 公平锁"></a>13.4 公平锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor.reentrantlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.FairLockTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FairLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                log.debug(<span class="string">"&#123;&#125; is start..."</span>,Thread.currentThread().getName());</span><br><span class="line">                running();</span><br><span class="line">            &#125;, <span class="string">"t"</span> + (i + <span class="number">1</span>)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                log.debug(<span class="string">"&#123;&#125; 获取到锁..."</span>,Thread.currentThread().getName());</span><br><span class="line">            &#125;  <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-5-条件变量"><a href="#13-5-条件变量" class="headerlink" title="13.5 条件变量"></a>13.5 条件变量</h3><p><code>synchronized</code> 中也有条件变量，就是我们讲原理时那个 <code>waitSet</code> 休息室，当条件不满足时进入 <code>waitSet</code> 等待 。</p><p><code>ReentrantLock</code> 的条件变量比 <code>synchronized</code> 强大之处在于，它是支持多个条件变量的，这就好比 </p><ul><li><code>synchronized</code> 是那些不满足条件的线程都在一间休息室等消息 </li><li>而 <code>ReentrantLock</code> 支持多间休息室，有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒 </li></ul><p>使用要点：</p><ul><li><code>await</code> 前需要获得锁 </li><li><code>await</code> 执行后，会释放锁，进入 <code>conditionObject</code> 等待 </li><li><code>await</code> 的线程被唤醒（或打断、或超时）取重新竞争 <code>lock</code> 锁 </li><li>竞争 <code>lock</code> 锁成功后，从 <code>await</code> 后继续执行</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.monitor.reentrantlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ContionTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Condition waitCigaretteQueue = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Condition waitTakeoutQueue = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> hasCigarette = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> hasTakeout = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                log.debug(<span class="string">"没香烟！先歇会！"</span>);</span><br><span class="line">                <span class="keyword">while</span> (!hasCigarette)&#123;</span><br><span class="line">                    waitCigaretteQueue.await();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"有烟了，抽完烟开始干活..."</span>);</span><br><span class="line">        &#125;,<span class="string">"小南"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                log.debug(<span class="string">"没外卖！先歇会！"</span>);</span><br><span class="line">                <span class="keyword">while</span> (!hasTakeout)&#123;</span><br><span class="line">                    waitTakeoutQueue.await();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"外卖到了，干完饭开始干活..."</span>);</span><br><span class="line">        &#125;,<span class="string">"小女"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                log.debug(<span class="string">"您好！美团外卖，您的香烟到了！"</span>);</span><br><span class="line">                hasCigarette = <span class="keyword">true</span>;</span><br><span class="line">                waitCigaretteQueue.signal();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">"送烟的"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                log.debug(<span class="string">"您好！饿了么，您的外卖到了！"</span>);</span><br><span class="line">                hasTakeout = <span class="keyword">true</span>;</span><br><span class="line">                waitTakeoutQueue.signal();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">"送外卖的"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span>:<span class="number">16</span>:<span class="number">20</span> [小南] c.ContionTest - 没香烟！先歇会！</span><br><span class="line"><span class="number">22</span>:<span class="number">16</span>:<span class="number">20</span> [小女] c.ContionTest - 没外卖！先歇会！</span><br><span class="line"><span class="number">22</span>:<span class="number">16</span>:<span class="number">21</span> [送烟的] c.ContionTest - 您好！美团外卖，您的香烟到了！</span><br><span class="line"><span class="number">22</span>:<span class="number">16</span>:<span class="number">21</span> [小南] c.ContionTest - 有烟了，抽完烟开始干活...</span><br><span class="line"><span class="number">22</span>:<span class="number">16</span>:<span class="number">23</span> [送外卖的] c.ContionTest - 您好！饿了么，您的外卖到了！</span><br><span class="line"><span class="number">22</span>:<span class="number">16</span>:<span class="number">23</span> [小女] c.ContionTest - 外卖到了，干完饭开始干活...</span><br></pre></td></tr></table></figure><h3 id="13-6-同步模式-之-顺序控制"><a href="#13-6-同步模式-之-顺序控制" class="headerlink" title="13.6 同步模式 之 顺序控制"></a>13.6 同步模式 之 顺序控制</h3><h4 id="固定顺序输出"><a href="#固定顺序输出" class="headerlink" title="固定顺序输出"></a>固定顺序输出</h4><blockquote><p>比如，必须先 2 后 1 打印</p></blockquote><h5 id="wait-notify版"><a href="#wait-notify版" class="headerlink" title="wait-notify版"></a>wait-notify版</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous.sequencecontrol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.WaitNotifyTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> t2Runed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需求：固定输出顺序，先输出2，再输出1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                <span class="keyword">while</span>(!t2Runed)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">"1"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                log.debug(<span class="string">"2"</span>);</span><br><span class="line">                t2Runed = <span class="keyword">true</span>;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="park-unpark版"><a href="#park-unpark版" class="headerlink" title="park-unpark版"></a>park-unpark版</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous.sequencecontrol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ParkUnParkTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParkUnParkTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">"1"</span>);</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"2"</span>);</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交替输出"><a href="#交替输出" class="headerlink" title="交替输出"></a>交替输出</h4><blockquote><p>线程 1 输出 a 5 次，线程 2 输出 b 5 次，线程 3 输出 c 5 次。现在要求输出 <code>abcabcabcabcabc</code> 怎么实现</p></blockquote><h5 id="wait-notify版-1"><a href="#wait-notify版-1" class="headerlink" title="wait-notify版"></a>wait-notify版</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous.sequencecontrol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.WaitNotifyTest1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WaitNotify waitNotify = <span class="keyword">new</span> WaitNotify(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            waitNotify.print(<span class="string">"a"</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            waitNotify.print(<span class="string">"b"</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            waitNotify.print(<span class="string">"c"</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出内容    等待标记    下一个标记</span></span><br><span class="line"><span class="comment"> * a            1          2</span></span><br><span class="line"><span class="comment"> * b            2          3</span></span><br><span class="line"><span class="comment"> * c            3          1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.WaitNotify"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 等待标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String printStr, <span class="keyword">int</span> waitFlag, <span class="keyword">int</span> nextFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (waitFlag != flag) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(printStr);</span><br><span class="line">                flag = nextFlag;</span><br><span class="line">                <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ReentrantLock条件变量版"><a href="#ReentrantLock条件变量版" class="headerlink" title="ReentrantLock条件变量版"></a>ReentrantLock条件变量版</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous.sequencecontrol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwaitSingleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AwaitSingle awaitSingle = <span class="keyword">new</span> AwaitSingle(<span class="number">5</span>);</span><br><span class="line">        Condition conditionA = awaitSingle.newCondition();</span><br><span class="line">        Condition conditionB = awaitSingle.newCondition();</span><br><span class="line">        Condition conditionC = awaitSingle.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            awaitSingle.print(<span class="string">"a"</span>,conditionA,conditionB);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            awaitSingle.print(<span class="string">"b"</span>,conditionB,conditionC);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            awaitSingle.print(<span class="string">"c"</span>,conditionC,conditionA);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        awaitSingle.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conditionA.signal();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            awaitSingle.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.AwaitSingle"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AwaitSingle</span> <span class="keyword">extends</span> <span class="title">ReentrantLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String printStr, Condition current, Condition next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                current.await();</span><br><span class="line">                log.debug(printStr);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Park-Unpark版"><a href="#Park-Unpark版" class="headerlink" title="Park Unpark版"></a>Park Unpark版</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pattern.synchronous.sequencecontrol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParkUnparkTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Thread a;<span class="keyword">static</span> Thread b;<span class="keyword">static</span> Thread c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParkUnpark parkUnpark = <span class="keyword">new</span> ParkUnpark(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        a = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            parkUnpark.print(<span class="string">"a"</span>, b);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        b = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            parkUnpark.print(<span class="string">"b"</span>, c);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        c = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            parkUnpark.print(<span class="string">"c"</span>, a);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line">        c.start();</span><br><span class="line"></span><br><span class="line">        LockSupport.unpark(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ParkUnpark"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParkUnpark</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String printStr,Thread t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNum; i++) &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(printStr);</span><br><span class="line">            LockSupport.unpark(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://www.bilibili.com/video/BV16J411h7Rd" target="_blank" rel="noopener">黑马程序员全面深入学习Java并发编程，JUC并发编程全套教程</a><br><a href="https://stackoverflow.com/questions/26357186/what-is-in-java-object-header" target="_blank" rel="noopener">What is in Java object header?</a><br><a href="https://wiki.openjdk.java.net/" target="_blank" rel="noopener">OpenJDK WIKI</a><br><a href="https://segmentfault.com/a/1190000037643624" target="_blank" rel="noopener">JAVA对象布局之对象头(Object Header)</a><br><a href="https://zhuanlan.zhihu.com/p/124278272" target="_blank" rel="noopener">面试官发问：“对象头(object header)”里知多少？</a><br><a href="https://zhuanlan.zhihu.com/p/104494807" target="_blank" rel="noopener">Java的对象模型——Oop-Klass模型（一）</a>  </p><blockquote><p>JVM 32bit 和JVM 64bit的区别如下:   </p><ol><li>目前只有server VM支持64bit JVM，client不支持32bit JVM。   </li><li>The Java Plug-in, AWT Robot and Java Web Start这些组件目前不支持64bit JVM </li><li>本地代码的影响：对JNI的编程接口没有影响，但是针对32-bit VM写的代码必须重新编译才能在64-bit VM工作。 </li><li>32-bit JVM堆大小最大是4G, 64-bit VMs 上, Java堆的大小受限于物理内存和操作系统提供的虚拟内存。(这里的堆并不严谨) </li><li>线程的默认堆栈大小：在windows上32位JVM,默认堆栈最大是320k 64-bit JVM是1024K。 </li><li>性能影响:<br>(1)64bit JVM相比32bit JVM,在大量的内存访问的情况下，其性能损失更少，AMD64和EM64T平台在64位模式下运行时，Java虚拟机得到了一些额外的寄存器，它可以用来生成更有效的原生指令序列。<br>(2)性能上，在SPARC 处理器上，当一个java应用程序从32bit 平台移植到64bit平台的64bit JVM会用大约 10-20%的性能损失，而在AMD64和 EM64T平台上，其性能损失的范围在0-15%. </li></ol></blockquote><p>以上摘自<a href="http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_description" target="_blank" rel="noopener">http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_description</a> </p><p>[Java微基准测试框架JMH - 知乎 (zhihu.com)](</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://10veU.github.io/categories/Java/"/>
    
      <category term="并发编程" scheme="https://10veU.github.io/categories/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://10veU.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://10veU.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发编程" scheme="https://10veU.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程（一） 基础篇</title>
    <link href="https://10veU.github.io/2021/12/01/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://10veU.github.io/2021/12/01/Java并发编程（一）-基础篇/</id>
    <published>2021-12-01T16:02:38.000Z</published>
    <updated>2022-06-17T05:59:24.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java并发编程（一）-基础篇"><a href="#Java并发编程（一）-基础篇" class="headerlink" title="Java并发编程（一） 基础篇"></a>Java并发编程（一） 基础篇</h1><h2 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a>1. 进程和线程</h2><h3 id="1-1-什么是进程（Process）"><a href="#1-1-什么是进程（Process）" class="headerlink" title="1.1 什么是进程（Process）"></a>1.1 什么是进程（Process）</h3><p><strong>进程是操作系统进行资源分配的最小单位</strong>。因为现在的操作系统都是多任务的操作系统，多任务操作系统是允许多个进程在一个cpu上运行的。对于每一个进程而言，都有自己独立的代码和数据空间，这个称之为进程的上下文，cpu从一个进程切换到另外一个进程所做的动作称为进程的上下文切换。操作系统通过频繁的切换进程来实现cpu资源的有效分配，并看起来像在同时运行一样。   进程的上下文切换和进程间的通信需要有较多的开销，为了执行更多的任务，提升系统的效率，引入了线程。一个进程可以有一个或者多个线程所组成。  </p><h3 id="1-2-什么是线程（Thread）"><a href="#1-2-什么是线程（Thread）" class="headerlink" title="1.2 什么是线程（Thread）"></a>1.2 什么是线程（Thread）</h3><p><strong>线程是cpu调度的最小单位</strong>，是进程中的一部分，它由进程所创建产生，一个进程下的线程共享该进程的资源和程序代码。受操作系统的影响，每个操作系统能同时运行的进程数目是有限的，每个进程能够开启的线程数目也是有上限的，在同一个cpu核心上，多个线程以抢占或者主动让出时间片的形式轮流执行。基于同一段代码可以创建多个线程，这些线程共享进程的数据空间，但每个线程有独立的运行栈和程序计数器。</p><h2 id="2-并发与并行"><a href="#2-并发与并行" class="headerlink" title="2. 并发与并行"></a>2. 并发与并行</h2><p><img src="thread.png" alt="并发与并行"></p><h3 id="2-1-什么是并发（Concurrent）"><a href="#2-1-什么是并发（Concurrent）" class="headerlink" title="2.1 什么是并发（Concurrent）"></a>2.1 什么是并发（Concurrent）</h3><p>单核CPU下，线程实际还是<code>串行执行</code>的。操作系统中有一个组件叫做任务调度器，将CPU的时间片（windows下时间片最小约为 15 毫秒）分给不同的程序使用，只是由于CPU在线程间（时间片很短）的切换非常快，人类感觉是同时运行的。总结为一句话就是：<code>微观串行，宏观并行</code>，一般会将这种 线程轮流使用 CPU 的做法称为<strong>并发(concurrent)</strong>。</p><h3 id="2-2-什么是并行（Parallel）"><a href="#2-2-什么是并行（Parallel）" class="headerlink" title="2.2 什么是并行（Parallel）"></a>2.2 什么是并行（Parallel）</h3><p>多核CPU下，每个核（core）都可以调度运行线程，这时候线程可以是<strong>并行</strong>的。</p><p>⾕歌著名⼯程师罗布·派克（Rob Pike）说过，“并发就是同时应对 （Dealing With）多件事情的能⼒，并⾏是同时执⾏（Doing）多件事情的 能⼒”。</p><h2 id="3-为什么使用多线程"><a href="#3-为什么使用多线程" class="headerlink" title="3. 为什么使用多线程"></a>3. 为什么使用多线程</h2><ul><li>更好地利用单个 CPU<br>最常见的原因之一是能够更好地利用计算机中的资源。例如，如果一个线程正在等待对通过网络发送的请求的响应，则另一个线程在此期间可以使用 CPU 执行其他操作。此外，如果计算机具有多个 CPU，或者 CPU 具有多个执行内核，则多线程处理还可以帮助应用程序利用这些额外的 CPU 内核。  </li><li>更好地利用多个 CPU 或 CPU 内核<br>如果计算机包含多个 CPU 或 CPU 包含多个执行内核，则需要使用多个线程，以便应用程序能够利用所有 CPU 或 CPU 内核。单个线程最多只能使用单个 CPU，正如我上面提到的，有时甚至不能完全使用单个 CPU。  </li><li>在响应能力方面提供更好的用户体验<br>使用多线程的另一个原因是提供更好的用户体验。例如，如果您单击 GUI 中的按钮，这会导致通过网络发送请求，则哪个线程执行此请求很重要。如果使用也更新 GUI 的同一线程，则在 GUI 线程等待请求响应时，用户可能会遇到 GUI”挂起”。相反，这样的请求可以由后台线程执行，因此 GUI 线程在此期间可以自由地响应其他用户请求。  </li><li>在公平性方面提供更好的用户体验<br>第四个原因是在用户之间更公平地共享计算机的资源。例如，假设一个服务器接收来自客户端的请求，并且只有一个线程来执行这些请求。如果客户端发送的请求需要很长时间才能处理，则所有其他客户端的请求都必须等到该请求完成。通过让每个客户端的请求由其自己的线程执行，那么没有一个任务可以完全垄断CPU。  <h2 id="4-Java线程"><a href="#4-Java线程" class="headerlink" title="4.Java线程"></a>4.Java线程</h2><h3 id="4-1-创建和运行线程"><a href="#4-1-创建和运行线程" class="headerlink" title="4.1 创建和运行线程"></a>4.1 创建和运行线程</h3><h4 id="4-1-1-直接使用Thread"><a href="#4-1-1-直接使用Thread" class="headerlink" title="4.1.1 直接使用Thread"></a>4.1.1 直接使用Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Test01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 任务代码</span></span><br><span class="line">                log.debug(<span class="string">"running"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 线程命名</span></span><br><span class="line">        t.setName(<span class="string">"t1"</span>);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-1-2-使用Runnable配合Thread"><a href="#4-1-2-使用Runnable配合Thread" class="headerlink" title="4.1.2 使用Runnable配合Thread"></a>4.1.2 使用Runnable配合Thread</h4><blockquote><p>把<code>线程</code>和<code>任务（要执行的代码）</code>分开</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Test02"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.debug(<span class="string">"running"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(runnable,<span class="string">"t2"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        log.debug(<span class="string">"running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用lambda简化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">"running1"</span>), <span class="string">"t"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        log.debug(<span class="string">"running1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Thread与Runnable的关系"><a href="#Thread与Runnable的关系" class="headerlink" title="Thread与Runnable的关系"></a>Thread与Runnable的关系</h5><p><code>Thread</code>类中有个<code>Runnable</code>类型的属性，不论是直接使用<code>Thread</code>创建并运行线程还是通过<code>Runnable</code>配合<code>Thread</code>的方式创建运行线程，都是调用<code>Thread</code>的<code>run()</code>方法，其<code>run()</code>方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If this thread was constructed using a separate</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;Runnable&lt;/code&gt; object's &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class="line"><span class="comment">     * otherwise, this method does nothing and returns.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #start()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #stop()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只不过该线程是使用单独的 <code>Runnable</code> 运行对象构造的，则调用该 <code>Runnable</code> 对象的 <code>run</code> 方法；否则，此方法不执行任何操作并返回。<br><code>Thread</code> 的子类应该覆盖这个方法。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>使用<code>Runnable</code>可以把线程和任务分开</li><li>使用 Runnable 更容易与线程池等高级 API 配合</li><li>使用 Runnable 让任务类脱离了 Thread 继承体系，更灵活（一般建议组合关系优于继承关系）  <h4 id="4-1-3-FutureTask配合Thread"><a href="#4-1-3-FutureTask配合Thread" class="headerlink" title="4.1.3 FutureTask配合Thread"></a>4.1.3 FutureTask配合Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.Test03"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建任务对象</span></span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(()-&gt;&#123;</span><br><span class="line">            log.debug(<span class="string">"running"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask,<span class="string">"t"</span>).start();</span><br><span class="line">        <span class="comment">// 主线程阻塞，同步等待futureTask执行结果</span></span><br><span class="line">        String res = futureTask.get();</span><br><span class="line">        log.debug(<span class="string">"结果是：&#123;&#125;"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-查看进程线程的方法"><a href="#4-2-查看进程线程的方法" class="headerlink" title="4.2 查看进程线程的方法"></a>4.2 查看进程线程的方法</h3><h4 id="4-2-1-Windows"><a href="#4-2-1-Windows" class="headerlink" title="4.2.1 Windows"></a>4.2.1 Windows</h4><p>任务管理器  </p><ul><li>可以查看进程和线程数，也可以用来杀死进程<br>cmd窗口  </li><li><code>tasklist</code> 查看所有进程</li><li><code>tasklist | findstr &lt;PID/应用名&gt;</code> 查找进程</li><li><code>taskkill</code> 杀死进程</li></ul><h4 id="4-2-2-Linux"><a href="#4-2-2-Linux" class="headerlink" title="4.2.2 Linux"></a>4.2.2 Linux</h4><ul><li><code>ps -fe</code> 查看所有进程</li><li><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li><li><code>kill</code> 杀死进程</li><li><code>top</code> 按大写 H 切换是否显示线程</li><li><code>top -H -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li></ul><h4 id="4-2-3-Java"><a href="#4-2-3-Java" class="headerlink" title="4.2.3 Java"></a>4.2.3 Java</h4><p>命令式</p><ul><li><code>jps</code> 命令查看所有 Java 进程</li><li><code>jstack &lt;PID&gt;</code> 查看某个 Java 进程（PID）的所有线程状态</li></ul><p>图形化工具jconsole<br>jconsole 远程监控配置</p><ul><li>需要以如下方式运行你的 java 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java </span><br><span class="line">-Djava.rmi.server.hostname=10.160.13.111  #远程服务器ip，即本机ip</span><br><span class="line">-Dcom.sun.management.jmxremote #允许JMX远程调用</span><br><span class="line">-Dcom.sun.management.jmxremote.port=3214  #自定义jmx 端口号</span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false  # 是否需要ssl 安全连接方式</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false #是否需要秘钥</span><br><span class="line">-jar test.jar</span><br></pre></td></tr></table></figure><ul><li>修改 /etc/hosts 文件将 127.0.0.1 映射至主机名</li><li>如果要认证访问，还需要做如下步骤</li><li>复制 jmxremote.password 文件</li><li>修改 jmxremote.password 和 jmxremote.access 文件的权限为 600 即文件所有者可读写</li><li>连接时填入 controlRole（用户名），R&amp;D（密码）<h2 id="5-线程运行原理"><a href="#5-线程运行原理" class="headerlink" title="5. 线程运行原理"></a>5. 线程运行原理</h2><h3 id="5-1-栈与栈帧"><a href="#5-1-栈与栈帧" class="headerlink" title="5.1 栈与栈帧"></a>5.1 栈与栈帧</h3><code>Java Virtual Machine Stacks</code>（Java 虚拟机栈）<br>我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？其实就是线程，每个线程启动后，虚拟机就会为其分配一块栈内存。  </li><li>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存  </li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法<h4 id="5-1-1-栈帧Debug"><a href="#5-1-1-栈帧Debug" class="headerlink" title="5.1.1 栈帧Debug"></a>5.1.1 栈帧Debug</h4>测试代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Debug测试栈帧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.FrameTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FramesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method1(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x+<span class="number">1</span>;</span><br><span class="line">        Object m = method2();</span><br><span class="line">        log.debug(m.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object n = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在IntelliJ IDEA中Debug启动，可以查看栈帧运行数据。<br><img src="%E6%A0%88%E5%B8%A7.png" alt="栈帧"></p><h5 id="多线程Debug"><a href="#多线程Debug" class="headerlink" title="多线程Debug"></a>多线程Debug</h5><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.FramesTest01 "</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FramesTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                method1(<span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.setName(<span class="string">"t"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        method1(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x+<span class="number">1</span>;</span><br><span class="line">        Object m = method2();</span><br><span class="line">        log.debug(m.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object n = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IntelliJ IDEA中右键断点，设置断点模式为<code>Thread</code>模式，才可以<code>Debug</code>跟踪线程。<br><img src="%E6%96%AD%E7%82%B9.png" alt="断点"><br>还可以在<code>Debug</code>控制台切换线程，查看不同线程的栈帧信息<br><img src="debug.png" alt="debug">  </p><h4 id="5-1-2-图解栈帧"><a href="#5-1-2-图解栈帧" class="headerlink" title="5.1.2 图解栈帧"></a>5.1.2 图解栈帧</h4><p><img src="%E5%9B%BE%E8%A7%A3%E6%A0%88%E5%B8%A7.png" alt="图解栈帧"></p><h3 id="5-2-线程上下文切换（Thread-Context-Switch）"><a href="#5-2-线程上下文切换（Thread-Context-Switch）" class="headerlink" title="5.2 线程上下文切换（Thread Context Switch）"></a>5.2 线程上下文切换（Thread Context Switch）</h3><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码</p><ul><li>线程的 cpu 时间片用完</li><li>垃圾回收</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法  </li></ul><p>当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念就是程序计数器（Program Counter Register），它的作用是记住下一条 jvm 指令的执行地址，是线程私有的</p><ul><li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</li><li>Context Switch 频繁发生会影响性能</li></ul><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.theory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadContextSwitchTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadContextSwitchTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;method1(<span class="number">20</span>),<span class="string">"t1"</span>).start();</span><br><span class="line">        method1(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = x+<span class="number">1</span>;</span><br><span class="line">        Object m = method2();</span><br><span class="line">        log.debug(m.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object n = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-图解上下文切换"><a href="#5-2-1-图解上下文切换" class="headerlink" title="5.2.1 图解上下文切换"></a>5.2.1 图解上下文切换</h4><p><img src="%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.png" alt="上下文切换"><br><img src="%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A21.png" alt="上下文切换"></p><h2 id="6-线程常用方法"><a href="#6-线程常用方法" class="headerlink" title="6. 线程常用方法"></a>6. 线程常用方法</h2><table><thead><tr><th>序号</th><th>方法名</th><th>静态方法</th><th>功能说明</th><th>注意</th></tr></thead><tbody><tr><td>1</td><td>start()</td><td></td><td>启动一个新线程，在新的线程 运行run方法中的代码</td><td>start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。 每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException</td></tr><tr><td>2</td><td>run()</td><td></td><td>新线程启动后会调用的方法</td><td>如果在构造Thread对象时传递了Runnable参数，则新线程启动后会调用Runnable中的run方法， 否则默认不执行任何操作。但可以创建Thread的子类对象，来覆盖默认行为</td></tr><tr><td>3</td><td>join()</td><td></td><td>等待线程运行结束</td><td></td></tr><tr><td>4</td><td>join(long n)</td><td></td><td>等待线程运行结束，最多等待n毫秒</td><td></td></tr><tr><td>5</td><td>getId()</td><td></td><td>获取线程长整型的id</td><td>id唯一</td></tr><tr><td>6</td><td>getName()</td><td></td><td>获取线程名</td><td></td></tr><tr><td>7</td><td>setName(String)</td><td></td><td>修改线程名</td><td></td></tr><tr><td>8</td><td>getPriority()</td><td></td><td>获取线程优先级</td><td></td></tr><tr><td>9</td><td>setPriority(int)</td><td></td><td>修改线程优先级</td><td>java中规定线程优先级是1—10的整数，较大的优先级能提高该线程被CPU调度的机率</td></tr><tr><td>10</td><td>getState()</td><td></td><td>获取线程状态</td><td>Java中线程状态时6个enum表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITTING,TERMINATED</td></tr><tr><td>11</td><td>isInterrupted()</td><td></td><td>判断是否被打断</td><td>不会清除 打断标记</td></tr><tr><td>12</td><td>isAlive()</td><td></td><td>线程是否存活（还没有运行完毕）</td><td></td></tr><tr><td>13</td><td>interrupt()</td><td></td><td>打断线程</td><td>如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出InterruptedException, 并清除打断标记； 如果打断的正在运行的线程，则会设置打断标记； park的线程被打断，也会设置打断标记</td></tr><tr><td>14</td><td>interrupted()</td><td>static</td><td>判断当前线程是否被打断</td><td>会清除 打断标记</td></tr><tr><td>15</td><td>currentThread()</td><td>static</td><td>获取当前正在执行的线程</td><td></td></tr><tr><td>16</td><td>sleep(long n)</td><td>static</td><td>让当前执行的线程休眠n毫秒，休眠时让出CPU 的时间片给其他线程</td><td></td></tr><tr><td>17</td><td>yield()</td><td>static</td><td>提示线程调度器让出当前线程对CPU的使用</td><td>主要是为了测试和调试</td></tr></tbody></table><h3 id="6-1-start与run"><a href="#6-1-start与run" class="headerlink" title="6.1 start与run"></a>6.1 start与run</h3><h4 id="调用run"><a href="#调用run" class="headerlink" title="调用run"></a>调用run</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">"running"</span>), <span class="string">"t"</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is &#123;&#125;"</span>,t.getName(),t.getState().toString());</span><br><span class="line">        <span class="comment">// 调用run</span></span><br><span class="line">        t.run();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is &#123;&#125;"</span>,t.getName(),t.getState().toString());</span><br><span class="line">        log.debug(<span class="string">"Do Other Thing!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span>:<span class="number">56</span>:<span class="number">52</span> [main] c.ThreadMethodTest - t is NEW</span><br><span class="line"><span class="number">22</span>:<span class="number">56</span>:<span class="number">52</span> [main] c.ThreadMethodTest - running</span><br><span class="line"><span class="number">22</span>:<span class="number">56</span>:<span class="number">52</span> [main] c.ThreadMethodTest - t is NEW</span><br><span class="line"><span class="number">22</span>:<span class="number">56</span>:<span class="number">52</span> [main] c.ThreadMethodTest - <span class="keyword">Do</span> Other Thing!</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="调用start"><a href="#调用start" class="headerlink" title="调用start"></a>调用start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">"running"</span>), <span class="string">"t"</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is &#123;&#125;"</span>,t.getName(),t.getState().toString());</span><br><span class="line">        <span class="comment">// 调用start</span></span><br><span class="line">        t.start();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is &#123;&#125;"</span>,t.getName(),t.getState().toString());</span><br><span class="line">        log.debug(<span class="string">"Do Other Thing!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span>:<span class="number">57</span>:<span class="number">47</span> [main] c.ThreadMethodTest - t is NEW</span><br><span class="line"><span class="number">22</span>:<span class="number">57</span>:<span class="number">47</span> [main] c.ThreadMethodTest - t is RUNNABLE</span><br><span class="line"><span class="number">22</span>:<span class="number">57</span>:<span class="number">47</span> [main] c.ThreadMethodTest - <span class="keyword">Do</span> Other Thing!</span><br><span class="line"><span class="number">22</span>:<span class="number">57</span>:<span class="number">47</span> [t] c.ThreadMethodTest - running</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>直接调用 run 是在主线程中执行了 run，没有启动新的线程</li><li>使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码<h3 id="6-2-sleep与yield"><a href="#6-2-sleep与yield" class="headerlink" title="6.2 sleep与yield"></a>6.2 sleep与yield</h3><h4 id="调用sleep"><a href="#调用sleep" class="headerlink" title="调用sleep"></a>调用sleep</h4></li><li>调用 <code>sleep</code> 会让当前线程从 <code>Running</code> 进入 <code>Timed Waiting</code> 状态（阻塞）<br>代码示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"&#123;&#125; state is &#123;&#125;"</span>, Thread.currentThread().getName(), Thread.currentThread().getState());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; state is &#123;&#125;"</span>,t.getName(),t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span>:<span class="number">24</span>:<span class="number">33</span> [t] c.ThreadMethodTest01 - t state is RUNNABLE</span><br><span class="line"><span class="number">23</span>:<span class="number">24</span>:<span class="number">34</span> [main] c.ThreadMethodTest01 - t state is TIMED_WAITING</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>其它线程可以使用 <code>interrupt</code> 方法打断正在睡眠的线程，这时 <code>sleep</code> 方法会抛出 <code>InterruptedException</code><br>代码示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest02"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="string">"t"</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.debug(<span class="string">"Sleep..."</span>);</span><br><span class="line">                log.debug(<span class="string">"&#123;&#125; state is&#123;&#125;"</span>,Thread.currentThread().getName(),Thread.currentThread().getState());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.debug(<span class="string">"Interrupted..."</span>);</span><br><span class="line">                    log.debug(<span class="string">"&#123;&#125; state is&#123;&#125;"</span>,Thread.currentThread().getName(),Thread.currentThread().getState());</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        t.interrupt();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; state is &#123;&#125;"</span>,t.getName(),t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">27</span> [t] c.ThreadMethodTest02 - Sleep...</span><br><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">27</span> [t] c.ThreadMethodTest02 - t state isRUNNABLE</span><br><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">28</span> [t] c.ThreadMethodTest02 - Interrupted...</span><br><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">28</span> [main] c.ThreadMethodTest02 - t state is TIMED_WAITING</span><br><span class="line"><span class="number">09</span>:<span class="number">34</span>:<span class="number">28</span> [t] c.ThreadMethodTest02 - t state isRUNNABLE</span><br><span class="line"><span class="function">java.lang.InterruptedException: <span class="title">sleep</span> <span class="title">interrupted</span></span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Native</span> <span class="title">Method</span>)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">com.java.demo.threadmethod.ThreadMethodTest02</span>$1.<span class="title">run</span>(<span class="title">ThreadMethodTest02.java</span>:14)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</span></span><br></pre></td></tr></table></figure><ul><li>睡眠结束后的线程未必会立刻得到执行</li><li>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性 </li></ul><p>代码示例:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.ThreadMethodTest03"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"sleep..."</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        log.debug(<span class="string">"end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">09</span>:<span class="number">42</span>:<span class="number">42</span> [main] c.ThreadMethodTest03 - sleep...</span><br><span class="line"><span class="number">09</span>:<span class="number">42</span>:<span class="number">45</span> [main] c.ThreadMethodTest03 - end...</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="调用yield"><a href="#调用yield" class="headerlink" title="调用yield"></a>调用yield</h4><ul><li>调用 <code>yield</code> 会让当前线程从 <code>Running</code> 进入 <code>Runnable</code> 就绪状态，然后调度执行其它线程</li><li>具体的实现依赖于操作系统的任务调度器</li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li>表面上看<code>sleep</code>和<code>yield</code>都是让当前线程不要运行，把机会让给其他线程。</li><li>调用 <code>sleep</code> 会让当前线程从 <code>Running</code> 进入 <code>Timed Waiting</code> 状态（阻塞）;调用 <code>yield</code> 会让当前线程从 <code>Running</code> 进入 <code>Runnable</code> 就绪状态，然后调度执行其它线程;CPU不会为阻塞状态的线程分配时间片。</li><li>sleep可以设置休眠时间，而且调用之后线程肯定不会运行；yield调用之后不一定让出机会给其他线程，依赖CPU的任务调度器，换句话说，就是礼让其他线程。<h3 id="6-3-线程优先级"><a href="#6-3-线程优先级" class="headerlink" title="6.3. 线程优先级"></a>6.3. 线程优先级</h3></li><li>线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</li><li>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用<br>使用yield<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.ThreadMethodTest04"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable task1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"------&gt; 1 is "</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable task2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    Thread.yield();</span><br><span class="line">                    System.out.println(<span class="string">"          ------&gt;2 is "</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(task1, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(task2, <span class="string">"t2"</span>);</span><br><span class="line">        <span class="comment">// 设置线程优先级</span></span><br><span class="line">        <span class="comment">//t1.setPriority(Thread.MIN_PRIORITY);</span></span><br><span class="line">        <span class="comment">//t2.setPriority(Thread.MAX_PRIORITY);</span></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56583</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56584</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56585</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">123858</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">123859</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">123860</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">123861</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56586</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56587</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56588</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">56589</span></span><br></pre></td></tr></table></figure><p>使用线程优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic=<span class="string">"c.ThreadMethodTest04"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable task1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"------&gt; 1 is "</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable task2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    <span class="comment">// Thread.yield();</span></span><br><span class="line">                    System.out.println(<span class="string">"          ------&gt;2 is "</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(task1, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(task2, <span class="string">"t2"</span>);</span><br><span class="line">        <span class="comment">// 设置线程优先级</span></span><br><span class="line">        t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245173</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245174</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151852</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151853</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151854</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151855</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151856</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151857</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151858</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151859</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151860</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151861</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151862</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151863</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151864</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151865</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151866</span></span><br><span class="line">------&gt; <span class="number">1</span> is <span class="number">151867</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245175</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245176</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245177</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245178</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245179</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245180</span></span><br><span class="line">          ------&gt;<span class="number">2</span> is <span class="number">245181</span></span><br></pre></td></tr></table></figure><h3 id="6-4-应用案例-之-sleep限制对CPU的使用"><a href="#6-4-应用案例-之-sleep限制对CPU的使用" class="headerlink" title="6.4 应用案例 之 sleep限制对CPU的使用"></a>6.4 应用案例 之 sleep限制对CPU的使用</h3><p>在没有利用 <code>cpu</code> 来计算时，不要让 <code>while(true)</code> 空转浪费 <code>cpu</code>，这时可以使用 <code>yield</code> 或 <code>sleep</code> 来让出 <code>cpu</code> 的使用权给其他程序<br>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> Thread.sleep(<span class="number">50</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以用 wait 或 条件变量达到类似的效果</li><li>不同的是，后两种都需要加锁，并且需要相应的唤醒操作，一般适用于要进行同步的场景</li><li><code>sleep</code> 适用于无需锁同步的场景<br>结果验证：<br><img src="sleep01.png" alt="sleep限制CPU使用"><br><img src="sleep02.png" alt="sleep限制CPU使用"><br><img src="sleep03.png" alt="sleep限制CPU使用"><br><img src="sleep04.png" alt="sleep限制CPU使用">  </li></ul><h3 id="6-5-join方法详解"><a href="#6-5-join方法详解" class="headerlink" title="6.5 join方法详解"></a>6.5 join方法详解</h3><h4 id="6-5-1-为什么需要join"><a href="#6-5-1-为什么需要join" class="headerlink" title="6.5.1 为什么需要join"></a>6.5.1 为什么需要join</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadmethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c. ThreadMethodTest05"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest05</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is start..."</span>,Thread.currentThread().getName());</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"&#123;&#125; is start..."</span>, Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"&#123;&#125; is end..."</span>, Thread.currentThread().getName());</span><br><span class="line">            r = <span class="number">10</span>;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"r is &#123;&#125;"</span>,r);</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; is end..."</span>,Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [main] c. ThreadMethodTest05 - main is <span class="built_in">start</span>...</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [main] c. ThreadMethodTest05 - r is <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [main] c. ThreadMethodTest05 - main is end...</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [t1] c. ThreadMethodTest05 - t1 is <span class="built_in">start</span>...</span><br><span class="line"><span class="number">13</span>:<span class="number">55</span>:<span class="number">01</span> [t1] c. ThreadMethodTest05 - t1 is end...</span><br></pre></td></tr></table></figure><p>分析原因：  </p><blockquote><p>因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出 r=10<br>而主线程一开始就要打印 r 的结果，所以只能打印出 r=0<br>解决方法：  </p><ul><li>用 sleep 行不行？为什么？<br>不可行！因为主线程不知道t1多久执行完，不可预知。</li><li>用 join，加在 t1.start() 之后即可</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.join();</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [main] c. ThreadMethodTest05 - main is <span class="built_in">start</span>...</span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [t1] c. ThreadMethodTest05 - t1 is <span class="built_in">start</span>...</span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [t1] c. ThreadMethodTest05 - t1 is end...</span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [main] c. ThreadMethodTest05 - r is <span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">56</span>:<span class="number">53</span> [main] c. ThreadMethodTest05 - main is end...</span><br></pre></td></tr></table></figure><h4 id="6-5-2-有时效的join"><a href="#6-5-2-有时效的join" class="headerlink" title="6.5.2 有时效的join"></a>6.5.2 有时效的join</h4><ul><li>等够时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> r1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> r2 = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            r1 = <span class="number">10</span>;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        t1.start();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join begin"</span>,t1.getName());</span><br><span class="line">        <span class="comment">// t1.join(TimeUnit.SECONDS.toSeconds(1000));</span></span><br><span class="line">        t1.join(TimeUnit.SECONDS.toSeconds(<span class="number">3000</span>));</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join end"</span>,t1.getName());</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"r1: &#123;&#125;,r2: &#123;&#125;, cost: &#123;&#125;"</span>,r1,r2,end - start);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">23</span>:<span class="number">16</span> [main] c.ThreadMethodTest06 - t1 join begin</span><br><span class="line"><span class="number">15</span>:<span class="number">23</span>:<span class="number">18</span> [main] c.ThreadMethodTest06 - t1 join end</span><br><span class="line"><span class="number">15</span>:<span class="number">23</span>:<span class="number">18</span> [main] c.ThreadMethodTest06 - r1: <span class="number">10</span>,r2: <span class="number">0</span>, cost: <span class="number">2009</span></span><br></pre></td></tr></table></figure><ul><li>没等够时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> r1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> r2 = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            r1 = <span class="number">10</span>;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        t1.start();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join begin"</span>,t1.getName());</span><br><span class="line">        t1.join(TimeUnit.SECONDS.toSeconds(<span class="number">1000</span>));</span><br><span class="line">        <span class="comment">// t1.join(TimeUnit.SECONDS.toSeconds(3000));</span></span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join end"</span>,t1.getName());</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"r1: &#123;&#125;,r2: &#123;&#125;, cost: &#123;&#125;"</span>,r1,r2,end - start);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">28</span>:<span class="number">20</span> [main] c.ThreadMethodTest06 - t1 join begin</span><br><span class="line"><span class="number">15</span>:<span class="number">28</span>:<span class="number">21</span> [main] c.ThreadMethodTest06 - t1 join end</span><br><span class="line"><span class="number">15</span>:<span class="number">28</span>:<span class="number">21</span> [main] c.ThreadMethodTest06 - r1: <span class="number">0</span>,r2: <span class="number">0</span>, cost: <span class="number">1020</span></span><br></pre></td></tr></table></figure><h3 id="6-6-应用案例-之-join实现同步"><a href="#6-6-应用案例-之-join实现同步" class="headerlink" title="6.6 应用案例 之 join实现同步"></a>6.6 应用案例 之 join实现同步</h3><p>以调用方角度来讲，</p><ul><li>需要等待结果返回，才能继续运行就是<strong>同步</strong></li><li>不需要等待结果返回，就能继续运行就是<strong>异步</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            r1 = <span class="number">10</span>;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            r2 = <span class="number">20</span>;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join begin..."</span>,t1.getName());</span><br><span class="line">        t1.join();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join end!"</span>,t1.getName());</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join begin..."</span>,t2.getName());</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; join end!"</span>,t2.getName());</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"r1 : &#123;&#125;,r2 : &#123;&#125;, cost : &#123;&#125;"</span>,r1,r2,end-start);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">24</span> [main] c.ThreadMethodTest06 - t1 join begin...</span><br><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">25</span> [main] c.ThreadMethodTest06 - t1 join end!</span><br><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">25</span> [main] c.ThreadMethodTest06 - t2 join begin...</span><br><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">26</span> [main] c.ThreadMethodTest06 - t2 join end!</span><br><span class="line"><span class="number">14</span>:<span class="number">57</span>:<span class="number">26</span> [main] c.ThreadMethodTest06 - r1 : <span class="number">10</span>,r2 : <span class="number">20</span>, cost : <span class="number">2001</span></span><br></pre></td></tr></table></figure><h3 id="6-7-interrupt方法详解"><a href="#6-7-interrupt方法详解" class="headerlink" title="6.7 interrupt方法详解"></a>6.7 interrupt方法详解</h3><h4 id="6-7-1-打断sleep、wait、join（阻塞）的线程"><a href="#6-7-1-打断sleep、wait、join（阻塞）的线程" class="headerlink" title="6.7.1 打断sleep、wait、join（阻塞）的线程"></a>6.7.1 打断sleep、wait、join（阻塞）的线程</h4><p>打断阻塞的线程, 会清空打断状态，以 <code>sleep</code> 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest07"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125; 打断标记为：&#123;&#125;"</span>,t1.getName(),t1.isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">java.lang.InterruptedException: <span class="title">sleep</span> <span class="title">interrupted</span></span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Native</span> <span class="title">Method</span>)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Thread.java</span>:340)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.util.concurrent.TimeUnit.sleep</span>(<span class="title">TimeUnit.java</span>:386)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">com.java.demo.threadmethod.ThreadMethodTest07.lambda</span>$<span class="title">main</span>$0(<span class="title">ThreadMethodTest07.java</span>:12)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.run</span>(<span class="title">Thread.java</span>:748)</span></span><br><span class="line"><span class="function">16:20:54 [<span class="title">main</span>] <span class="title">c.ThreadMethodTest07</span> - <span class="title">t1</span> 打断标记为：<span class="title">false</span></span></span><br></pre></td></tr></table></figure><h4 id="6-7-2-打断正常的线程"><a href="#6-7-2-打断正常的线程" class="headerlink" title="6.7.2 打断正常的线程"></a>6.7.2 打断正常的线程</h4><p>打断正常运行的线程, 不会清空打断状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> interrupted = Thread.currentThread().isInterrupted();</span><br><span class="line">                <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">                    log.debug(<span class="string">"&#123;&#125; 打断标记 ：&#123;&#125;"</span>,Thread.currentThread().getName(),interrupted);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">09</span> [t1] c.ThreadMethodTest - t1 打断标记 ：true</span><br></pre></td></tr></table></figure><h4 id="6-7-2-打断park线程"><a href="#6-7-2-打断park线程" class="headerlink" title="6.7.2 打断park线程"></a>6.7.2 打断park线程</h4><p>打断 park 线程, 不会清空打断状态<br>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           log.debug(<span class="string">"park..."</span>);</span><br><span class="line">           LockSupport.park();</span><br><span class="line">           log.debug(<span class="string">"unpark..."</span>);</span><br><span class="line">           log.debug(<span class="string">"打断状态：&#123;&#125;"</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">       &#125;, <span class="string">"t1"</span>);</span><br><span class="line">       t1.start();</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">       t1.interrupt();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>输出结果:  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">44</span>:<span class="number">07</span> [t1] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">44</span>:<span class="number">08</span> [t1] c.ThreadMethodTest09 - unpark...</span><br><span class="line"><span class="number">13</span>:<span class="number">44</span>:<span class="number">08</span> [t1] c.ThreadMethodTest09 - 打断状态：true</span><br></pre></td></tr></table></figure><p>如果打断标记已经是 true, 则 park 会失效<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                log.debug(<span class="string">"park..."</span>);</span><br><span class="line">                LockSupport.park();</span><br><span class="line">                log.debug(<span class="string">"打断状态：&#123;&#125;"</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">46</span>:<span class="number">59</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - park...</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">00</span> [Thread-<span class="number">0</span>] c.ThreadMethodTest09 - 打断状态：true</span><br></pre></td></tr></table></figure><blockquote><p>提示<br>可以使用 <code>Thread.interrupted()</code> 清除打断状态</p></blockquote><h3 id="6-8-终止模式-之-两阶段终止模式（Two-phase-Termination）"><a href="#6-8-终止模式-之-两阶段终止模式（Two-phase-Termination）" class="headerlink" title="6.8 终止模式 之 两阶段终止模式（Two-phase Termination）"></a>6.8 终止模式 之 两阶段终止模式（Two-phase Termination）</h3><p>在一个线程 <code>T1</code> 中如何“优雅”终止线程 T2？这里的【优雅】指的是给 T2 一个“料理后事”的机会。</p><h4 id="6-8-1-错误思路"><a href="#6-8-1-错误思路" class="headerlink" title="6.8.1 错误思路"></a>6.8.1 错误思路</h4><ul><li>使用线程对象的 stop() 方法停止线程<blockquote><p>stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁</p></blockquote></li><li>使用 System.exit(int) 方法停止线程<blockquote><p>目的仅是停止一个线程，但这种做法会让整个程序都停止</p></blockquote></li></ul><h4 id="6-8-2-两阶段终止（Two-phase-Termination）模式"><a href="#6-8-2-两阶段终止（Two-phase-Termination）模式" class="headerlink" title="6.8.2 两阶段终止（Two-phase Termination）模式"></a>6.8.2 两阶段终止（Two-phase Termination）模式</h4><p>停止线程是一个目标简单而实现却不那么简单的任务。首先，Java没有提供直接的API用于停止线程（stop方法不提倡）。此外，停止线程还有一些额外的细节需要考虑，如待停止的线程处于阻塞（如等待锁）或者等待状态（等待其他线程），尚有未处理完的任务等。<br><code>Two-phase Termination</code>模式通过将停止线程这个动作分解为<strong>准备阶段</strong>和<strong>执行阶段</strong>这两个阶段，提供了一种通用的用于“优雅”(是指可以等要停止的线程在其处理完待处理的任务后才停止，而不是强行停止)地停止线程的方法。  </p><ul><li>准备阶段<br>该阶段的主要动作是“通知”目标线程（欲停止的线程）准备进行通知。这一步可以设置一个标志变量用于指示目标线程可以准备停止了。  </li><li>执行阶段<br>该阶段的主要动作是检查准备阶段所设置的线程停止标志和信号，在此基础上决定线程停止的时机，并进行适当的“清理”操作。  </li></ul><p><img src="%E4%B8%A4%E6%AE%B5%E7%BB%88%E6%AD%A2%E6%A8%A1%E5%BC%8F.png" alt="两段终止模式"><br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止模式 之 两阶段终止模式-利用 isInterrupted</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTerminationTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTerminationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TwoPhaseTermination twoPhaseTermination = <span class="keyword">new</span> TwoPhaseTermination();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        twoPhaseTermination.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监控线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.TwoPhaseTermination"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTermination</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">              Thread currentThread = Thread.currentThread();</span><br><span class="line">              <span class="keyword">if</span> (currentThread.isInterrupted())&#123;</span><br><span class="line">                  log.debug(<span class="string">"料理后事..."</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 阻塞中被打断</span></span><br><span class="line">                  log.debug(<span class="string">"执行监控记录..."</span>);        <span class="comment">// 正常情况被打断</span></span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">                  <span class="comment">// sleep中的线程被打断会将打断标记设置为false，所以需要重新设置</span></span><br><span class="line">                  currentThread.interrupt();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="string">"monitor"</span>);</span><br><span class="line">        monitor.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">13</span>:<span class="number">59</span> [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line"><span class="number">10</span>:<span class="number">14</span>:<span class="number">00</span> [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line"><span class="number">10</span>:<span class="number">14</span>:<span class="number">01</span> [monitor] c.TwoPhaseTermination - 执行监控记录...</span><br><span class="line"><span class="function">java.lang.InterruptedException: <span class="title">sleep</span> <span class="title">interrupted</span></span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Native</span> <span class="title">Method</span>)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.sleep</span>(<span class="title">Thread.java</span>:340)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.util.concurrent.TimeUnit.sleep</span>(<span class="title">TimeUnit.java</span>:386)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">com.java.demo.threadmethod.TwoPhaseTermination.lambda</span>$<span class="title">start</span>$0(<span class="title">ThreadMethodTest09.java</span>:37)</span></span><br><span class="line"><span class="function"><span class="title">at</span> <span class="title">java.lang.Thread.run</span>(<span class="title">Thread.java</span>:748)</span></span><br><span class="line"><span class="function">10:14:02 [<span class="title">monitor</span>] <span class="title">c.TwoPhaseTermination</span> - 料理后事...</span></span><br></pre></td></tr></table></figure><h3 id="6-9-不推荐的方法"><a href="#6-9-不推荐的方法" class="headerlink" title="6.9 不推荐的方法"></a>6.9 不推荐的方法</h3><p>还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁。  </p><table><thead><tr><th>序号</th><th>方法名</th><th>静态方法</th><th>功能说明</th><th>注意</th></tr></thead><tbody><tr><td>1</td><td>stop()</td><td></td><td>停止线程运行</td><td></td></tr><tr><td>2</td><td>suspend()</td><td></td><td>挂起（暂停）线程运行</td><td></td></tr><tr><td>3</td><td>resume()</td><td></td><td>恢复线程运行</td><td></td></tr></tbody></table><h3 id="6-10-守护线程"><a href="#6-10-守护线程" class="headerlink" title="6.10 守护线程"></a>6.10 守护线程</h3><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 守护线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadMethodTest10"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"开始运行..."</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"开始运行..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"运行结束..."</span>);</span><br><span class="line">        &#125;, <span class="string">"daemon"</span>);</span><br><span class="line">        <span class="comment">// 设置该线程为守护线程</span></span><br><span class="line">        t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">"运行结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">12</span>:<span class="number">08</span> [main] c.ThreadMethodTest10 - 开始运行...</span><br><span class="line"><span class="number">14</span>:<span class="number">12</span>:<span class="number">08</span> [daemon] c.ThreadMethodTest10 - 开始运行...</span><br><span class="line"><span class="number">14</span>:<span class="number">12</span>:<span class="number">09</span> [main] c.ThreadMethodTest10 - 运行结束...</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><br>垃圾回收器线程就是一种守护线程<br>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等<br>待它们处理完当前请求</p></blockquote><h2 id="7-线程状态"><a href="#7-线程状态" class="headerlink" title="7. 线程状态"></a>7. 线程状态</h2><h3 id="7-1-五种状态（操作系统层面）"><a href="#7-1-五种状态（操作系统层面）" class="headerlink" title="7.1 五种状态（操作系统层面）"></a>7.1 五种状态（操作系统层面）</h3><p><img src="%E4%BA%94%E7%A7%8D%E7%8A%B6%E6%80%81.png" alt="五种状态">  </p><ul><li>初始状态<blockquote><p>仅是在语言层面创建了线程对象，还未与操作系统线程关联</p></blockquote></li><li>可运行状态（就绪状态）<blockquote><p>指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</p></blockquote></li><li>运行状态<blockquote><p>指获取了 CPU 时间片运行中的状态<br>当 CPU 时间片用完，会从<strong>运行状态</strong>转换至<strong>可运行状态</strong>，会导致线程的上下文切换</p></blockquote></li><li>阻塞状态  <blockquote><p>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入<strong>阻塞状态</strong><br>等BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至<strong>可运行状态</strong><br>与<strong>可运行状态</strong>的区别是，对<strong>阻塞状态</strong>的线程来说只要它们一直不唤醒，调度器就一直不会考虑<br>调度它们</p></blockquote></li><li>终止状态  <blockquote><p>表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p></blockquote><h3 id="7-2-六种状态（Java-API层面）"><a href="#7-2-六种状态（Java-API层面）" class="headerlink" title="7.2 六种状态（Java API层面）"></a>7.2 六种状态（Java API层面）</h3></li></ul><p>这是从 Java API 层面来描述的<br>根据 Thread.State 枚举，分为六种状态<br><img src="%E5%85%AD%E7%A7%8D%E7%8A%B6%E6%80%81.png" alt="六种状态">  </p><ul><li><code>NEW</code> 线程刚被创建，但是还没有调用 <code>start()</code> 方法  </li><li><code>RUNNABLE</code> 当调用了 start() 方法之后，注意，Java API 层面的 <code>RUNNABLE</code> 状态涵盖了 操作系统 层面的</li></ul><p><strong>可运行状态</strong>、<strong>运行状态</strong>和<strong>阻塞状态</strong>（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）  </p><ul><li><code>BLOCKED</code> ， <code>WAITING</code> ， <code>TIMED_WAITING</code> 都是 <code>Java API</code> 层面对<strong>阻塞状态</strong>的细分，后面会在状态转换一节详述</li><li><code>TERMINATED</code> 当线程代码运行结束<br>代码示例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.threadstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"c.ThreadStateTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"running..."</span>);</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        Thread t3= <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">"running..."</span>);</span><br><span class="line">        &#125;, <span class="string">"t3"</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        Thread t4= <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadStateTest.class)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t4"</span>);</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">        Thread t5= <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t2.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t5"</span>);</span><br><span class="line">        t5.start();</span><br><span class="line"></span><br><span class="line">        Thread t6= <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadStateTest.class)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t6"</span>);</span><br><span class="line">        t6.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"t1 state is "</span> + t1.getState());</span><br><span class="line">        System.out.println(<span class="string">"t2 state is "</span> + t2.getState());</span><br><span class="line">        System.out.println(<span class="string">"t3 state is "</span> + t3.getState());</span><br><span class="line">        System.out.println(<span class="string">"t4 state is "</span> + t4.getState());</span><br><span class="line">        System.out.println(<span class="string">"t5 state is "</span> + t5.getState());</span><br><span class="line">        System.out.println(<span class="string">"t6 state is "</span> + t6.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果：  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">07</span>:<span class="number">50</span> [t3] c.ThreadStateTest - running...</span><br><span class="line">t1 state is NEW</span><br><span class="line">t2 state is RUNNABLE</span><br><span class="line">t3 state is TERMINATED</span><br><span class="line">t4 state is TIMED_WAITING</span><br><span class="line">t5 state is WAITING</span><br><span class="line">t6 state is BLOCKED</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="http://tutorials.jenkov.com/java-concurrency/index.html#why-multithreading" target="_blank" rel="noopener">Java Concurrency and Multithreading Tutorial</a><br><a href="https://zhuanlan.zhihu.com/p/82423236" target="_blank" rel="noopener">【操作系统】进程与线程</a><br><a href="https://www.bilibili.com/video/BV16J411h7Rd" target="_blank" rel="noopener">黑马程序员全面深入学习Java并发编程，JUC并发编程全套教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://10veU.github.io/categories/Java/"/>
    
      <category term="并发编程" scheme="https://10veU.github.io/categories/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://10veU.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://10veU.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发编程" scheme="https://10veU.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO</title>
    <link href="https://10veU.github.io/2021/11/26/Java-NIO/"/>
    <id>https://10veU.github.io/2021/11/26/Java-NIO/</id>
    <published>2021-11-26T14:10:57.000Z</published>
    <updated>2022-06-17T05:59:24.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h1><h2 id="1-Java-NIO概述"><a href="#1-Java-NIO概述" class="headerlink" title="1. Java NIO概述"></a>1. Java NIO概述</h2><p>Java NIO(New IO Non Blocking IO)是从<code>java1.4</code>版本开始引入的一个新的IO API,可以<strong>替代标准的Java IO API</strong>。<code>NIO</code>与原来的<code>IO</code>有同样的作用和目的，但是使用的方式完全不同，<code>NIO</code>支持面向缓冲区的、基于通道的IO操作。<code>NIO</code>将以更加高效的方式进行文件的读写操作。</p><h3 id="IO-VS-NIO"><a href="#IO-VS-NIO" class="headerlink" title="IO VS NIO"></a>IO VS NIO</h3><p><img src="IO.png" alt="IO"><br><img src="NIO.png" alt="NO">  </p><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>面向流（Stream Oriented）</td><td>面向缓冲区（Buffer Oriented）</td></tr><tr><td>阻塞IO（Blocking IO）</td><td>非阻塞IO（Non Bloking IO）</td></tr><tr><td>无</td><td>选择器（Selectors）</td></tr></tbody></table><h2 id="2-通道（Channel）和缓冲区（Buffer）"><a href="#2-通道（Channel）和缓冲区（Buffer）" class="headerlink" title="2. 通道（Channel）和缓冲区（Buffer）"></a>2. 通道（Channel）和缓冲区（Buffer）</h2><p>通道(<code>Channel</code>)表示打开到IO设备（例如：文件、套接字）的连接。若需要使用NIO系统，需要获取用于连接IO设备的通道以及用于容纳数据的缓冲区。然后操作缓冲区，对数据进行处理。<br>简而言之，<code>Channel</code>负责传输，<code>Buffer</code>负责存储。  </p><h3 id="2-1-缓冲区（Buffer）"><a href="#2-1-缓冲区（Buffer）" class="headerlink" title="2.1 缓冲区（Buffer）"></a>2.1 缓冲区（Buffer）</h3><p>在Java NIO中负责数据的存储，缓冲区就是数组，用于存储不同数据类型的数据。</p><h4 id="2-1-1-缓冲区基本操作"><a href="#2-1-1-缓冲区基本操作" class="headerlink" title="2.1.1 缓冲区基本操作"></a>2.1.1 缓冲区基本操作</h4><p>根据数据类型的而不同（<code>boolean</code>除外），提供了相应类型的缓冲区  </p><ul><li><code>ByteBuffer</code>  </li><li><code>CharBuffer</code>  </li><li><code>ShortBuffer</code>  </li><li><code>IntBuffer</code>  </li><li><code>LongBuffer</code>  </li><li><code>FloatBuffer</code>  </li><li><code>DoubleBuffer</code>  </li></ul><p>上述缓冲区的管理方式几乎一致，通过<code>allocate()</code>获取缓冲区。  </p><p>缓冲区存取数据的两个核心方法  </p><ul><li><code>put()</code> 存入数据到缓冲区</li><li><code>get()</code> 获取缓冲区中的数据</li></ul><p>缓冲区中的四个核心属性</p><blockquote><p>Invariants: mark &lt;= position &lt;= limit &lt;= capacity  </p></blockquote><ul><li><code>private int mark = -1;</code> 标记，表示记录当前position的位置，可以通过rset()恢复到mark的位置</li><li><code>private int position = 0;</code> 位置， 表示缓冲区中正在操作数据的位置。</li><li><code>private int limit;</code>  界限，缓冲区中可以操作数据的大小。（limit后面的数据是不能进行操作的）</li><li><code>private int capacity;</code>  容量，缓冲器中最大存储数据的容量。一旦声明，无法改变。  </li></ul><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String s = <span class="string">"abcde"</span>;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        buffer.put(s.getBytes());</span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()];</span><br><span class="line">        buffer.get(dst,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mark()标记</span></span><br><span class="line">        buffer.mark();</span><br><span class="line"></span><br><span class="line">        buffer.get(dst,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst,<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + buffer.position());</span><br><span class="line">        <span class="comment">// 判断缓冲区是否有可操作的数据</span></span><br><span class="line">        <span class="keyword">if</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(buffer.remaining());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// reset() 恢复到mark的位置</span></span><br><span class="line">        buffer.reset();</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断缓冲区是否有可操作的数据</span></span><br><span class="line">        <span class="keyword">if</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(buffer.remaining());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 分配一个指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------- allocate() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line">        <span class="comment">// 使用put()将数据存入到缓冲区</span></span><br><span class="line">        String str= <span class="string">"ABCDE"</span>;</span><br><span class="line">        byteBuffer.put(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"---------- put() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line">        <span class="comment">// 切换数据模式</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        System.out.println(<span class="string">"---------- flip() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line">        <span class="comment">// 使用get()方法读取缓冲区中的方法</span></span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuffer.limit()];</span><br><span class="line">        byteBuffer.get(dst);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst,<span class="number">0</span>,dst.length));</span><br><span class="line">        System.out.println(<span class="string">"---------- get() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// rewind() 可重复读</span></span><br><span class="line">        byteBuffer.rewind();</span><br><span class="line">        System.out.println(<span class="string">"---------- rewind() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空缓冲区，但是缓冲区中的数据依然存在，但是处于“被遗忘状态”</span></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line">        System.out.println(<span class="string">"---------- clear() ----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mark = "</span> + byteBuffer.mark());</span><br><span class="line">        System.out.println(<span class="string">"position = "</span> + byteBuffer.position());</span><br><span class="line">        System.out.println(<span class="string">"limit = "</span> + byteBuffer.limit());</span><br><span class="line">        System.out.println(<span class="string">"capacity = "</span> + byteBuffer.capacity());</span><br><span class="line"></span><br><span class="line">        byteBuffer.get(dst);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst,<span class="number">0</span>,dst.length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-直接缓冲区-VS-非直接缓冲区"><a href="#2-1-2-直接缓冲区-VS-非直接缓冲区" class="headerlink" title="2.1.2 直接缓冲区 VS 非直接缓冲区"></a>2.1.2 直接缓冲区 VS 非直接缓冲区</h4><blockquote><p><strong>非直接缓冲区</strong>，通过<code>allocate()</code>方法非直接缓冲区，将缓冲区建立在<code>JVM</code>的内存中。<br><strong>直接缓冲区</strong>，通过<code>allocateDirect()</code>方法分配直接缓冲区，将缓冲区建立在物理内存中。可以提高效率。 </p></blockquote><p><img src="%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.jpeg" alt="直接缓冲区"><br><img src="%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.jpeg" alt="非直接缓冲区"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line">        System.out.println(byteBuffer.isDirect());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-通道（Channel）"><a href="#2-2-通道（Channel）" class="headerlink" title="2.2 通道（Channel）"></a>2.2 通道（Channel）</h3><p>通道（<code>Channel</code>）由<code>java.nio.channels</code>包定义的。<code>Channel</code>表示IO源与目标打开的连接。<code>Channel</code>类似于传统的“流”。只不过<code>Channel</code>本身不能直接访问数据，<code>Channel</code>只能与<code>Buffer</code>进行交互。</p><h4 id="2-2-1-Channel的原理与获取"><a href="#2-2-1-Channel的原理与获取" class="headerlink" title="2.2.1 Channel的原理与获取"></a>2.2.1 Channel的原理与获取</h4><p>应用程序与磁盘之间的数据写入或者读出，都需要由用户地址空间和内存地址空间之间来回复制数据，内存地址空间中的数据通过操作系统层面的IO接口，完成与磁盘的数据存取。在应用程序调用这些系统IO接口时，由CPU完成一系列调度、任务分配，早先这些IO接口都是由CPU独立负责。所以当发生大规模读写请求时，CPU的占用率很高。<br><img src="Channel_01.png" alt="Channel"><br>之后，操作系统为了避免CPU完全被各种IO接口调用占用，引入了DMA（直接存储器存储）。当应用程序对操作系统发出一个读写请求时，会由DMA先向CPU申请权限，申请到权限之后，内存地址空间与磁盘之间的IO操作就全由DMA来负责操作。这样，在读写请求的过程中，CPU不需要再参与，CPU去做其他事情。当然，DMA来独立完成数据在磁盘与内存空间中的来去，需要借助于DMA总线。但是当DMA总线过多时，大量的IO操作也会造成总线冲突，即也会影响最终的读写性能。<br><img src="Channel_02.png" alt="Channel"><br>为了避免DMA总线冲突对性能的影响，后来便有了通道的方式。通道，它是一个完全独立的处理器。CPU是中央处理器，通道本身也是一个处理器，专门负责IO操作。既然是处理器，通道有自己的IO命令，与CPU无关。它更适用于大型的IO操作，性能更高。<br><img src="Channel_03.png" alt="Channel"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>直接存储器DMA有独立总线。</li><li>但在大量数据面前，可能会存在总线冲突，还是需要CPU来处理。</li><li>通道是一个独立的处理器</li><li>DMA方式还是需要向CPU申请DMA总线的。</li><li>通道有自己的处理器，适合与大量IO请求的场景，数据传输直接通过通道进行传输，不再需要请求CPU  </li></ul><h4 id="2-2-2-Channel的基本操作"><a href="#2-2-2-Channel的基本操作" class="headerlink" title="2.2.2 Channel的基本操作"></a>2.2.2 Channel的基本操作</h4><h5 id="通道的主要实现类"><a href="#通道的主要实现类" class="headerlink" title="通道的主要实现类"></a>通道的主要实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.nio.channels.Channel接口</span><br><span class="line">    |-- FileChannel 用于本地文件数据传输</span><br><span class="line">  |-- SocketChannel 用于网络，TCP</span><br><span class="line">  |-- ServerSocketChannel 用于网络，TCP</span><br><span class="line">  |-- DatagramChannel 用于网络，UDP</span><br></pre></td></tr></table></figure><h5 id="获取通道"><a href="#获取通道" class="headerlink" title="获取通道"></a>获取通道</h5><ol><li>Java针对支持通道的类提供了<code>getChannel()</code>方法<br>本地IO</li></ol><ul><li>FileInputStream/FileOutputStream</li><li>RandomAccessFile<br>网络IO</li><li>Socket</li><li>ServerSocket</li><li>DatagramSocket</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用通道完成文件的复制(非直接缓冲区)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel inChannel = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"classpath://../resource/channel/1.png"</span>);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"classpath://../resource/channel/2.png"</span>);</span><br><span class="line">            <span class="comment">// 1. 获取通道</span></span><br><span class="line">            inChannel = fileInputStream.getChannel();</span><br><span class="line">            outChannel = fileOutputStream.getChannel();</span><br><span class="line">            <span class="comment">// 2. 分配指定大小的缓冲区</span></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="comment">// 3. 将通道中的数据放入缓冲区</span></span><br><span class="line">            <span class="keyword">while</span>(inChannel.read(byteBuffer) != -<span class="number">1</span>)&#123;</span><br><span class="line">                byteBuffer.flip(); <span class="comment">// 切换到读取数据模式</span></span><br><span class="line">                <span class="comment">// 4. 将缓冲区的数据写入到通道中</span></span><br><span class="line">                outChannel.write(byteBuffer);</span><br><span class="line">                byteBuffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outChannel != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (inChannel !=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fileOutputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fileInputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在JDK1.7中的NIO.2针对各个通道童工了静态方法<code>open()</code>  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用通道完成文件的复制（直接缓冲区，内存映射文件）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\1.png"</span>), StandardOpenOption.READ);</span><br><span class="line">        <span class="comment">// 注意：StandardOpenOption的CREATE_NEW代表如果已存在则创建失败；CREATE代表如果已存在则覆盖</span></span><br><span class="line">        <span class="comment">// FileChannel outChannel = FileChannel.open(Paths.get("classpath://../resource/channel/3.png"), StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);</span></span><br><span class="line">        <span class="comment">//注意：因为下面从通道得到的映射文件缓冲区的映射模式是读写模式，而这个outChannel只有写的打开选项，所以是不够，还要加入读配置。</span></span><br><span class="line">        FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\3.png"</span>), StandardOpenOption.WRITE, StandardOpenOption.READ,StandardOpenOption.CREATE_NEW);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内存映射文件</span></span><br><span class="line">        <span class="comment">//这种利用通道通过映射文件建立直接缓冲区的方式和用缓冲区allocateDirect(int)的方式，两者的原理是一模一样的！</span></span><br><span class="line">        <span class="comment">//只是申请直接缓冲区的方式不同。</span></span><br><span class="line">        <span class="comment">//申请的空间都在物理内存中。</span></span><br><span class="line">        <span class="comment">//注意：申请直接缓冲区，仅仅适用于ByteBuffer缓冲区类型，其他缓冲区类型不支持。</span></span><br><span class="line">        <span class="comment">//与之前的通过流获得的通道不同，这种通过映射文件的方式是直接把数据通过映射文件放到物理内存中，还需要通道进行传输吗？是不是就不用了吧。我现在只需要直接向直接缓冲区中放就可以了，不需要通道。</span></span><br><span class="line">        <span class="comment">//所以与之前相比，获取通道的操作都省去了，直接操作缓冲区即可。</span></span><br><span class="line">        MappedByteBuffer inMappedByteBuffer = inChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, inChannel.size());</span><br><span class="line">        MappedByteBuffer outMappedByteBuffer = outChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, inChannel.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接使用缓冲区进行数据的读写操作</span></span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[inMappedByteBuffer.limit()];</span><br><span class="line">        inMappedByteBuffer.get(dst);</span><br><span class="line">        outMappedByteBuffer.put(dst);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭通道</span></span><br><span class="line">        inChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在JDK1.7中的NIO.2的Files工具类的<code>newByteChannel()</code>  <h5 id="通道之间数据传输"><a href="#通道之间数据传输" class="headerlink" title="通道之间数据传输"></a>通道之间数据传输</h5></li></ol><ul><li>transTo()</li><li>transFrom()  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通道之间数据传输（直接缓冲区）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\1.png"</span>), StandardOpenOption.READ);</span><br><span class="line">        FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\4.png"</span>), StandardOpenOption.WRITE, StandardOpenOption.READ,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inChannel.transferTo(0,inChannel.size(),outChannel);</span></span><br><span class="line">        outChannel.transferFrom(inChannel,<span class="number">0</span>,inChannel.size());</span><br><span class="line">        inChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="分散（Scatter）与聚集-Gather"><a href="#分散（Scatter）与聚集-Gather" class="headerlink" title="分散（Scatter）与聚集(Gather)"></a>分散（Scatter）与聚集(Gather)</h5><blockquote><p>分散读取（<code>Scatter Reads</code>）,将通道中数据分散到多个缓冲区中<br>聚集写入（<code>Gather Writes</code>）,将多个缓冲区中的数据聚集到通道中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分散和聚集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"classpath://../resource/channel/1.txt"</span>,<span class="string">"rw"</span>);</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line">        <span class="comment">// 2. 分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer1 = ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">        ByteBuffer byteBuffer2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 3. 分散读取</span></span><br><span class="line">        ByteBuffer[] byteBuffers = &#123;byteBuffer1, byteBuffer2&#125;;</span><br><span class="line">        channel.read(byteBuffers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ByteBuffer byteBuffer:byteBuffers) &#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffers[<span class="number">0</span>].array(),<span class="number">0</span>,byteBuffers[<span class="number">0</span>].limit()));</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffers[<span class="number">1</span>].array(),<span class="number">0</span>,byteBuffers[<span class="number">1</span>].limit()));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 聚集写入</span></span><br><span class="line">        RandomAccessFile randomAccessFile1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">"classpath://../resource/channel/2.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        FileChannel channel1 = randomAccessFile1.getChannel();</span><br><span class="line">        channel1.write(byteBuffers);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="字符集（Charset）"><a href="#字符集（Charset）" class="headerlink" title="字符集（Charset）"></a>字符集（Charset）</h5><ul><li>编码，字符串-&gt;字节数组</li><li>解码，字节数组-&gt;字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> CharacterCodingException </span>&#123;</span><br><span class="line">        Charset gbkCharset = Charset.forName(<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 获取编码器</span></span><br><span class="line">        CharsetEncoder gbkEncoder = gbkCharset.newEncoder();</span><br><span class="line">        <span class="comment">// 获取解码器</span></span><br><span class="line">        CharsetDecoder gbkDecoder = gbkCharset.newDecoder();</span><br><span class="line"></span><br><span class="line">        CharBuffer charBuffer = CharBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        charBuffer.put(<span class="string">"你好，世界！"</span>);</span><br><span class="line">        charBuffer.flip();</span><br><span class="line">        <span class="comment">// 编码</span></span><br><span class="line">        ByteBuffer byteBuffer = gbkEncoder.encode(charBuffer);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteBuffer.limit(); i++) &#123;</span><br><span class="line">            System.out.println(byteBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解码</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        CharBuffer charBuffer1 = gbkDecoder.decode(byteBuffer);</span><br><span class="line">        System.out.println(charBuffer1.toString());</span><br><span class="line">        System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Charset utf8Charset = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">// CharsetDecoder charsetDecoder = utf8Charset.newDecoder();</span></span><br><span class="line">        <span class="comment">//CharBuffer decode = charsetDecoder.decode(byteBuffer);</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        CharBuffer decode = utf8Charset.decode(byteBuffer);</span><br><span class="line">        System.out.println(decode.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Charset&gt; charsetMap = Charset.availableCharsets();</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Charset&gt;&gt; entrySet = charsetMap.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String,Charset&gt; entry: entrySet) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"="</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-NIO-阻塞与非阻塞"><a href="#3-NIO-阻塞与非阻塞" class="headerlink" title="3. NIO-阻塞与非阻塞"></a>3. NIO-阻塞与非阻塞</h2><p> 传统的 IO 流都是阻塞式的。也就是说，当一个线程调用 <code>read()</code> 或 <code>write()</code>时，该线程被阻塞，直到有一些数据被读取或写入，该线程在此期间不能执行其他任务。<br> <img src="%E4%BC%A0%E7%BB%9FIO.png" alt="传统IO"><br> 因此，在完成网络通信进行 IO 操作时，由于线程会阻塞，所以服务器端必须为每个客户端都提供一个独立的线程进行处理，当服务器端需要处理大量客户端时，性能急剧下降。<br> <img src="%E4%BC%A0%E7%BB%9FIO%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt="传统IO多线程"><br> Java NIO 是非阻塞模式的。当线程从某通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。线程通常将非阻塞 IO 的空闲时间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入和输出通道。因此， NIO 可以让服务器端使用一个或有限几个线程来同时处理连接到服务器端的所有客户端。<br> <img src="NIO%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%96%B9%E5%BC%8F.png" alt="NIO非阻塞方式"><br> 选择器和通道的关系：通道注册到选择器上，选择器监控通道。<br> 当某一个通道上，某一个事件准备就绪时，那么选择器才会将这个通道分配到服务器端一个或多个线程上，再继续运行。比如说当客户端发送一些数据给服务器端，只有当客户端的所有数据都准备就绪时，选择器才会将这个注册的通道分配到服务器端的一个或者多个线程上。那就意味这，如果客户端的线程没有将数据准备就绪时，服务器端的线程可以执行其他任务，而不必阻塞在那里。  </p><h3 id="3-1-选择器（Selector）与通道（Channel）的关系"><a href="#3-1-选择器（Selector）与通道（Channel）的关系" class="headerlink" title="3.1 选择器（Selector）与通道（Channel）的关系"></a>3.1 选择器（Selector）与通道（Channel）的关系</h3><p>选择器（<code>Selector</code>） 是 <code>SelectableChannle</code> 对象的多路复用器， <code>Selector</code>可以同时监控多个 <code>SelectableChannel</code> 的 IO 状况，也就是说，利用 Selector可使一个单独的线程管理多个 <code>Channel</code>。 <code>Selector</code> 是非阻塞 IO 的核心。<br><img src="SelectableChannel.png" alt="SelectableCahnnel"><br><strong>注意：</strong> FileChannel切换为非阻塞模式！！！非阻塞模式是相对于网络IO而言的。选择器主要监控网络Channel。  （FileChannel不是可作为选择器复用的通道！FileChannel不能注册到选择器Selector！FileChannel不能切换到非阻塞模式！FileChannel不是SelectableChannel的子类！）  </p><h3 id="3-2-网络NIO示例（阻塞式-TCP协议）"><a href="#3-2-网络NIO示例（阻塞式-TCP协议）" class="headerlink" title="3.2 网络NIO示例（阻塞式 TCP协议）"></a>3.2 网络NIO示例（阻塞式 TCP协议）</h3><h4 id="阻塞IO模式：客户端向服务端发送文件"><a href="#阻塞IO模式：客户端向服务端发送文件" class="headerlink" title="阻塞IO模式：客户端向服务端发送文件"></a>阻塞IO模式：客户端向服务端发送文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.selector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、使用NIO完成网络通信的三个核心概念</span></span><br><span class="line"><span class="comment"> * 1. 通道（Channel）,负责连接</span></span><br><span class="line"><span class="comment"> *      java.nio.channels.Channel接口</span></span><br><span class="line"><span class="comment"> *          |-- SelectableChannel</span></span><br><span class="line"><span class="comment"> *              |--SocketChannel          TCP</span></span><br><span class="line"><span class="comment"> *              |-- ServerSocketChannel   TCP</span></span><br><span class="line"><span class="comment"> *              |-- DatagramChannel       UDP</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *              |--Pipe.SinkChannel</span></span><br><span class="line"><span class="comment"> *              |--Pipe.SourceChannel</span></span><br><span class="line"><span class="comment"> *    注意：FileChannel切换为非阻塞模式！！！非阻塞模式是相对于网络IO而言的。选择器主要监控网络Channel。</span></span><br><span class="line"><span class="comment"> * 2. 缓冲区（Buffer）,负责数据的存取</span></span><br><span class="line"><span class="comment"> * 3. 选择器（Selector）,是SelectableChannel的多路复用器。用于监控SelectableChannel的IO状况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingNIOTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 2. 分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 3. 从本地读取文件并发送到服务器</span></span><br><span class="line">        FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\1.png"</span>), StandardOpenOption.READ);</span><br><span class="line">        <span class="keyword">while</span> (inChannel.read(byteBuffer)!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            socketChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. 关闭通道</span></span><br><span class="line">        inChannel.close();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 2. 绑定连接</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 3.获取客户端的连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="comment">// 4. 接收客户端传输的数据，并保存在本地</span></span><br><span class="line">        FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\5.png"</span>), StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">while</span>(socketChannel.read(byteBuffer)!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            outChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.关闭通道</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻塞IO模式：服务端向客户端发送反馈信息"><a href="#阻塞IO模式：服务端向客户端发送反馈信息" class="headerlink" title="阻塞IO模式：服务端向客户端发送反馈信息"></a>阻塞IO模式：服务端向客户端发送反馈信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.selector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingNIOTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        FileChannel inFileChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\1.png"</span>), StandardOpenOption.READ);</span><br><span class="line">        <span class="keyword">while</span>(inFileChannel.read(byteBuffer) != -<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            socketChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在阻塞IO下，如果关闭socketChannel，那么服务端不知道客户端是否已经把所有数据发完，所以会一直阻塞。</span></span><br><span class="line">        socketChannel.shutdownOutput();</span><br><span class="line">        <span class="comment">//另一种方法就是把这个线程切换成非阻塞模式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收服务端反馈</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = socketChannel.read(byteBuffer)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        inFileChannel.close();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        FileChannel outFileChannel = FileChannel.open(Paths.get(<span class="string">"D:\\idea_projects\\java-example\\java-chapter-NIO\\resource\\channel\\6.png"</span>), StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">while</span>(socketChannel.read(byteBuffer) != -<span class="number">1</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            outFileChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送反馈给客户端</span></span><br><span class="line">        byteBuffer.put(<span class="string">"服务端接收数据成功！"</span>.getBytes());</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        socketChannel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">        outFileChannel.close();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-网络NIO示例（非阻塞式-TCP协议）"><a href="#3-3-网络NIO示例（非阻塞式-TCP协议）" class="headerlink" title="3.3 网络NIO示例（非阻塞式 TCP协议）"></a>3.3 网络NIO示例（非阻塞式 TCP协议）</h3><h4 id="非阻塞IO模式：客户端向服务端发送数据"><a href="#非阻塞IO模式：客户端向服务端发送数据" class="headerlink" title="非阻塞IO模式：客户端向服务端发送数据"></a>非阻塞IO模式：客户端向服务端发送数据</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.selector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonBlockingNIOTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 2. 切换到非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 分配缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 4. 发送数据给服务端</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            String inputStr=scanner.next();</span><br><span class="line">            byteBuffer.put((<span class="keyword">new</span> Date().toString() + <span class="string">"\n"</span> + inputStr).getBytes());</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            socketChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line"><span class="comment">//        byteBuffer.put(new Date().toString().getBytes());</span></span><br><span class="line"><span class="comment">//        byteBuffer.flip();</span></span><br><span class="line"><span class="comment">//        socketChannel.write(byteBuffer);</span></span><br><span class="line"><span class="comment">//        byteBuffer.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 关闭通道</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 2. 切换为非阻塞模式</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 绑定连接</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 4. 获取选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        <span class="comment">//5、将通道注册到选择器上(第二个选项参数叫做选择键，用于告诉选择器需要监控这个通道的什么状态或者说什么事件（读、写、连接、接受）)</span></span><br><span class="line">        <span class="comment">//选择键是整型值，如果需要监控该通道的多个状态或事件，可以将多个选择键用位运算符“或”“|”来连接</span></span><br><span class="line">        <span class="comment">//这里服务端首先要监听客户端的接受状态</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="comment">// 6. 轮询式的获取选择器上已经"准备就绪"的事件</span></span><br><span class="line">        <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 7. 获取当前选择器中所有注册的选择键</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="comment">// 8. 迭代获取”准备就绪”的事件</span></span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                SelectionKey selectionKey = iterator.next();</span><br><span class="line">                <span class="comment">// 9. 判断具体是什么事件住呢被就绪</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">// 10. 若“接受就绪”,获取客户端连接</span></span><br><span class="line">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    <span class="comment">// 11. 切换为非阻塞模式</span></span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">// 12. 将该通道注册到选择器</span></span><br><span class="line">                    socketChannel.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectionKey.isReadable())&#123;</span><br><span class="line">                    <span class="comment">// 13. 获取当前选择器上“读就绪”状态的通道</span></span><br><span class="line">                    SocketChannel socketChannel = (SocketChannel)selectionKey.channel();</span><br><span class="line">                    <span class="comment">// 14. 读取数据</span></span><br><span class="line">                    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>((length = socketChannel.read(byteBuffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        byteBuffer.flip();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,length));</span><br><span class="line">                        byteBuffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 15. 取消选择键SelectionKey</span></span><br><span class="line">                <span class="comment">// 注意：SelectionKey使用完之后，一定要取消掉！！否则一直有效，如一个通道已经连接完成accept，如果不取消，下次还有这个连接完成。</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-网络NIO示例（非阻塞式-UDP协议）"><a href="#3-4-网络NIO示例（非阻塞式-UDP协议）" class="headerlink" title="3.4 网络NIO示例（非阻塞式 UDP协议）"></a>3.4 网络NIO示例（非阻塞式 UDP协议）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.selector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.DatagramChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonBlockingNIOTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        DatagramChannel datagramChannel = DatagramChannel.open();</span><br><span class="line">        <span class="comment">// 2. 切换为非阻塞模式</span></span><br><span class="line">        datagramChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 4. 发送数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String inputStr = scanner.next();</span><br><span class="line">            byteBuffer.put((<span class="keyword">new</span> Date().toString() + <span class="string">"\n"</span> +inputStr).getBytes());</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            datagramChannel.send(byteBuffer,<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>));</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        datagramChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        DatagramChannel datagramChannel = DatagramChannel.open();</span><br><span class="line">        <span class="comment">// 2. 设置为非阻塞模式</span></span><br><span class="line">        datagramChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 绑定连接</span></span><br><span class="line">        datagramChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 4. 获取选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        <span class="comment">// 5.将通道注册到选择器上</span></span><br><span class="line">        datagramChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        <span class="keyword">while</span> (selector.select()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                SelectionKey selectionKey = iterator.next();</span><br><span class="line">                <span class="keyword">if</span>(selectionKey.isReadable())&#123;</span><br><span class="line">                    <span class="comment">// 6. 分配指定大小的缓冲区</span></span><br><span class="line">                    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    datagramChannel.receive(byteBuffer);</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,byteBuffer.limit()));</span><br><span class="line">                    byteBuffer.clear();</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        datagramChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-NIO-管道（Pipe）"><a href="#4-NIO-管道（Pipe）" class="headerlink" title="4. NIO-管道（Pipe）"></a>4. NIO-管道（Pipe）</h2><p>Java NIO 管道是2个线程之间的单向数据连接。Pipe有一个source通道和一个sink通道。数据会被写到sink通道，从source通道读取。<br><img src="pipe.png" alt="pipe">  </p><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.pipe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Pipe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PipeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取管道</span></span><br><span class="line">        Pipe pipe = Pipe.open();</span><br><span class="line">        <span class="comment">// 2. 将缓冲区数据写入到管道</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        byteBuffer.put(<span class="string">"通过单向管道发送数据"</span>.getBytes());</span><br><span class="line">        Pipe.SinkChannel sinkChannel = pipe.sink(); <span class="comment">// Pipe.SinkChannel是Pipe的内部类</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        sinkChannel.write(byteBuffer);</span><br><span class="line">        byteBuffer.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、读取缓冲区中的数据（可以是另一个线程）</span></span><br><span class="line">        Pipe.SourceChannel sourceChannel = pipe.source();<span class="comment">//Pipe.SourceChannel是Pipe的内部类</span></span><br><span class="line">        <span class="keyword">int</span> len = sourceChannel.read(byteBuffer);</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭通道</span></span><br><span class="line">        sourceChannel.close();</span><br><span class="line">        sinkChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://10veU.github.io/categories/Java/"/>
    
      <category term="NIO" scheme="https://10veU.github.io/categories/Java/NIO/"/>
    
    
      <category term="Java" scheme="https://10veU.github.io/tags/Java/"/>
    
      <category term="NIO" scheme="https://10veU.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Java IO流</title>
    <link href="https://10veU.github.io/2021/09/11/Java%20IO%E6%B5%81/"/>
    <id>https://10veU.github.io/2021/09/11/Java IO流/</id>
    <published>2021-09-11T23:00:43.000Z</published>
    <updated>2022-06-17T05:59:24.214Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java-IO流"><a href="#Java-IO流" class="headerlink" title="Java IO流"></a>Java IO流</h1><h2 id="1-什么是文件？"><a href="#1-什么是文件？" class="headerlink" title="1. 什么是文件？"></a>1. 什么是文件？</h2><p>从编程的角度看，文件就是保存数据的载体。可以是文字，图片，音频，视频…</p><h2 id="2-文件流"><a href="#2-文件流" class="headerlink" title="2. 文件流"></a>2. 文件流</h2><p>文件再程序中以流的形式来操作。<br><img src="File.jpg" alt="文件流"><br><strong>流</strong><br>数据在文件（数据源）和程序（内存）之间经历的路径。<br><strong>输入流</strong><br>数据从文件（数据源）到程序（内存）的路径。<br><strong>输出流</strong><br>数据从程序（内存）到数据源（文件）的路径。</p><h2 id="3-常用的文件操作"><a href="#3-常用的文件操作" class="headerlink" title="3. 常用的文件操作"></a>3. 常用的文件操作</h2><p><img src="File.png" alt="File"><br>File的构造方法：<br><img src="File_Constructor.jpg" alt="File"></p><h3 id="3-1-常用的创建文件方法"><a href="#3-1-常用的创建文件方法" class="headerlink" title="3.1 常用的创建文件方法"></a>3.1 常用的创建文件方法</h3><p><strong><code>File(String pathname)</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * File(String pathname)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTest01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String pathname = <span class="string">"classpath://../resource/file01/test01.txt"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(pathname);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">"文件创建成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong><code>File(String parent, String child)</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * File(String parent, String child)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTest02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String parent = <span class="string">"classpath://../resource"</span>;</span><br><span class="line">    String child = <span class="string">"/file02/test02.txt"</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(parent, child);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">"文件创建成功！"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>File(File parent, String child)</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * File(File parent, String child)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFile03</span><span class="params">()</span></span>&#123;</span><br><span class="line">       File file= <span class="keyword">new</span> File(<span class="string">"classpath://../resource"</span>);</span><br><span class="line">       String childFilePath = <span class="string">"/file03/test03.txt"</span>;</span><br><span class="line">       File file1 = <span class="keyword">new</span> File(file, childFilePath);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           file1.createNewFile();</span><br><span class="line">           System.out.println(<span class="string">"文件创建成功！"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-获取文件信息"><a href="#3-2-获取文件信息" class="headerlink" title="3.2 获取文件信息"></a>3.2 获取文件信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileMethodTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"class://../resource/file01/test01.txt"</span>);</span><br><span class="line">        <span class="comment">// 获取文件名称</span></span><br><span class="line">        System.out.println(<span class="string">"文件名称："</span>+file.getName());</span><br><span class="line">        <span class="comment">// 获取文件绝对路径</span></span><br><span class="line">        System.out.println(<span class="string">"文件绝对路径："</span>+file.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 获取文件路径</span></span><br><span class="line">        System.out.println(<span class="string">"文件路径："</span>+file.getPath());</span><br><span class="line">        <span class="comment">// 获取文件父级目录</span></span><br><span class="line">        System.out.println(<span class="string">"文件父级目录："</span>+file.getParent());</span><br><span class="line">        <span class="comment">// 获取父文件</span></span><br><span class="line">        System.out.println(<span class="string">"父文件："</span>+file.getParentFile());</span><br><span class="line">        <span class="comment">// 文件大小</span></span><br><span class="line">        System.out.println(<span class="string">"文件大小(字节)："</span>+file.length());</span><br><span class="line">        <span class="comment">// 文件是否存在</span></span><br><span class="line">        System.out.println(<span class="string">"文件是否存在："</span>+file.exists());</span><br><span class="line">        <span class="comment">// 是否是一个文件</span></span><br><span class="line">        System.out.println(<span class="string">"是否是一个文件："</span>+file.isFile());</span><br><span class="line">        <span class="comment">// 是否是一个目录</span></span><br><span class="line">        System.out.println(<span class="string">"是否是一个目录："</span>+file.isDirectory());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-目录操作"><a href="#3-3-目录操作" class="headerlink" title="3.3 目录操作"></a>3.3 目录操作</h3><p><strong>创建单级目录及删除目录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建单级目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeDirTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"classpath://../resource/dir"</span>);</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            file.delete();</span><br><span class="line">            System.out.println(<span class="string">"此目录存在！已进行删除！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">            System.out.println(<span class="string">"此目录不存在！创建目录成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>创建多级目录及删除目录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建多级目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeDirsTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"classpath://../resource/dir/dir1/dir2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            file.delete();</span><br><span class="line">            System.out.println(<span class="string">"此目录存在！已进行删除！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">            System.out.println(<span class="string">"此目录不存在！创建目录成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-IO流原理及其分类"><a href="#4-IO流原理及其分类" class="headerlink" title="4. IO流原理及其分类"></a>4. IO流原理及其分类</h2><p>I/O是Input/Output的缩写，I/O技术是非常实用的技术，用于处理数据传输，如读/写文件，网络通讯等。<br>Java程序中，对于数据的输入/输出操作以“流（Stream）”的方式进行。<br><code>java.io</code>包下提供各种“流”类和接口，用来获取不同种类的数据，并通过方法输入或输出数据。</p><h3 id="4-1-流的分类"><a href="#4-1-流的分类" class="headerlink" title="4.1 流的分类"></a>4.1 流的分类</h3><p>按操作数据单位不同分为：</p><ul><li>字节流（8bit）</li><li>字符流（按字符）<br>按数据流向不同分为：</li><li>输入流</li><li>输出流<br>按流的角色不同分为：</li><li>节点流</li><li>处理流/包装流</li></ul><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><blockquote><p>Java的IO流共涉及40多个类，实际上非常有规则，都是以4个抽象基类派生的。<br>由这四个类派生出来的子类名称，都是以其父类名作为子类名后缀。</p></blockquote><p><img src="io_map.jpeg" alt="IO"><br><img src="IO.png" alt="IO"></p><h3 id="4-2-InputStream和OutputStream"><a href="#4-2-InputStream和OutputStream" class="headerlink" title="4.2 InputStream和OutputStream"></a>4.2 InputStream和OutputStream</h3><p><img src="InputStream.png" alt="InputStream"></p><h4 id="4-2-1-FileInputStream和FileOutputStream（字节流）"><a href="#4-2-1-FileInputStream和FileOutputStream（字节流）" class="headerlink" title="4.2.1 FileInputStream和FileOutputStream（字节流）"></a>4.2.1 FileInputStream和FileOutputStream（字节流）</h4><p><strong>FileInputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * FileInputStream演示</span></span><br><span class="line"><span class="comment">    * 单个字节的读取，效率低</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileInputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String filePath = <span class="string">"class://../resource/fileinputstream/hello.txt"</span>;  <span class="comment">// 定义读取的文件位置</span></span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);  <span class="comment">// 创建流对象</span></span><br><span class="line">           <span class="keyword">int</span> readData = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>((readData = fileInputStream.read())!=-<span class="number">1</span>)&#123;   <span class="comment">// read()该输入流读取一个字节的数据。utf8英文字母占1个字节 少数是汉字每个占用3个字节,多数占用4个字节。</span></span><br><span class="line">               System.out.print(readData);  <span class="comment">// 读取出字母对应的ASCII数值</span></span><br><span class="line">               System.out.print((<span class="keyword">char</span>)readData);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileInputStream.close();  <span class="comment">// 关闭流</span></span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * FileInputStream演示</span></span><br><span class="line"><span class="comment">    * 字节数组的读取，效率低</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileInputStream01Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String filePath = <span class="string">"class://../resource/fileinputstream/hello.txt"</span>;  <span class="comment">// 定义读取的文件位置</span></span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);  <span class="comment">// 创建流对象</span></span><br><span class="line">           <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];  <span class="comment">// 定义字节数组</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>((readLength = fileInputStream.read(bytes))!=-<span class="number">1</span>)&#123;   <span class="comment">// read(byte[] b)从该输入流读取最多 b.length个字节的数据为字节数组。utf8英文字母占1个字节 少数是汉字每个占用3个字节,多数占用4个字节。</span></span><br><span class="line">               System.out.print(readLength);</span><br><span class="line">               System.out.print(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,readLength));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileInputStream.close();  <span class="comment">// 关闭流</span></span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>FileOutputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileOutputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String filePath = <span class="string">"classpath://../resource/fileoutputstream/hello.txt"</span>;</span><br><span class="line">       FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// fileOutputStream = new FileOutputStream(filePath);  // 此种构造器是覆盖内容</span></span><br><span class="line">           fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filePath), <span class="keyword">true</span>);</span><br><span class="line">           <span class="comment">// 写入一个字节</span></span><br><span class="line">           <span class="comment">// fileOutputStream.write('H');</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 写入字符串</span></span><br><span class="line">           <span class="comment">//String s = "Hello World!";</span></span><br><span class="line">           <span class="comment">//fileOutputStream.write(s.getBytes());</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 写入指定字符串</span></span><br><span class="line">           String s = <span class="string">"Hello World!"</span>;</span><br><span class="line">           fileOutputStream.write(s.getBytes(),<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileOutputStream.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>FileInputStream和OutputStream实现文件复制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将resource文件夹的图片复制到target中</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">       FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"classpath://../resource/source/2017510143717263.png"</span>);</span><br><span class="line">           fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"classpath://../resource/target/2017510143717263_copy.png"</span>);</span><br><span class="line">           <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> ((readLength = fileInputStream.read(bytes)) !=-<span class="number">1</span> )&#123;</span><br><span class="line">               fileOutputStream.write(bytes,<span class="number">0</span>,readLength);  <span class="comment">// 一定要用这个方法，不然文件数据损坏，提示异常打不开</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileOutputStream.close();</span><br><span class="line">               fileInputStream.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-Reader和Writer-字符流"><a href="#4-3-Reader和Writer-字符流" class="headerlink" title="4.3 Reader和Writer(字符流)"></a>4.3 Reader和Writer(字符流)</h3><h4 id="4-3-1-FileReader和FileWriter"><a href="#4-3-1-FileReader和FileWriter" class="headerlink" title="4.3.1 FileReader和FileWriter"></a>4.3.1 FileReader和FileWriter</h4><p><strong>FileReader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 单个字节读取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileReaderTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String path = <span class="string">"classpath://../resource/filereader/test.txt"</span>;</span><br><span class="line">       FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">int</span> readData=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileReader = <span class="keyword">new</span> FileReader(path);</span><br><span class="line">           <span class="keyword">while</span>((readData = fileReader.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">               System.out.print((<span class="keyword">char</span>)readData);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileReader.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 字符数组读取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileReader01Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String path = <span class="string">"classpath://../resource/filereader/test.txt"</span>;</span><br><span class="line">       FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">int</span> readLen=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">8</span>];</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileReader = <span class="keyword">new</span> FileReader(path);</span><br><span class="line">           <span class="keyword">while</span>((readLen = fileReader.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">               System.out.print(<span class="keyword">new</span> String(buf,<span class="number">0</span>,readLen));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileReader.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>FileWriter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileWriterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String filePath = <span class="string">"classpath://../resource/filewriter/note.txt"</span>;</span><br><span class="line">       FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">char</span>[] chars = &#123;<span class="string">'H'</span>,<span class="string">'E'</span>,<span class="string">'L'</span>,<span class="string">'L'</span>,<span class="string">'O'</span>&#125;;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileWriter = <span class="keyword">new</span> FileWriter(filePath);</span><br><span class="line">           fileWriter.write(<span class="string">'H'</span>);  <span class="comment">// 写入单个字节</span></span><br><span class="line">           fileWriter.write(<span class="string">"Java从入门到入坟！"</span>); <span class="comment">// 写入字符串</span></span><br><span class="line">           fileWriter.write(chars); <span class="comment">// 写入字符数组</span></span><br><span class="line">           fileWriter.write(chars,<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// 写入指定长度的字符数组</span></span><br><span class="line">           fileWriter.write(<span class="string">" 编程入门"</span>,<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// 写入指定长度的字符串</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileWriter.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-节点流-和-处理流-包装流"><a href="#4-4-节点流-和-处理流-包装流" class="headerlink" title="4.4 节点流 和 处理流/包装流"></a>4.4 节点流 和 处理流/包装流</h3><h4 id="4-4-1-定义"><a href="#4-4-1-定义" class="headerlink" title="4.4.1 定义"></a>4.4.1 定义</h4><p><strong>节点流</strong><br>节点流可以从一个特定数据源<strong>读写数据</strong>。如FileReader、FileWriter。<br><strong>处理流（包装流）</strong><br>处理流（也叫包装流）是“连接”在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能。如BufferedReader、BufferedWriter。 </p><h4 id="4-4-2-节点流与处理流的区别与联系"><a href="#4-4-2-节点流与处理流的区别与联系" class="headerlink" title="4.4.2 节点流与处理流的区别与联系"></a>4.4.2 节点流与处理流的区别与联系</h4><ul><li>节点流是底层流（低级流），直接与数据源相接。</li><li>处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供方便的方法来完成输入输出。</li><li>处理流（也叫包装流）对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连。<h4 id="4-4-3-处理流的特点"><a href="#4-4-3-处理流的特点" class="headerlink" title="4.4.3 处理流的特点"></a>4.4.3 处理流的特点</h4></li><li>性能的提高<br>主要以增加缓冲的方式来提高输入输出的效率。</li><li>操作的便捷<br>处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便。<h4 id="4-4-4-处理流-包装流设计模式"><a href="#4-4-4-处理流-包装流设计模式" class="headerlink" title="4.4.4 处理流/包装流设计模式"></a>4.4.4 处理流/包装流设计模式</h4></li></ul><p><strong>装饰模式（包装模式）</strong><br>装饰模式又名包装（Wrapper）模式。装饰模式以对客户端透明的方式扩展对象的功能，是<strong>继承</strong>关系的一个替代方案。装饰模式通过创建一个包装对象，也就是装饰，来包裹真实的对象。装饰模式以对客户端透明的方式动态地给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不创造更多子类的情况下，将对象的功能加以扩展。装饰模式把客户端的调用委派到被装饰类。装饰模式的关键在于这种扩展是完全透明的</p><p>包装模式中有以下几种角色：<br><strong>抽象构件角色（Component）</strong>：给出一个抽象接口，以规范准备接收附加责任的对象。<br><strong>具体构件角色（Concrete Component）</strong>：定义将要接收附加责任的类。<br><strong>装饰角色（Decorator）</strong>：持有一个构件（Component）对象的引用，并定义一个与抽象构件接口一致的接口。<br><strong>具体装饰角色（Concrete Decorator）</strong>：负责给构件对象“贴上”附加的责任。<br><img src="InputStream_uml.png" alt="InputStream_uml"><br>示例：<br><strong>抽象构建角色（Component）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream_</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputStream_</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义抽象读取方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按字节数组读取的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"InputStream_按字节数组读取的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体构件角色（Concrete Component）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStream_</span> <span class="keyword">extends</span> <span class="title">InputStream_</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileInputStream_</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按字节数组读取的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FileInputStream_按字节读取的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FileInputStream_按字节数组读取的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>装饰角色（Decorator）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream_</span> <span class="keyword">extends</span> <span class="title">InputStream_</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> InputStream_ inputStream_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterInputStream_</span><span class="params">(InputStream_ inputStream_)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inputStream_ = inputStream_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inputStream_.read();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按字节数组读取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        inputStream_.read(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体装饰角色（Concrete Decorator）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedInputStream_</span> <span class="keyword">extends</span> <span class="title">FilterInputStream_</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> InputStream_ <span class="title">getIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InputStream_ in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span>  in = inputStream_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream_</span><span class="params">(InputStream_ inputStream_)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(inputStream_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BufferedInputStream_按字节读取方法"</span>);</span><br><span class="line">        inputStream_.read();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> bytes[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BufferedInputStream_按字节数组读取方法"</span>);</span><br><span class="line">        inputStream_.read(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.java.demo.designparrern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedInputStream_ bufferedInputStream_ = <span class="keyword">new</span> BufferedInputStream_(<span class="keyword">new</span> FileInputStream_(<span class="keyword">new</span> File(<span class="string">"classpath://../resource/file01/test01.txt"</span>)));</span><br><span class="line">        bufferedInputStream_.read();</span><br><span class="line"></span><br><span class="line">        BufferedInputStream_ bufferedInputStream_1 = <span class="keyword">new</span> BufferedInputStream_(<span class="keyword">new</span> ByteArrayInputStream_(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>]));</span><br><span class="line">        bufferedInputStream_1.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-BufferedReader和BufferedWriter"><a href="#4-5-BufferedReader和BufferedWriter" class="headerlink" title="4.5 BufferedReader和BufferedWriter"></a>4.5 BufferedReader和BufferedWriter</h3><p><strong>BufferedReader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedReaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/fileReader/test.txt"</span>;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath));</span><br><span class="line">        String readLine = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((readLine = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(readLine);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedWriter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/filewriter/new.txt"</span>;</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(filePath));</span><br><span class="line">        bufferedWriter.write(<span class="string">"Hello World!"</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        bufferedWriter.write(<span class="string">"你好 世界！"</span>);</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>文件复制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedCopy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sourcePath = <span class="string">"classpath://../resource/source/buffered.txt"</span>;</span><br><span class="line">        String targetPath = <span class="string">"classpath://../resource/target/buffered_copy.txt"</span>;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">null</span>;</span><br><span class="line">        String readLine;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(sourcePath));</span><br><span class="line">            bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(targetPath));</span><br><span class="line">            <span class="keyword">while</span> ((readLine=bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                bufferedWriter.write(readLine);</span><br><span class="line">                bufferedWriter.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != bufferedReader)</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != bufferedWriter)</span><br><span class="line">                    bufferedWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-BufferedInputStream和BufferedOutputStream"><a href="#4-6-BufferedInputStream和BufferedOutputStream" class="headerlink" title="4.6 BufferedInputStream和BufferedOutputStream"></a>4.6 BufferedInputStream和BufferedOutputStream</h3><p><strong>二进制文件Copy</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">      String sourcePath = <span class="string">"classpath://../resource/source/2017510143811976.png"</span>;</span><br><span class="line">      String targetPath = <span class="string">"classpath://../resource/target/2017510143811976_copy.png"</span>;</span><br><span class="line">      BufferedInputStream bufferedInputStream = <span class="keyword">null</span>;</span><br><span class="line">      BufferedOutputStream bufferedOutputStream = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="keyword">int</span> readData;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(sourcePath));</span><br><span class="line">          bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(targetPath));</span><br><span class="line">          <span class="keyword">while</span>((readData = bufferedInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">              bufferedOutputStream.write(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (bufferedInputStream!=<span class="keyword">null</span>)</span><br><span class="line">              bufferedInputStream.close();</span><br><span class="line">              <span class="keyword">if</span> (bufferedOutputStream!=<span class="keyword">null</span>)</span><br><span class="line">              bufferedOutputStream.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-ObjectInputStream和ObjectOutputStream"><a href="#4-7-ObjectInputStream和ObjectOutputStream" class="headerlink" title="4.7 ObjectInputStream和ObjectOutputStream"></a>4.7 ObjectInputStream和ObjectOutputStream</h3><blockquote><p>将<code>int num = 100</code>这个<code>int</code>数据保存到文件中，注意不是<code>100</code>这个数字，而是<code>int 100</code>,并且能够从文件中直接恢复。<br>将<code>Dog dog = new Dog(&quot;小黄&quot;,3)</code>这个对象保存在文件中并且能够从文件恢复。  </p></blockquote><p>上面的要求，就是能够将基本数据类型或者对象数据类型惊醒序列化和反序列化。</p><h4 id="4-7-1-序列化和反序列化"><a href="#4-7-1-序列化和反序列化" class="headerlink" title="4.7.1 序列化和反序列化"></a>4.7.1 序列化和反序列化</h4><p><strong>序列化</strong>就是在保存数据时，保存<strong>数据的值</strong>和<strong>数据类型</strong>。<br><strong>反序列化</strong>就是在恢复数据是，恢复<strong>数据的值</strong>和<strong>数据类型</strong>。<br>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：</p><ul><li>Serializable</li><li>Externalizable  </li></ul><p>示例：<br>ObjectOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.objectstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputSreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ObjectOutputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/objectstream/data.dat"</span>;</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(filePath));</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">100</span>);  <span class="comment">// int -&gt; Integer  实现了 Serializable</span></span><br><span class="line">        objectOutputStream.writeBoolean(<span class="keyword">true</span>); <span class="comment">// boolean -&gt; Boolean  实现了 Serializable</span></span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">"Java IO流"</span>); <span class="comment">// String 实现了 Serializable</span></span><br><span class="line">        objectOutputStream.writeDouble(<span class="number">100.00</span>);  <span class="comment">// double -&gt; Double  实现了 Serializable</span></span><br><span class="line">        objectOutputStream.writeChar(<span class="string">'a'</span>); <span class="comment">// char -&gt; Character 实现了 Serializable</span></span><br><span class="line"></span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog(<span class="string">"旺财"</span>, <span class="number">6</span>);</span><br><span class="line">        objectOutputStream.writeObject(dog);</span><br><span class="line"></span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">desc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是狗！汪汪汪！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObjectInputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo.objectstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">objetcInputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/objectstream/data.dat"</span>;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(filePath));</span><br><span class="line">        <span class="comment">// 反序列化必须与粗劣话的顺序一致</span></span><br><span class="line">        System.out.println(objectInputStream.readInt());</span><br><span class="line">        System.out.println(objectInputStream.readBoolean());</span><br><span class="line">        System.out.println(objectInputStream.readUTF());</span><br><span class="line">        System.out.println(objectInputStream.readDouble());</span><br><span class="line">        System.out.println(objectInputStream.readChar());</span><br><span class="line"></span><br><span class="line">        Object o = objectInputStream.readObject();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        Dog dog = (Dog)o; <span class="comment">// 同一个包下的同一个类才可以强转，不然需要声明称public</span></span><br><span class="line">        dog.desc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-2-对象处理流使用细节"><a href="#4-7-2-对象处理流使用细节" class="headerlink" title="4.7.2 对象处理流使用细节"></a>4.7.2 对象处理流使用细节</h4><p>注意事项和细节说明</p><ul><li>读写顺序需要一致；</li><li>要求实现序列化或发序列化对象实现Serializable接口；</li><li>序列化的类中建议添加SerialVersionUID,为了提高版本的兼容性；</li><li>序列化对象时，默认将里面所有属性进行序列化，但是除了static或transient修饰的成员；</li><li>序列化对象时，要求里面属性的类型也需要实现序列化接口；</li><li>序列化具备科技成型，也就是如果某类已经实现了序列化，则其所有的子类也已经默认实现了序列化。</li></ul><h3 id="4-8-标准输入输出流"><a href="#4-8-标准输入输出流" class="headerlink" title="4.8 标准输入输出流"></a>4.8 标准输入输出流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputAndOutputTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 标准输入流  默认设备  键盘</span></span><br><span class="line">        <span class="comment">// 编译类型</span></span><br><span class="line">        InputStream in = System.in;</span><br><span class="line">        <span class="comment">// 运行类型</span></span><br><span class="line">        System.out.println(System.in.getClass());</span><br><span class="line">        <span class="comment">// 标准输出流  默认设备  显示器</span></span><br><span class="line">        <span class="comment">// 编译类型</span></span><br><span class="line">        PrintStream out = System.out;</span><br><span class="line">        <span class="comment">// 运行类型</span></span><br><span class="line">        System.out.println(System.out.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-转换流-InputStreamReader和OutputStreamWriter"><a href="#4-9-转换流-InputStreamReader和OutputStreamWriter" class="headerlink" title="4.9 转换流(InputStreamReader和OutputStreamWriter)"></a>4.9 转换流(InputStreamReader和OutputStreamWriter)</h3><p>创建一个.txt文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">您好 世界！</span><br></pre></td></tr></table></figure><p>使用<code>BufferedReader</code>读取并打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件默认读取编码是UTF-8</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedReaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"classpath://../resource/fileReader/test.txt"</span>;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath));</span><br><span class="line">        String readLine = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((readLine = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(readLine);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">您好 世界！</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>修改文件的编码格式为<code>GBK</code>，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">���� ���磡</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p><img src="%E4%B9%B1%E7%A0%81.jpg" alt="乱码">  </p><h4 id="4-9-1-使用InputStreamReader读取文件"><a href="#4-9-1-使用InputStreamReader读取文件" class="headerlink" title="4.9.1 使用InputStreamReader读取文件"></a>4.9.1 使用InputStreamReader读取文件</h4><p><img src="InputStreamReader.png" alt="InputStreamReader"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputStringReaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String filePath = <span class="string">"class://../resource/transformation/codequestion.txt"</span>;</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filePath), <span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 使用InputStreamReader</span></span><br><span class="line"><span class="comment">//        int read = 0;</span></span><br><span class="line"><span class="comment">//        while((read = inputStreamReader.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)read);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        inputStreamReader.close();</span></span><br><span class="line">        <span class="comment">// BufferedReader</span></span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">        String readData;</span><br><span class="line">        <span class="keyword">while</span>((readData = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(readData);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">您好 世界！</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h4 id="4-9-2-使用OutputStreamReader读取文件"><a href="#4-9-2-使用OutputStreamReader读取文件" class="headerlink" title="4.9.2 使用OutputStreamReader读取文件"></a>4.9.2 使用OutputStreamReader读取文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputStreamWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       String filePath = <span class="string">"classpath://../resource/transformation/hello.txt"</span>;</span><br><span class="line">       OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(filePath),<span class="string">"UTF-8"</span>);</span><br><span class="line">       outputStreamWriter.write(<span class="string">"我们一起去看海！"</span>);</span><br><span class="line">       outputStreamWriter.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-PrintStream和PrintWiter"><a href="#5-PrintStream和PrintWiter" class="headerlink" title="5.PrintStream和PrintWiter"></a>5.PrintStream和PrintWiter</h3><p>打印流只有输出流没有输入流。<br><img src="PrintStream.png" alt="PrintStream"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PrintStream printStream = System.out;</span><br><span class="line">        printStream.print(<span class="string">"您好，世界！"</span>);</span><br><span class="line">        <span class="comment">// print方法底层调的write()方法</span></span><br><span class="line">        printStream.write(<span class="string">"哈哈哈"</span>.getBytes());</span><br><span class="line">        printStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改打印流输出的位置/设备</span></span><br><span class="line">        System.setOut(<span class="keyword">new</span> PrintStream(<span class="string">"classpath://../resource/print/print.txt"</span>));</span><br><span class="line">        System.out.print(<span class="string">"您好,中国！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="PrintWriter.png" alt="PrintWriter">  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line">        printWriter.println(<span class="string">"终于干完了！"</span>);</span><br><span class="line">        printWriter.close();</span><br><span class="line"></span><br><span class="line">        PrintWriter printWriter1 = <span class="keyword">new</span> PrintWriter(<span class="string">"classpath://../resource/transformation/printwriter.txt"</span>);</span><br><span class="line">        printWriter1.println(<span class="string">"终于干完了！"</span>);</span><br><span class="line">        printWriter1.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://www.jianshu.com/p/613ee60e08b4" target="_blank" rel="noopener">java基础之IO流（设计模式）</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://10veU.github.io/categories/Java/"/>
    
      <category term="IO" scheme="https://10veU.github.io/categories/Java/IO/"/>
    
    
      <category term="Java" scheme="https://10veU.github.io/tags/Java/"/>
    
      <category term="IO" scheme="https://10veU.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习（二）获取Docker</title>
    <link href="https://10veU.github.io/2021/09/08/Docker%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E8%8E%B7%E5%8F%96Docker/"/>
    <id>https://10veU.github.io/2021/09/08/Docker学习（二）获取Docker/</id>
    <published>2021-09-08T17:04:41.000Z</published>
    <updated>2022-06-17T05:59:24.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker学习（二）获取Docker"><a href="#Docker学习（二）获取Docker" class="headerlink" title="Docker学习（二）获取Docker"></a>Docker学习（二）获取Docker</h1><p>您可以在多个平台(Mac/Windows/Linux)上<a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener">下载</a>并安装 Docker。</p><h2 id="1-在Windows上安装Docker-Desktop前置条件"><a href="#1-在Windows上安装Docker-Desktop前置条件" class="headerlink" title="1. 在Windows上安装Docker Desktop前置条件"></a>1. 在Windows上安装Docker Desktop前置条件</h2><p>对于仍在微软服务时间表内的 Windows 10版本，Docker 只支持 Windows 上的 Docker 桌面。</p><h3 id="1-1-系统需求"><a href="#1-1-系统需求" class="headerlink" title="1.1 系统需求"></a>1.1 系统需求</h3><h4 id="WSL-Windows-Subsystem-for-Linux-2后端"><a href="#WSL-Windows-Subsystem-for-Linux-2后端" class="headerlink" title="WSL(Windows Subsystem for Linux) 2后端"></a>WSL(Windows Subsystem for Linux) 2后端</h4><ul><li>Windows 10 64bit: 家庭版或者专业版2004（build 19041）或者更高版本<br> Windows 10 64bit: 企业版或者教育版1909（build 18363） 或者更高版本</li><li>在Windows上启用WSL2特性，更多细节请参考<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Miscrosoft documentation</a>.</li><li>在Windows 10上成功运行WSL 2需要一下先决条件：<br>64位处理器和Second Level Address Translation(SLAT)（二级地址转换）<br>4GB系统内存<br>必须在BIOS设置中启用BIOS级虚拟化支持。更多信息参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled" target="_blank" rel="noopener">Virtualization</a>.</li><li>下载并安装Linux内核更新包。<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package" target="_blank" rel="noopener">在 Windows 10 上安装 WSL | Microsoft Docs</a><h4 id="Hyper-V-后端和Windows容器"><a href="#Hyper-V-后端和Windows容器" class="headerlink" title="Hyper-V 后端和Windows容器"></a>Hyper-V 后端和Windows容器</h4></li><li>Windows 10 64-bit: 专业版2004 (build 19041) 或者更高版本<br>  Windows 10 64bit: 企业版或者教育版1909（build 18363） 或者更高版本</li><li>必须启用 Hyper-V 和 Containers Windows 特性</li><li>在Windows 10上成功运行WSL 2需要一下先决条件：<ul><li>64位处理器和Second Level Address Translation(SLAT)（二级地址转换）</li><li>4GB系统内存</li><li>必须在BIOS设置中启用BIOS级虚拟化支持。更多信息参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled" target="_blank" rel="noopener">Virtualization</a>.<h4 id="Docker-Desktop-Installer包含哪些内容？"><a href="#Docker-Desktop-Installer包含哪些内容？" class="headerlink" title="Docker Desktop Installer包含哪些内容？"></a>Docker Desktop Installer包含哪些内容？</h4>Docker Desktop包含<a href="https://docs.docker.com/engine/" target="_blank" rel="noopener">Docker Engine</a>，Docker CLI client，<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker Compose</a>，Docker Content Trust，<a href="https://github.com/kubernetes/kubernetes/" target="_blank" rel="noopener">Kubernetes</a>和<a href="https://github.com/docker/docker-credential-helpers/" target="_blank" rel="noopener">Credential Helper</a>。<br>使用 Docker Desktop 创建的容器和镜像在安装它的计算机上的所有用户帐户之间共享。这是因为所有 Windows 帐户都使用相同的 VM 来构建和运行容器。请注意，在使用 Docker Desktop WSL 2后端时，不可能在用户帐户之间共享容器和镜像。<br>嵌套的虚拟化场景，比如在 VMWare 或 Parallels 实例上运行 Docker Desktop 可能可以使用，但这并不能保证。有关的更多信息，请参考<a href="https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios" target="_blank" rel="noopener">在嵌套虚拟化场景中运行 Docker 桌面</a>。<h4 id="关于Windows容器"><a href="#关于Windows容器" class="headerlink" title="关于Windows容器"></a>关于Windows容器</h4></li></ul></li><li><a href="https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers" target="_blank" rel="noopener">在Windows容器之间切换</a></li><li><a href="https://github.com/docker/labs/blob/master/windows/windows-containers/README.md" target="_blank" rel="noopener">开始使用windows容器（Lab）</a></li><li><a href="https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports" target="_blank" rel="noopener">适用于Windows的Docker容器平台的文章和博客</a></li></ul><h3 id="1-2-Install-Docker-Desktop-on-Windows"><a href="#1-2-Install-Docker-Desktop-on-Windows" class="headerlink" title="1.2 Install Docker Desktop on Windows"></a>1.2 Install Docker Desktop on Windows</h3><h4 id="查看自己的电脑系统是否满足系统需求"><a href="#查看自己的电脑系统是否满足系统需求" class="headerlink" title="查看自己的电脑系统是否满足系统需求"></a>查看自己的电脑系统是否满足系统需求</h4><p>开始-设置-系统-关于，如下示例：<br><strong>设备规格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">设备名称ESR-20151030WHY</span><br><span class="line">处理器Intel(R) Core(TM) i5-4200U CPU @ 1.60GHz   2.30 GHz</span><br><span class="line">机带 RAM8.00 GB</span><br><span class="line">设备 ID9E4CA172-84E3-48EB-8909-8E0CCD2D66A1</span><br><span class="line">产品 ID00330-50000-00000-AAOEM</span><br><span class="line">系统类型64 位操作系统, 基于 x64 的处理器</span><br><span class="line">笔和触控没有可用于此显示器的笔或触控输入</span><br></pre></td></tr></table></figure><p><strong>Windows规格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">版本Windows 10 专业版</span><br><span class="line">版本号21H1</span><br><span class="line">安装日期‎2021/‎7/‎12</span><br><span class="line">操作系统内部版本19043.1083</span><br><span class="line">体验Windows Feature Experience Pack 120.2212.3530.0</span><br></pre></td></tr></table></figure><p><strong><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Enable the Windows Subsystem for Linux</a></strong></p><ol><li>以管理员身份打开 PowerShell 并运行:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure></li></ol><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line"></span><br><span class="line">部署映像服务和管理工具</span><br><span class="line">版本: 10.0.19041.844</span><br><span class="line"></span><br><span class="line">映像版本: 10.0.19043.1083</span><br><span class="line"></span><br><span class="line">启用一个或多个功能</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">操作成功完成。</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure><p><img src="docker_02_01.png" alt="docker install"></p><ol start="2"><li>Check requirements for running WSL 2<br>要更新到 wsl2，您必须运行 Windows 10.</li></ol><ul><li>For x64 systems: Version 1903 or higher, with Build 18362 or higher.</li><li>For ARM64 systems: Version 2004 or higher, with Build 19041 or higher.</li><li>Builds lower than 18362 do not support WSL 2. Use the <a href="https://www.microsoft.com/software-download/windows10" target="_blank" rel="noopener">Windows Update Assistant</a> to update your version of Windows.<br>To check your version and build number, select Windows logo key + R, type winver, select OK. <a href="http://ms-settings:windowsupdate/" target="_blank" rel="noopener">Update to the latest Windows version</a> in the Settings menu.</li></ul><ol start="3"><li>Enable Virtual Machine feature<br>在安装 wsl2之前，您必须启用虚拟机平台的可选特性。您的计算机将需要虚拟化能力来使用这个特性。<br>以管理员身份打开 PowerShell 并运行:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure></li></ol><p>重新启动计算机以完成 WSL 安装并更新到 wsl2。</p><ol start="4"><li>Download the Linux kernel update package<br>下载最新软件包:</li></ol><ul><li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener">WSL2 Linux kernel update package for x64 machines 针对 x64机器的 WSL2 Linux 内核更新包</a></li><li>运行上一步中下载的更新包。(双击运行——系统将提示您提高权限，选择“是”以批准此安装。)</li></ul><ol start="5"><li>将 WSL 2 设置为默认版本<br>打开 PowerShell 并运行以下命令，在安装新的 Linux 发行版时将 WSL 2设置为默认版本:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; wsl --set-default-version 2</span><br><span class="line">有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>检查系统的处理器，系统RAM，BIOS中是否开启了虚拟化</strong><br>打开 PowerShell 并运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; systeminfo</span><br><span class="line"></span><br><span class="line">主机名:           ESR-20151030WHY</span><br><span class="line">OS 名称:          Microsoft Windows 10 专业版</span><br><span class="line">OS 版本:          10.0.19043 暂缺 Build 19043</span><br><span class="line">OS 制造商:        Microsoft Corporation</span><br><span class="line">OS 配置:          独立工作站</span><br><span class="line">OS 构建类型:      Multiprocessor Free</span><br><span class="line">注册的所有人:     微软用户</span><br><span class="line">注册的组织:       微软中国</span><br><span class="line">产品 ID:          00330-50000-00000-AAOEM</span><br><span class="line">初始安装日期:     2021/7/12, 21:17:33</span><br><span class="line">系统启动时间:     2021/8/1, 16:05:23</span><br><span class="line">系统制造商:       LENOVO</span><br><span class="line">系统型号:         80EQCTO1WW</span><br><span class="line">系统类型:         x64-based PC</span><br><span class="line">处理器:           安装了 1 个处理器。</span><br><span class="line">                  [01]: Intel64 Family 6 Model 69 Stepping 1 GenuineIntel ~1600 Mhz</span><br><span class="line">BIOS 版本:        LENOVO 9DCN26WW(V2.07), 2014/9/23</span><br><span class="line">Windows 目录:     C:\WINDOWS</span><br><span class="line">系统目录:         C:\WINDOWS\system32</span><br><span class="line">启动设备:         \Device\HarddiskVolume1</span><br><span class="line">系统区域设置:     zh-cn;中文(中国)</span><br><span class="line">输入法区域设置:   zh-cn;中文(中国)</span><br><span class="line">时区:             (UTC+08:00) 北京，重庆，香港特别行政区，乌鲁木齐</span><br><span class="line">物理内存总量:     8,120 MB</span><br><span class="line">可用的物理内存:   4,186 MB</span><br><span class="line">虚拟内存: 最大值: 16,312 MB</span><br><span class="line">虚拟内存: 可用:   11,908 MB</span><br><span class="line">虚拟内存: 使用中: 4,404 MB</span><br><span class="line">页面文件位置:     C:\pagefile.sys</span><br><span class="line">域:               WorkGroup</span><br><span class="line">登录服务器:       \\ESR-20151030WHY</span><br><span class="line">修补程序:         安装了 4 个修补程序。</span><br><span class="line">                  [01]: KB5003254</span><br><span class="line">                  [02]: KB5000736</span><br><span class="line">                  [03]: KB5004945</span><br><span class="line">                  [04]: KB5003742</span><br><span class="line">网卡:             安装了 2 个 NIC。</span><br><span class="line">                  [01]: Realtek PCIe GBE Family Controller</span><br><span class="line">                      连接名:      本地连接</span><br><span class="line">                      状态:        媒体连接已中断</span><br><span class="line">                  [02]: Qualcomm Atheros AR956x Wireless Network Adapter</span><br><span class="line">                      连接名:      无线网络连接</span><br><span class="line">                      启用 DHCP:   是</span><br><span class="line">                      DHCP 服务器: 192.168.0.1</span><br><span class="line">                      IP 地址</span><br><span class="line">                        [01]: 192.168.0.195</span><br><span class="line">                        [02]: fe80::78dd:61d6:a6e8:e5d4</span><br><span class="line">Hyper-V 要求:     已检测到虚拟机监控程序。将不显示 Hyper-V 所需的功能。</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure><p><img src="docker_02_02.png" alt="cpu"></p><h2 id="2-在-Windows-上安装-Docker-桌面"><a href="#2-在-Windows-上安装-Docker-桌面" class="headerlink" title="2. 在 Windows 上安装 Docker 桌面"></a>2. 在 Windows 上安装 Docker 桌面</h2><ul><li>双击 Docker Desktop Installer.exe 运行安装程序。</li><li>当提示时，确保启用 Hyper-V Windows 特性或者安装 WSL 2所需的 Windows 组件选项在 Configuration 页面上被选中。<br><img src="docker_02_03.png" alt="docker configuration"><br><img src="docker_02_04.png" alt="docker configuration"><br><img src="docker_02_05.png" alt="docker configuration"></li><li>按照安装向导上的说明授权安装程序并继续安装。<br><img src="docker_02_06.png" alt="docker configuration"></li><li>安装成功后，单击“关闭”完成安装过程。<br><img src="docker_02_07.png" alt="doccker configuration"></li><li>如果您的管理帐户与您的用户帐户不同，则必须将该用户添加到 docker-users 组中。以管理员身份运行计算机管理并导航到 <code>Local Users and Groups &gt; Groups &gt; docker-users</code>。右击可将用户添加到组中。注销并重新登录以使更改生效。<h2 id="3-启动Docker桌面"><a href="#3-启动Docker桌面" class="headerlink" title="3. 启动Docker桌面"></a>3. 启动Docker桌面</h2>点击Docker Desktop图标即可启动。<br><img src="docker_02_08.png" alt="docker configuration"><br><img src="docker_02_09.png" alt="docker configuration"><br>当状态栏中的鲸图标保持稳定时，Docker 桌面就会启动并运行，并且可以从任何终端窗口访问。要了解更多信息，请参见<a href="https://docs.docker.com/docker-for-windows/#docker-settings-dialog" target="_blank" rel="noopener">Docker设置</a>。<h2 id="4-快速入门指南"><a href="#4-快速入门指南" class="headerlink" title="4. 快速入门指南"></a>4. 快速入门指南</h2>要根据需要运行快速启动指南，右键单击通知区域(或系统托盘)中的 Docker 图标，以打开 Docker Desktop 菜单，然后选择快速启动指南。</li></ul><h2 id="5-更新"><a href="#5-更新" class="headerlink" title="5. 更新"></a>5. 更新</h2><p>从 Docker Desktop 3.0.0开始，Docker Desktop 的更新将作为以前版本的 delta 更新提供。当更新可用时，dockerdesktop 会显示一个图标，指示更新版本的可用性。您可以选择何时开始下载和安装过程。<br><img src="docker_02_10.png" alt="docker configuration"><br>单击“下载更新”当您准备好下载更新时。这将在后台下载更新。下载更新后，单击 Update 并从 Docker 菜单重新启动。这将安装最新更新并重新启动 Docker Desktop 以使更改生效。</p><h2 id="6-卸载Docker-Desktop"><a href="#6-卸载Docker-Desktop" class="headerlink" title="6. 卸载Docker Desktop"></a>6. 卸载Docker Desktop</h2><p>从Windows卸载Docker Desktop:</p><ul><li>点击Windows的开始菜单，选择设置-应用-应用和功能</li><li>在应用列表中选择Docker Desktop，选择卸载</li><li>点击卸载确认你的选择。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://10veU.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://10veU.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习（一）概述</title>
    <link href="https://10veU.github.io/2021/09/08/Docker%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E8%BF%B0/"/>
    <id>https://10veU.github.io/2021/09/08/Docker学习（一）概述/</id>
    <published>2021-09-08T15:06:56.000Z</published>
    <updated>2022-06-17T05:59:24.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker学习（一）概述"><a href="#Docker学习（一）概述" class="headerlink" title="Docker学习（一）概述"></a>Docker学习（一）概述</h1><p>Docker 是一个用于开发、发布和运行应用程序的开放平台。Docker 使您能够将应用程序与基础结构分离开来，从而可以快速交付软件。使用 Docker，您可以像管理应用程序一样管理基础结构。通过利用 Docker 的快速发布、测试和部署代码的方法，可以显著减少编写代码和在生产环境中运行代码之间的延迟。<br><a href="https://www.docker.com/" target="_blank" rel="noopener">🐳Docker官网</a><br><a href="https://docs.docker.com/" target="_blank" rel="noopener">🐳官方文档</a></p><h2 id="1-Docker平台"><a href="#1-Docker平台" class="headerlink" title="1. Docker平台"></a>1. Docker平台</h2><p>Docker 提供了在称为容器的松散隔离环境中打包和运行应用程序的能力。隔离和安全性允许您在给定的主机上同时运行多个容器。容器是轻量级的，包含运行应用程序所需的所有内容，因此不需要依赖于主机上当前安装的内容。您可以轻松地在工作时共享容器，并确保与您共享的每个人都使用相同的工作方式。<br>Docker提供了工具和平台来管理容器的生命周期:  </p><ul><li>使用容器开发应用程序及其支持组件；</li><li>容器成为分发和测试应用程序的单元；</li><li>准备就绪后，将应用程序部署到生产环境中，作为容器或已编排的服务。无论您的生产环境是本地数据中心、云提供商，还是两者的混合体，这都是一样的。<h2 id="2-Docker可以做什么？"><a href="#2-Docker可以做什么？" class="headerlink" title="2. Docker可以做什么？"></a>2. Docker可以做什么？</h2></li><li>应用程序的快速、一致的交付</li><li>响应式部署和扩展</li><li>在同一个硬件上运行更多的工作负载</li></ul><h2 id="3-Docker体系结构"><a href="#3-Docker体系结构" class="headerlink" title="3. Docker体系结构"></a>3. Docker体系结构</h2><p>Docker 使用<code>client-Server</code>体系结构。Docker client与 Docker daemon进行对话，后者执行<strong>构建、运行和分发 Docker 容器</strong>的繁重工作。Docker client与 Docker daemon可以在同一个系统上运行，或者您可以将Docker client连接到远程Docker daemon。Docker client和Docker daemon使用 REST API、 UNIX 套接字或网络接口进行通信。另一个Docker client是  Docker Compose，它允许您处理由一组容器组成的应用程序。<br><img src="docker_platform.png" alt="Docker"></p><h3 id="3-1-Docker守护进程（Docker-daemon）"><a href="#3-1-Docker守护进程（Docker-daemon）" class="headerlink" title="3.1 Docker守护进程（Docker daemon）"></a>3.1 Docker守护进程（Docker daemon）</h3><p>Docker daemon(dockerd)监听 Docker API 请求并管理 Docker 对象，如镜像、容器、网络和数据卷（用于保存持久化数据）。守护进程还可以与其他守护进程通信，以管理 Docker 服务。</p><h3 id="3-2-Docker客户端（Docker-client）"><a href="#3-2-Docker客户端（Docker-client）" class="headerlink" title="3.2 Docker客户端（Docker client）"></a>3.2 Docker客户端（Docker client）</h3><p>Docker client(Docker)是许多 Docker 用户与 Docker 交互的主要方式。当您使用诸如 docker run 之类的命令时，客户端将这些命令发送给 dockerd，后者执行这些命令。Docker 命令使用 Docker API。Docker 客户端可以与多个守护进程通信。</p><h3 id="3-3-Docker注册中心（Docker-registries）"><a href="#3-3-Docker注册中心（Docker-registries）" class="headerlink" title="3.3 Docker注册中心（Docker registries）"></a>3.3 Docker注册中心（Docker registries）</h3><p>Dockerregistry 存储 Docker images。Docker Hub 是任何人都可以使用的公共注册中心，Docker 默认配置为在 Docker Hub 上查找镜像。你甚至可以运行自己的私人注册中心。<br>当您使用 docker pull 或 docker 运行命令时，所需的映像将从您配置的注册中心中提取出来。当您使用 docker push 命令时，您的映像将被推送到您配置的注册中心。</p><h3 id="3-4-Docker对象（Docker-objects）"><a href="#3-4-Docker对象（Docker-objects）" class="headerlink" title="3.4 Docker对象（Docker objects）"></a>3.4 Docker对象（Docker objects）</h3><p>当你使用 Docker 时，你正在创建和使用镜像、容器、网络、数据卷、插件和其他对象。</p><h4 id="镜像（images"><a href="#镜像（images" class="headerlink" title="镜像（images)"></a>镜像（images)</h4><p>镜像是一个只读模板，其中包含创建 Docker 容器的说明。通常，一个镜像基于另一个图像，并带有一些额外的定制。例如，你可以构建一个镜像基于 ubuntu 镜像，但是你也要安装Apache HTTP Server 和你的应用程序，以及运行你的应用程序所需的配置细节。<br>您可以创建自己的镜像，也可以只使用其他人创建并在注册表中发布的镜像。要构建您自己的镜像，您需要创建一个 Dockerfile，它使用一个简单的语法来定义创建映像和运行映像所需的步骤。Dockerfile 中的每条指令都在镜像中创建一个图层。当您更改 Dockerfile 并重新生成图像时，只会重新生成已更改的图层。与其他虚拟化技术相比，这是使镜像如此轻量化、小巧和快速的部分原因。</p><h4 id="容器（Containers）"><a href="#容器（Containers）" class="headerlink" title="容器（Containers）"></a>容器（Containers）</h4><p>容器是镜像的可运行实例。您可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器。您可以将容器连接到一个或多个网络，将存储器附加到容器上，甚至可以根据容器的当前状态创建新镜像。<br>默认情况下，容器与其他容器及其主机相对隔离较好。您可以控制容器的网络、存储或其他基础子系统与其他容器或主机的隔离程度。<br>容器是由其镜像以及创建或启动时提供给它的任何配置选项定义的。当一个容器被移除时，任何对其状态的更改，如果没有存储在持久性存储中的话，都会消失。</p><ul><li>示例 <code>docker run</code> 命令<pre><code class="bash">$ docker run -i -t ubuntu /bin/bash</code></pre>当您运行此命令时，会发生以下情况(假设您使用的是默认注册中心配置) :</li></ul><ol><li>如果你本地没有 ubuntu 镜像，Docker 会从你配置的注册中心中提取它，就像你手动运行 docker pull  ubuntu 一样。</li><li>Docker 创建一个新容器，就像您已经手动运行了一个 docker container create命令一样。</li><li>Docker 将一个读写文件系统分配给容器，作为它的最后一层。这允许正在运行的容器在其本地文件系统中创建或修改文件和目录。</li><li>由于您没有指定任何网络选项，因此 Docker 创建一个网络接口将容器连接到默认网络。这包括为容器分配一个 IP 地址。默认情况下，容器可以使用主机的网络连接连接到外部网络。</li><li>Docker 启动容器并执行/bin/bash。因为容器是交互式运行的，并且连接到您的终端(由于-i 和-t 标志) ，所以您可以在将输出记录到终端的同时使用键盘提供输入。</li><li>当键入 exit 以终止/bin/bash 命令时，容器将停止，但不会被删除。你可以重新启动或者删除它。<h2 id="4-Docker使用的基础技术"><a href="#4-Docker使用的基础技术" class="headerlink" title="4. Docker使用的基础技术"></a>4. Docker使用的基础技术</h2>并利用 Linux 内核的几个特性来实现其功能。Docker 使用namespaces技术提供称为容器的隔离工作区。运行容器时，Docker 为该容器创建一组名称空间。<br>这些名称空间提供了一个隔离层。容器的每个方面都运行在一个单独的名称空间中，它的访问受到该名称空间的限制。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://10veU.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://10veU.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>云计算概览</title>
    <link href="https://10veU.github.io/2021/09/07/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A6%82%E8%A7%88/"/>
    <id>https://10veU.github.io/2021/09/07/云计算概览/</id>
    <published>2021-09-07T20:54:50.000Z</published>
    <updated>2022-06-17T05:59:24.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="云计算概览"><a href="#云计算概览" class="headerlink" title="云计算概览"></a>云计算概览</h1><h2 id="1-云计算定义"><a href="#1-云计算定义" class="headerlink" title="1. 云计算定义"></a>1. 云计算定义</h2><p>云计算（<code>CloudComputing</code>）在维基百科的定义是：一种基于<strong>互联网</strong>的计算方式，通过这种方式，<strong>共享</strong>的软硬件资源和信息可以<strong>按需求</strong>提供给计算机终端和其他设备。<br>                            —— 维基百科<br>云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络服务（即随时随地接入可接入），进入可配置的计算资源共享池（包括：网络、服务器、存储、应用软件、服务），这些资源能够被快速提供，只需投入很少的管理工作，或与服务供应商进行很少的交互。<br>            —— 美国国家标准与技术研究院 </p><h2 id="2-云计算的发展"><a href="#2-云计算的发展" class="headerlink" title="2. 云计算的发展"></a>2. 云计算的发展</h2><p><img src="%E4%BA%91%E8%AE%A1%E7%AE%97%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.png" alt="云计算发展历史">  </p><h2 id="3-云计算的分类"><a href="#3-云计算的分类" class="headerlink" title="3. 云计算的分类"></a>3. 云计算的分类</h2><p>云计算的分类有多种，按照<strong>服务类型</strong>分为<code>IaaS</code>、<code>PaaS</code>和<code>SaaS</code>。</p><ul><li>IaaS<br>IaaS（Infrastructure as a Service），基础设施即服务，就是将基础设施当作服务对外输出，那么什么是基础设施呢？计算、存储、网络这些原始资源就是基础设施资源，通过互联网对外提供服务。典型的例子是Amazon的EC2服务。虚拟化是IaaS实现的基础，通过计算虚拟化、网络虚拟化和存储虚拟化将物理资源整合成虚拟的资源池，然后将资源以更小的粒度提供给资源申请者，从而完成资源的二次分配。</li><li>PaaS<br>PaaS（Platform as a Service），平台即服务，它直接为用户提供一套平台，包括语言运行环境、编程框架及数据存储中间件等一系列功能。这个平台可以是Java开发平台，用户只需要在遵守平台开发规范的前提下，编写自己的业务代码，单击运行，平台就会自动完成代码编译和打包，以及程序所需的数据存储（例如MySQL），即通过调用SDK或者API就可以使用平台，使得用户可以更加关注自己的业务代码的编写。容器和Kubernetes技术的不断成熟，PaaS将管理的对象从资源升级到服务，面向接口编程和运维，PaaS平台的本质就是自动化编译构建及自动化服务运维。  </li><li>SaaS<br>SaaS（Software as a Service），软件即服务，它是最高层的抽象，对于最终用户，它不关心任何技术相关内容，以服务的方式交付。我们使用的在线云编辑器就是一种SaaS服务，只需要通过浏览器就可以在线编辑Word或者PPT，并且可以云端保存，而且只要在能够连接到互联网的情况下，都可以编辑，用户不需要关心背后的实现细节。  </li></ul><p><img src="%E5%BA%94%E7%94%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="应用层次结构"><br>从IaaS到SaaS，用户对底层技术的依赖越来越低，使用的方式越来越便捷，相应对底层技术的要求也越来越高。<br>伴随着时代的发展，也出现了一些新的服务类型，例如FaaS（Function as a Service），腾讯云提供的云函数。<br>将容器当作一种服务类型的CaaS（Container as a Service），通过容器化使开发人员和运维人员可以在这里共同构建、迁移和运行应用程序。<br>还有BaaS（区块链即服务）、TaaS（TensorFlow即服务）等，这些都是SaaS的应用。<br>按照<strong>服务范围</strong>分为私有云、公有云和混合云。</p><ul><li>私有云<br>私有云，顾名思义，就是企业内部私有化部署的，为企业内部提供云服务。私有云的主要目的是充分利用自有物理服务器资源，更加安全便捷地获取云服务，尤其在金融行业，为了数据的保密和安全，通常会采用私有化部署。私有云的特点是一般规模比较小、单集群或者同城多集群部署、几千级别的服务器数量、对内部隔离和安全要求比较低，当然一个企业内部不同部门的资源隔离也是必须的。为了适应不同企业的组织规划和流程，通常还会根据企业需求，定制一些特有的功能，这也是当前很多CMP运管平台专攻的市场。私有云的定制化让私有云更加贴近客户的需求、接近数据源的部署方式，更加高效、便捷。</li><li>公有云<br>公有云是当前最为大众熟知的云服务提供方式，向全球用户提供云服务，当前最大几个公有云厂商包括AWS、微软、Google和阿里云。公有云的特点是集群规模很大，百万级别的服务器，全球多区域部署的数据中心。它们在系统安全、防攻击，以及可靠性等方面会有更高的要求。</li><li>混合云<br>混合云是将上面两种场景结合的产物，既然企业已经有了私有云，为什么还需要公有云服务呢？一方面是对数据安全的保护，不能将所有服务都迁移至公有云部署；另一方面，面对突发流量的情况，可以利用公有云快速伸缩的特性，分担业务流量，最典型的就是中国铁路12306通过阿里云分担车票查询服务的请求。为了管理混合云，企业内部通常会定制一套混合云管理系统，同时对接私有云和公有云的API，但混合云实施的难点是解决服务之间的调用、网络互连和资源调度等问题。  </li></ul><p>云计算还可以根据行业划分为政务云（面向政府行业）、金融云（面向金融行业）、教育云（面向教育行业）等，根据每个行业的不同行业特征，提供定制的云服务。</p><h2 id="4-云计算架构"><a href="#4-云计算架构" class="headerlink" title="4. 云计算架构"></a>4. 云计算架构</h2><h3 id="4-1-部署架构"><a href="#4-1-部署架构" class="headerlink" title="4.1 部署架构"></a>4.1 部署架构</h3><ul><li>私有云<br>  中小企业的私有云部署通常采用几百台服务器，通过vlan方式实现网络隔离，较为简单、高效。中型企业的私有云部署，需要考虑多机房网络互连和备份，通过专线互连，跨机房网络VXLAN是一个很好的解决方案。<br>  <img src="%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.png" alt="部署架构"></li><li>公有云<br>   在公有云中，资源管理按照层级划分，首先是区域（Region），每个区域都是独立的地理位置，并且完全隔离，可以实现一定程度的容错能力和稳定性，而且EC2实例支持跨区域的部署。<br>   <img src="AWS.png" alt="AWS"></li></ul><h3 id="4-2-架构设计"><a href="#4-2-架构设计" class="headerlink" title="4.2 架构设计"></a>4.2 架构设计</h3><p><img src="%E6%9E%B6%E6%9E%84.jpg" alt="架构"></p><h2 id="5-云计算中的关键技术"><a href="#5-云计算中的关键技术" class="headerlink" title="5. 云计算中的关键技术"></a>5. 云计算中的关键技术</h2><h3 id="5-1-异构资源管理"><a href="#5-1-异构资源管理" class="headerlink" title="5.1 异构资源管理"></a>5.1 异构资源管理</h3><p>异构资源，就是数据中心里面有多种虚拟化软件存在的场景，当然对于最终使用虚拟机的用户来说，是不需要感知的。当有不同的虚拟化软件存在的时候，IaaS平台需要去适配各种虚拟化接口。如果有一部分虚拟机是VMware，还有一部分是KVM，当需要管理这两种虚拟化软件的时候，需要通过相应的接口去适配。通常，针对KVM需要通过Libvirt接口，而针对VMware是通过VCenter的API的。将不同的接口通过适配器模式抽象成统一的接口。在资源管理的时候，需要先确定资源所属的虚拟化类型，然后调用不同的虚拟化API完成资源管理。例如，针对一次虚拟机的开机操作，需要先通过数据库查询该虚拟机所在资源池、所使用的虚拟化软件，然后调用对应的虚拟化软件API，如果是KVM，则去调用Libvirt的接口启动Domain。如果是虚拟机和容器的混合，就需要去适配容器的管理API。</p><h3 id="5-2-虚拟化"><a href="#5-2-虚拟化" class="headerlink" title="5.2 虚拟化"></a>5.2 虚拟化</h3><p>虚拟化是云的基石，包括<strong>计算虚拟化</strong>、<strong>分布式存储虚拟化</strong>、<strong>SDN网络虚拟化</strong>等。在云的环境中软件定义一切，通过软件实现了<strong>资源隔离</strong>、<strong>安全访问</strong>、<strong>数据高可用性</strong>和<strong>网络的自定义</strong>。<br><strong>虚拟化需要解决资源的竞争与隔离</strong>，多个用户的进程运行在同一台服务器上面，<strong>一方面需要保障每个进程具有相同的优先级</strong>，避免由于单个进程消耗过多资源而影响其他进程的运行，<strong>另一方面需要完善隔离机制</strong>，避免单个程序的安全漏洞影响其他用户程序。<br>虚拟化需要提供与传统资源相兼容的接口，很多情况下，终端用户是不需要感知虚拟化存在的。在为用户分配一台服务器的时候，用户不用关心它到底是一台物理机，还是一台虚拟机。分配一个块存储或者NFS的时候，用户也不需要了解数据是如何保存的。<br>通过软件虚拟化虽然可以实现很多硬件的功能，通过软件虚拟化虽然可以实现很多硬件的功能，虚拟化并不能完全达到硬件性能，并且很多虚拟化方案本身还消耗一定的资源。</p><h3 id="5-3-资源调度"><a href="#5-3-资源调度" class="headerlink" title="5.3 资源调度"></a>5.3 资源调度</h3><p>资源调度就是当用户申请资源的时候，系统需要通过调度确定资源位置（针对虚拟机调度场景决定虚拟机开在哪台物理机器上）。资源调度的优劣不仅会影响资源利用率的高低，还会影响整个系统的稳定性。<br>Google在一篇关于Omega的调度系统论文中将调度分为三类：单体、二层调度和共享状态。</p><ul><li>单体<br>单体是指所有任务都是通过一个串行调度器分配的，典型的是GoogleBorg和它的开源实现Kubernetes，它的优点是简单，但缺点也比较明显，很难支持多类型任务的执行，如同时支持批处理和长任务。</li><li>二层调度<br>二层调度是将资源分配和任务调度分离，第一层是从全局的资源池中分配资源给各种类型任务调度器，第二层任务调度器依据任务特点启动任务，典型的代表是Mesos和Yarn，其中，Mesos的Framework或者Yarn的AppMaster就是任务调度器。二层调度器的缺点是：资源调度器无法感知全局资源，只了解自己的可用资源，并且每个任务调度器只会最大化自己的利益，造成全局资源的使用失衡。  </li><li>共享状态<br>共享状态通过在每个任务调度器中保存一份整个集群状态信息的副本，从而实现全局调度，典型的代表是Omega。但共享状态调度的方式实现起来比较复杂，除了解决数据共享，还需要解决调度冲突等问题。  </li></ul><p><img src="%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6.png" alt="任务调度"><br>通常的调度流程分为两层，第一层是主机过滤（Filter），第二层是主机的权值打分（Weight）。<br><img src="%E8%B0%83%E5%BA%A6%E6%B5%81%E7%A8%8B.png" alt="调度流程"><br>过Filter和Weight决定这次创建资源（虚拟机或者容器）应该分配到哪一台服务器上。在Filter过程中，主要是主机筛选，通常是对容量如剩余CPU、内存、主机端口、主机IP地址、主机名或者主机位置等条件筛选。在Weight阶段，主要通过一些调度算法，如：平均资源使用算法、最大主机资源利用率算法、亲和与反亲和算法等给每个Filter后的主机进行评分，最后按照分数排序确定最优主机。当服务器达到一定规模后，Filter和Weight过程将会耗费很多时间，优化的方式通常包括：分区调度（将主机划分成多个集群，每次调度只针对集群）、并行调度（将调度算法并行化处理，提高执行效率，并采用乐观锁和重试机制）。<br>在资源混部的架构下，资源调度更加复杂：虚拟机与容器混部、流或批处理任务与常驻进程混部、多任务优先级QoS等。任务优先级调度需要保障高优先级任务拥有更高的资源分配权。通常批处理任务的优先级比较低，而Web服务的优先级较高，当资源不足时可以优先回收批处理，保障Web服务的稳定运行。</p><h3 id="5-4-自定义网络"><a href="#5-4-自定义网络" class="headerlink" title="5.4 自定义网络"></a>5.4 自定义网络</h3><p>在云环境中，每个用户都有多套VPC（Virtual Private Cloud）。这是用户自定义的网络环境，可以配置网络的IP地址范围、创建子网，以及配置路由表、网关和ACL安全设置等操作。<br>网络虚拟化，或者说SDN技术可以帮助我们解决相关问题。虚拟的网络交换机提供数据帧的二层转发，相比于传统的物理交换机，可以更加灵活地配置，例如可以通过流表随意修改源mac和目的mac、添加和去除vlan等；虚拟的路由器共有三层转发功能，结合iptables技术提供NAT功能，通过namespace技术可以为每个用户提供一个虚拟路由器；还有安全组的设置，可以自定义各种安全规则，将虚拟机加入安全组，从而应用特定的安全策略等。</p><h3 id="5-5-安全与高可用"><a href="#5-5-安全与高可用" class="headerlink" title="5.5 安全与高可用"></a>5.5 安全与高可用</h3><p>安全是指数据的访问安全和不丢失，高可用是指数据可以随时被访问。用户将数据和业务迁移到云上是存在一定风险的。特别在公有云环境中，保障数据安全保密及可用非常重要。在面对系统漏洞或者网络DDoS攻击时，如何做到将风险降到最低等问题都是云计算面临的关键技术。数据安全常用的隔离技术包括计算虚拟化隔离（如KVM），网络虚拟化（如VXLAN），存储虚拟化（如LUN），还包括用户权限认证和授权管理等。数据的高可用可以通过多副本实现，甚至是跨数据中心的多副本备份，服务的高可用可以借助高可用的弹性负载均衡或者纠错码分发流量，自动摘除后端故障节点来实现。</p><h2 id="6-云计算的优势"><a href="#6-云计算的优势" class="headerlink" title="6. 云计算的优势"></a>6. 云计算的优势</h2><ul><li>资源使用率的提高</li><li>提高系统安全</li><li>可以降低初期的投入</li><li>保证了服务的可靠性</li><li>可以缩短业务上线的周期<h2 id="7-云计算面临的风险和挑战"><a href="#7-云计算面临的风险和挑战" class="headerlink" title="7. 云计算面临的风险和挑战"></a>7. 云计算面临的风险和挑战</h2>主要风险是<strong>漏洞扩散</strong>，云的使用方式是将服务整合到一起，从而充分利用资源，然而鸡蛋放到一个篮子的做法，很容易引起安全漏洞的扩散，如果一个云的恶意用户通过虚拟化存在的漏洞，从而获得主机的操作权限，进一步获取整个数据中心的操作权限，那么造成的影响将远远超过传统的黑客攻击。<br>面临的挑战主要包括：<br>①定制需求，无论是公有云，还是私有云，面对的客户群体的需求差异性很大，需要很多定制任务，而且很多定制并不能作为通用特性附加到产品，这些定制耗费很多人力物力；<br>②云服务受网络的影响很大，一方面是云的接入通过互联网，这种接入方式很难保证用户的体验，毕竟需要经过运营商的中间网络，另一方面是云数据中心之间的互连，如果是同城通过专线，传输的连续性基本可以得到保证，但如果是异地，即便是通过专线也很难保障传输的连续性；<br>③政策影响，如果将数据放到云上面，很多企业可能比较担忧数据的安全，即便企业能够放开，很多政府的条例也不允许，例如AWS进入中国，阿里云进入美国，都会面临很多政策风险。<h2 id="8-AWS（Amazon-Web-Service）"><a href="#8-AWS（Amazon-Web-Service）" class="headerlink" title="8. AWS（Amazon Web Service）"></a>8. AWS（Amazon Web Service）</h2></li><li>IAM（Identity and Access Management）<br>IAM是AWS（Amazon Web Services）的权限管理服务，负责AWS的认证和授权。可以通过IAM创建和管理AWS的用户和用户组，并设置各种权限来允许或拒绝用户对AWS资源的访问，从而保证资源的隔离和安全。</li><li>EC2（Amazon Elastic Compute Cloud）<br>在AWS（Amazon Web Services）云中提供可扩展的计算服务。通俗来说，即提供虚拟机服务。</li><li>虚拟机安全服务安全组（Security Group）<br>虚拟机安全服务安全组（Security Group） 起着虚拟防火墙的作用，可以控制一个或多个实例的流量。在启动EC2实例时，将一个或多个安全组与该实例关联，并且为每个安全组添加规则，规定上行（流出）和下行（流入）的流量规则。</li><li>AMI（Amazon Machine Images）<br>AMI（Amazon Machine Images）是Amazon系统镜像服务，提供启动虚拟机所需的启动模块。  </li><li>EBS（Amazon Elastic Block Store）<br>EBS（Amazon Elastic Block Store）为EC2实例提供块存储服务，它是高可用的块存储，并且可以加载到同一个AZ的任何一个实例中，即使虚拟机销毁，这些EBS的数据仍然会被保持，特别适高I/O类型的需求，例如文件系统或数据库存储。</li><li>VPC (Virtual Private Cloud）<br>Amazon VPC（Amazon Virtual Private Cloud）是在AWS上创建隔离的私有虚拟网络。可以在VPC中启动实例。一个VPC与传统数据中心的一个网络相似，提供了动态变更和扩展的能力。在VPC中可以设定IP地址段，创建子网，并配置路由表、网关和安全设置。绑定浮动IP能够为VPC的实例提供公网服务，甚至可以将VPC连接到自己企业的数据中心，并利用AWS云扩展数据中心。弹性IP地址是专为动态云计算设计的静态IPv4地址，弹性IP地址可以快速地将地址重新映射到用户账户中的另一个实例中，从而屏蔽实例故障。</li><li>S3（Simple Storage Service）<br>是AWS的对象存储服务，保证99.999999999%的存储可靠性。S3使用HTTP的方式提供服务，计价方式通过存储用量和HTTP请求次数综合定价。S3存储分为两级：bucket（对象桶）和object（对象）。</li></ul><hr><p>参考：  </p><ol><li>云计算那些事儿：从IaaS到PaaS进阶 陈晓宇（著）  </li><li><a href="https://www.zhihu.com/question/22793847/answer/556691008" target="_blank" rel="noopener">虚拟化与云计算有什么区别？</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="云计算" scheme="https://10veU.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="读书笔记" scheme="https://10veU.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="云计算" scheme="https://10veU.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="读书笔记" scheme="https://10veU.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud之Netflix Zuul服务网关</title>
    <link href="https://10veU.github.io/2021/09/03/Spring-Cloud%E4%B9%8BNetflix-Zuul%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <id>https://10veU.github.io/2021/09/03/Spring-Cloud之Netflix-Zuul服务网关/</id>
    <published>2021-09-03T23:14:41.000Z</published>
    <updated>2022-06-17T05:59:24.326Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Cloud之Netflix-Zuul服务网关"><a href="#Spring-Cloud之Netflix-Zuul服务网关" class="headerlink" title="Spring Cloud之Netflix Zuul服务网关"></a>Spring Cloud之Netflix Zuul服务网关</h1><h2 id="1-什么是服务网关"><a href="#1-什么是服务网关" class="headerlink" title="1. 什么是服务网关?"></a>1. 什么是服务网关?</h2><p>API Gateway（API GW / API 网关），顾名思义，是出现在系统边界上的一个面向 API 的、串行集中式的强管控服务，这里的边界是企业 IT 系统的边界，主要起到隔离外部访问与内部系统的作用。在微服务概念的流行之前，API 网关的实体就已经诞生了，例如银行、证券等领域常见的前置机系统，它也是解决访问认证、报文转换、访问统计等问题的。<br>API 网关的流行，源于近几年来，移动应用与企业间互联需求的兴起。移动应用、企业互联，使得后台服务支持的对象，从以前单一的 Web 应用，扩展到多种使用场景，且每种使用场景对后台服务的要求都不尽相同。这不仅增加了后台服务的响应量，还增加了后台服务的复杂性。随着微服务架构概念的提出，API 网关成为了微服务架构的一个标配组件。<br>API 网关是一个服务器，是系统对外的唯一入口。API 网关封装了系统内部架构，为每个客户端提供定制的 API。所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有非业务功能。API 网关并不是微服务场景中必须的组件，如下图，不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问。<br><img src="zuul_001.jpg" alt="服务网关"><br>但对于服务数量众多、复杂度比较高、规模比较大的业务来说，引入 API 网关也有一系列的好处：  </p><ul><li>聚合接口使得服务对调用者透明，客户端与后端的耦合度降低</li><li>聚合后台服务，节省流量，提高性能，提升用户体验</li><li>提供安全、流控、过滤、缓存、计费、监控等 API 管理功能<h2 id="2-为什么要使用服务网关？"><a href="#2-为什么要使用服务网关？" class="headerlink" title="2. 为什么要使用服务网关？"></a>2. 为什么要使用服务网关？</h2></li><li><strong>单体应用</strong>：浏览器发起请求，请求直接打到单体应用所在的机器上，应用从数据库查询数据原路返回给浏览器，对于单体应用来说，它只有一个，不需要网关。  </li><li><strong>微服务</strong>：微服务的应用可能部署在不同机房，不同地区，不同域名下。此时客户端（浏览器/手机/软件工具）想要请求对应的服务，都需要知道机器的具体的IP或者域名URL，当微服务实例众多时，这是难以记忆的。此时就有了网关，客户端相关的请求直接发送到网关，由网关根据请求标识解析判断出具体的微服务ip，再把请求转发到微服务实例。这其中的记忆功能就全部交由网关来操作了。  </li></ul><p><img src="zuul_002.png" alt="服务网关演进"></p><p><strong>总结</strong><br><img src="zuul_003.png" alt="用户请求微服务"><br>如果让客户端直接与各个微服务交互：  </p><ul><li>客户端会多次请求不同的微服务，增加了客户端的复杂性</li><li>存在跨域请求，在一定场景下处理相对复杂</li><li>身份认证问题，每个微服务需要独立身份认证</li><li>难以重构，随着项目的迭代，可能需要重新划分微服务</li><li>某些微服务可能使用了防火墙/浏览器不友好的协议，直接访问会有一定的困难   </li></ul><p><img src="zuul_004.png" alt="用户请求微服务">  </p><p>因此，我们需要网关介于客户端与服务器之间的中间层，所有外部请求率先经过微服务网关，客户端只需要与网关交互，只需要知道网关地址即可。这样便简化了开发且有以下优点：  </p><ul><li>易于监控，可在微服务网关收集监控数据并将其推送到外部系统进行分析</li><li>易于认证，可在微服务网关上进行认证，然后再将请求转发到后端的微服务，从而无需在每个微服务中进行认证</li><li>减少了客户端与各个微服务之间的交互次数<h2 id="3-服务网关解决了什么问题？"><a href="#3-服务网关解决了什么问题？" class="headerlink" title="3. 服务网关解决了什么问题？"></a>3. 服务网关解决了什么问题？</h2><img src="zuul_005.png" alt="网关解决了什么问题"><br>网关具有身份认证与安全、审查与监控、动态路由、负载均衡、缓存、请求分片与管理、静态响应处理等功能。当然最主要的职责还是与“外界联系”。<br>总结一下，网关应当具备以下功能：  </li><li>性能：API 高可用，负载均衡，容错机制。</li><li>安全：权限身份认证、脱敏，流量清洗，后端签名（保证全链路可信调用），黑名单（非法调用的限制）。</li><li>日志：日志记录，一旦涉及分布式，全链路跟踪必不可少。</li><li>缓存：数据缓存。</li><li>监控：记录请求响应数据，API 耗时分析，性能监控。</li><li>限流：流量控制，错峰流控，可以定义多种限流规则。</li><li>灰度：线上灰度部署，可以减小风险。</li><li>路由：动态路由规则。<h2 id="4-常用网关解决方案"><a href="#4-常用网关解决方案" class="headerlink" title="4. 常用网关解决方案"></a>4. 常用网关解决方案</h2><h3 id="4-1-Nginx-Lua"><a href="#4-1-Nginx-Lua" class="headerlink" title="4.1 Nginx + Lua"></a>4.1 <a href="https://nginx.org/en/" target="_blank" rel="noopener">Nginx</a> + <a href="http://www.lua.org/" target="_blank" rel="noopener">Lua</a></h3><table><thead><tr><th></th><th align="center">Nginx</th><th align="center">Zuul</th></tr></thead><tbody><tr><td>开发语言</td><td align="center">C</td><td align="center">Java</td></tr><tr><td>负载均衡</td><td align="center">采用服务器实现负载均衡</td><td align="center">采Eureka + Ribbon来实现本地负载均衡</td></tr><tr><td>适用范围</td><td align="center">适合服务器端负载均衡 适合做门户网关，作为整个全局的网关</td><td align="center">适合微服务中实现网关 属于业务网关，主要用来对应不同的客户端提供服务，用户聚合业务</td></tr><tr><td>区别</td><td align="center">–</td><td align="center">可以实现熔断，重试等功能</td></tr><tr><td>其他语言整合</td><td align="center">可以整合一些脚本语言（Nginx + Lua）</td><td align="center">–</td></tr><tr><td>服务器本质</td><td align="center">高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMIP服务器</td><td align="center">开源的API Gateway服务器，本质上是一个Servlet应用，提供动态路由，监控，弹性，安全等边缘服务的框架</td></tr><tr><td>### 4.2 <a href="https://konghq.com/kong" target="_blank" rel="noopener">Kong</a></td><td align="center"></td><td align="center"></td></tr><tr><td>Kong 是 Mashape 提供的一款 API 管理软件，它本身是基于 Ngnix + Lua 的，但比 Nginx 提供了更简单的配置方式，数据采用了 ApacheCassandra/PostgreSQL 存储，并且提供了一些优秀的插件，比如验证，日志，调用频次限制等。Kong 非常诱人的地方就是提供了大量的插件来扩展应用，通过设置不同的插件可以为服务提供各种增强的功能。</td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><p>优点：基于 Nginx 所以在性能和稳定性上都没有问题。Kong 作为一款商业软件，在 Nginx 上做了很扩展工作，而且还有很多付费的商业插件。Kong 本身也有付费的企业版，其中包括技术支持、使用培训服务以及 API 分析插件。<br>缺点：如果你使用 Spring Cloud，Kong 如何结合目前已有的服务治理体系？<br><a href="https://docs.konghq.com/gateway-oss/" target="_blank" rel="noopener">kong开源文档</a></p></blockquote><h3 id="4-3-Traefik"><a href="#4-3-Traefik" class="headerlink" title="4.3 Traefik"></a>4.3 <a href="https://github.com/traefik/traefik" target="_blank" rel="noopener">Traefik</a></h3>　Traefik 是一个开源的 GO 语言开发的为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。Traefik 拥有一个基于 AngularJS 编写的简单网站界面，支持 Rest API，配置文件热更新，无需重启进程。高可用集群模式等。<blockquote><p>相对 Spring Cloud 和 Kubernetes 而言，目前比较适合 Kubernetes。 </p></blockquote><h3 id="4-4-Spring-Cloud-Netflix-Zuul"><a href="#4-4-Spring-Cloud-Netflix-Zuul" class="headerlink" title="4.4 Spring Cloud Netflix Zuul"></a>4.4 <a href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.9.RELEASE/reference/html/#router-and-filter-zuul" target="_blank" rel="noopener">Spring Cloud Netflix Zuul</a></h3>Zuul 是从设备和网站到 Netflix 流媒体应用程序后端的所有请求的前门。Zuul 作为边缘服务应用程序，旨在实现动态路由、监控、弹性和安全性。  <blockquote><p>虽然可以通过自定义 Filter 实现我们想要的功能，但是由于 Zuul 本身的设计是基于单线程的接收请求和转发处理，是阻塞 IO，不支持长连接。目前来看 Zuul 就显得很鸡肋，随着 Zuul 2.x 一直跳票（2019 年 5 月发布了 Zuul 2.0 版本），Spring Cloud 推出自己的 Spring Cloud Gateway。  </p></blockquote></li><li>Zuul 1.0架构图<br><img src="zuul1.0.png" alt="Zuul1.0"></li><li>Zuul 2.0架构图<br><img src="zuul2.0.png" alt="Zuul2.0"><h3 id="4-5-Spring-Cloud-Gateway"><a href="#4-5-Spring-Cloud-Gateway" class="headerlink" title="4.5 Spring Cloud Gateway"></a>4.5 <a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/" target="_blank" rel="noopener">Spring Cloud Gateway</a></h3>Spring Cloud Gateway 是基于 Spring 生态系统之上构建的 API 网关，包括：Spring 5，Spring Boot 2 和 Project Reactor。Spring Cloud Gateway 旨在提供一种简单而有效的方法来路由到 API，并为它们提供跨领域的关注点，例如：安全性，监视/指标，限流等。由于 Spring 5.0 支持 Netty，Http2，而 Spring Boot 2.0 支持 Spring 5.0，因此 Spring Cloud Gateway 支持 Netty 和 Http2 顺理成章。<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>API 网关在微服务架构中的一个作用图：<br><img src="%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3.png" alt="微服务网关."><br>目前所学习的网关关注的就是 Aggr API Gateway 这部分，在这里做聚合服务的操作。<h2 id="5-环境准备"><a href="#5-环境准备" class="headerlink" title="5. 环境准备"></a>5. 环境准备</h2></li><li>注册中心<br>  <code>spring-cloud-demo-eureka-server01</code><br>  <code>spring-cloud-demo-eureka-server02</code></li><li>生产者服务<br>   <code>spring-cloud-demo-service-provider01</code> 提供了根据主键查询商品接口 <a href="http://localhost:7071/product/{id}" target="_blank" rel="noopener">http://localhost:7071/product/{id}</a></li><li>消费者服务<br>  <code>spring-cloud-demo-feign-consumer</code> 提供了根据主键查询订单接口 <a href="http://localhost:9091/order/get/{id}" target="_blank" rel="noopener">http://localhost:9091/order/get/{id}</a><h2 id="6-使用Nginx实现网关"><a href="#6-使用Nginx实现网关" class="headerlink" title="6. 使用Nginx实现网关"></a>6. 使用<a href="https://nginx.org/en/" target="_blank" rel="noopener">Nginx</a>实现网关</h2><img src="nginx.png" alt="Nginx"><h3 id="6-1-下载nginx"><a href="#6-1-下载nginx" class="headerlink" title="6.1 下载nginx"></a>6.1 下载nginx</h3><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">下载nginx</a>(根据自己的需要下载对应的版本，这里下载Windows版本)<h3 id="6-2-安装nginx"><a href="#6-2-安装nginx" class="headerlink" title="6.2 安装nginx"></a>6.2 安装nginx</h3>解压文件后直接运行根路径下的 <code>nginx.exe</code> 文件即可。<br>Nginx 默认端口为 80，访问：<a href="http://localhost:80/" target="_blank" rel="noopener">http://localhost:80/</a> 看到下图说明安装成功。<br><img src="nginx01.png" alt="nginx"><h3 id="6-3-配置路由规则"><a href="#6-3-配置路由规则" class="headerlink" title="6.3 配置路由规则"></a>6.3 配置路由规则</h3>进入 Nginx 的 conf 目录，打开 <code>nginx.conf</code> 文件，配置路由规则：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 路由到商品服务</span><br><span class="line">        location /api-product &#123;</span><br><span class="line">            proxy_pass http://localhost:7071/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 路由到订单服务</span><br><span class="line">        location /api-order &#123;</span><br><span class="line">            proxy_pass http://localhost:9091/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-4-访问测试"><a href="#6-4-访问测试" class="headerlink" title="6.4 访问测试"></a>6.4 访问测试</h3><p>之前我们如果要访问服务，必须由客户端指定具体服务地址访问，现在统一访问 Nginx，由 Nginx 实现网关功能将请求路由至具体的服务。<br>访问 <a href="http://localhost/api-order/order/get/1" target="_blank" rel="noopener">http://localhost/api-order/order/get/1</a>,  结果如下：<br><img src="nginx02.png" alt="nginx02"><br>访问 <a href="http://localhost/api-product/product/1" target="_blank" rel="noopener">http://localhost/api-product/product/1</a>,  结果如下：<br><img src="nginx03.png" alt="nginx03">  </p><h2 id="7-使用Zuul实现网关"><a href="#7-使用Zuul实现网关" class="headerlink" title="7. 使用Zuul实现网关"></a>7. 使用Zuul实现网关</h2><p><a href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.9.RELEASE/reference/html/#router-and-filter-zuul" target="_blank" rel="noopener">Spring Cloud Netflix Zuul官方文档</a></p><h3 id="7-1-什么是Zuul"><a href="#7-1-什么是Zuul" class="headerlink" title="7.1 什么是Zuul"></a>7.1 什么是Zuul</h3><p>　　Zuul 是从设备和网站到应用程序后端的所有请求的前门。作为边缘服务应用程序，Zuul 旨在实现动态路由，监视，弹性和安全性。Zuul 包含了对请求的<strong>路由</strong>和<strong>过滤</strong>两个最主要的功能。</p><p>　　Zuul 是 Netflix 开源的微服务网关，它可以和 Eureka、Ribbon、Hystrix 等组件配合使用。Zuul 的核心是一系列的过滤器，这些过滤器可以完成以下功能：  </p><ul><li>身份认证与安全：识别每个资源的验证要求，并拒绝那些与要求不符的请求</li><li>审查与监控：在边缘位置追踪有意义的数据和统计结果，从而带来精确的生产试图</li><li>动态路由：动态地将请求路由到不同的后端集群</li><li>压力测试：逐渐增加只想集群的流量，以了解性能</li><li>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求</li><li>静态响应处理：在边缘位置直接建立部份响应，从而避免其转发到内部集群\</li><li>多区域弹性：跨越AWS Region进行请求路由，旨在实现ELB（Elastic Load Balancing）使用的多样化，以及让系统的边缘更贴近系统的使用者<h3 id="7-2-搭建网关服务"><a href="#7-2-搭建网关服务" class="headerlink" title="7.2 搭建网关服务"></a>7.2 搭建网关服务</h3><h4 id="7-2-1-创建项目"><a href="#7-2-1-创建项目" class="headerlink" title="7.2.1 创建项目"></a>7.2.1 创建项目</h4>创建<a href><code>spring-cloud-demo-zuul-server</code></a>项目<h4 id="7-2-2-添加依赖"><a href="#7-2-2-添加依赖" class="headerlink" title="7.2.2 添加依赖"></a>7.2.2 添加依赖</h4><code>pom.xml</code>添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springcloud.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo-zuul-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring cloud netflix zuul 依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-3-配置文件"><a href="#7-2-3-配置文件" class="headerlink" title="7.2.3 配置文件"></a>7.2.3 配置文件</h4><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span> <span class="comment"># 端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul-server</span> <span class="comment"># 应用名称</span></span><br></pre></td></tr></table></figure><h4 id="7-2-4-启动类"><a href="#7-2-4-启动类" class="headerlink" title="7.2.4 启动类"></a>7.2.4 启动类</h4><p>启动类需要开启 <code>@EnableZuulProxy</code> 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启 Zuul 注解</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-配置路由规则"><a href="#7-3-配置路由规则" class="headerlink" title="7.3 配置路由规则"></a>7.3 配置路由规则</h3><h4 id="7-3-1-URL地址路由"><a href="#7-3-1-URL地址路由" class="headerlink" title="7.3.1 URL地址路由"></a>7.3.1 URL地址路由</h4><p><code>application.yml</code>中配置地址路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product-service:</span> <span class="comment"># 路由 id 自定义</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">http://localhost:7071/</span> <span class="comment"># 映射路径对应的微服务地址</span></span><br><span class="line"><span class="attr">    order-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/order-service/**</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">http://localhost:9091/</span></span><br></pre></td></tr></table></figure><p>通配符含义：</p><table><thead><tr><th>通配符</th><th>含义</th><th>举例</th><th>解释</th></tr></thead><tbody><tr><td>？</td><td>匹配任意单个字符</td><td>/product-service/?</td><td>/product-service/a, /product-service/b, …</td></tr><tr><td>*</td><td>匹配任意数量字符不包括子路径</td><td>/product-service/*</td><td>/product-service/aa, /product-service/bbb, …</td></tr><tr><td>**</td><td>匹配任意数量字符包括所有下级路径</td><td>/product-service/**</td><td>/product-service/aa, /product-service/aaa/b/ccc</td></tr></tbody></table><p>访问测试：<br>访问 <a href="http://localhost:9000/product-service/product/1" target="_blank" rel="noopener">http://localhost:9000/product-service/product/1</a>  结果如下<br><img src="route01.png" alt="URL Route"><br>访问 <a href="http://localhost:9000/order-service/order/get/1" target="_blank" rel="noopener">http://localhost:9000/order-service/order/get/1</a> 结果如下<br><img src="route02.png" alt="URL Route"></p><h4 id="7-3-2-服务名称路由"><a href="#7-3-2-服务名称路由" class="headerlink" title="7.3.2 服务名称路由"></a>7.3.2 服务名称路由</h4><p>微服务一般是由几十、上百个服务组成，对于 URL 地址路由的方式，如果对每个服务实例手动指定一个唯一访问地址，这样做显然是不合理的。<br>Zuul 支持与 Eureka 整合开发，根据 serviceId 自动从注册中心获取服务地址并转发请求，这样做的好处不仅可以通过单个端点来访问应用的所有服务，而且在添加或移除服务实例时不用修改 Zuul 的路由配置。  </p><h5 id="添加Eureka-Client依赖"><a href="#添加Eureka-Client依赖" class="headerlink" title="添加Eureka Client依赖"></a>添加Eureka Client依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- netflix eureka client 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置注册中心和路由规则"><a href="#配置注册中心和路由规则" class="headerlink" title="配置注册中心和路由规则"></a>配置注册中心和路由规则</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product-service:</span>              <span class="comment"># 路由 id 自定义</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-provider</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">    order-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-consumer</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="comment"># 配置 Eureka Server 注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>       <span class="comment"># 是否使用 ip 地址注册</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment"># ip:port</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span>                  <span class="comment"># 设置服务注册中心地址</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://root:123456@localhost:8762/eureka/,http://root:123456@localhost:8763/eureka/</span></span><br></pre></td></tr></table></figure><h5 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启 EurekaClient 注解，目前版本如果配置了 Eureka 注册中心，默认会开启该注解</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">// 开启 Zuul 注解</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h5><p>启动服务之后，注册中心如下：<br><img src="eureka.png" alt="Eureka"><br>访问测试：<br>访问 <a href="http://localhost:9000/product-service/product/1" target="_blank" rel="noopener">http://localhost:9000/product-service/product/1</a>  结果如下<br><img src="route01.png" alt="URL Route"><br>访问 <a href="http://localhost:9000/order-service/order/get/1" target="_blank" rel="noopener">http://localhost:9000/order-service/order/get/1</a> 结果如下<br><img src="route02.png" alt="URL Route"></p><h4 id="7-3-3-简化路由配置"><a href="#7-3-3-简化路由配置" class="headerlink" title="7.3.3 简化路由配置"></a>7.3.3 简化路由配置</h4><p>Zuul 为了方便大家使用，提供了默认路由配置：路由 id 和 微服务名称 一致，path 默认对应 /微服务名称/**，所以以下配置就没必要再写了。</p><h5 id="注释路由配置"><a href="#注释路由配置" class="headerlink" title="注释路由配置"></a>注释路由配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    product-service:              # 路由 id 自定义</span></span><br><span class="line"><span class="comment">#      path: /product-service/**   # 配置请求 url 的映射路径</span></span><br><span class="line"><span class="comment">#      serviceId: service-provider  # 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="comment">#    order-service:</span></span><br><span class="line"><span class="comment">#      path: /order-service/**   # 配置请求 url 的映射路径</span></span><br><span class="line"><span class="comment">#      serviceId: service-consumer  # 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br></pre></td></tr></table></figure><h5 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h5><p><a href="http://localhost:9000/service-provider/product/1" target="_blank" rel="noopener">http://localhost:9000/service-provider/product/1</a><br><img src="reoute03.png" alt="Reoute"><br><a href="http://localhost:9000/service-consumer/order/get/1" target="_blank" rel="noopener">http://localhost:9000/service-consumer/order/get/1</a><br><img src="reoute04.png" alt="Reoute"></p><h3 id="7-4-路由排除"><a href="#7-4-路由排除" class="headerlink" title="7.4 路由排除"></a>7.4 路由排除</h3><p>我们可以通过路由排除设置不允许被访问的资源。允许被访问的资源可以通过路由规则进行设置。</p><h4 id="7-4-1-URL-地址排除"><a href="#7-4-1-URL-地址排除" class="headerlink" title="7.4.1 URL 地址排除"></a>7.4.1 URL 地址排除</h4><p><code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product-service:</span> <span class="comment"># 路由 id 自定义</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">http://localhost:7071/</span> <span class="comment"># 映射路径对应的微服务地址</span></span><br><span class="line"><span class="attr">    order-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/order-service/**</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">http://localhost:9091/</span></span><br><span class="line"><span class="attr">  ignored-patterns:</span> <span class="string">/**/order/**</span></span><br></pre></td></tr></table></figure><h4 id="7-4-2-服务名称排除"><a href="#7-4-2-服务名称排除" class="headerlink" title="7.4.2 服务名称排除"></a>7.4.2 服务名称排除</h4><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product-service:</span>              <span class="comment"># 路由 id 自定义</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-provider</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">    order-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/order-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-consumer</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">service-consumer</span></span><br></pre></td></tr></table></figure><h3 id="7-5-路由前缀"><a href="#7-5-路由前缀" class="headerlink" title="7.5 路由前缀"></a>7.5 路由前缀</h3><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span>  <span class="comment"># 路由前缀</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:9000/api/service-provider/product/1" target="_blank" rel="noopener">http://localhost:9000/api/service-provider/product/1</a> 测试，结果如下：<br><img src="reoute05.png" alt="Reoute"></p><h2 id="8-网关过滤器"><a href="#8-网关过滤器" class="headerlink" title="8. 网关过滤器"></a>8. 网关过滤器</h2><p><img src="Zuul_Filter.png" alt="Zuul Filter"><br>Zuul 包含了对请求的路由和过滤两个核心功能，其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础；而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。然而实际上，路由功能在真正运行时，它的路由映射和请求转发都是由几个不同的过滤器完成的。<br>路由映射主要通过 pre 类型的过滤器完成，它将请求路径与配置的路由规则进行匹配，以找到需要转发的目标地址；而请求转发的部分则是由 routing 类型的过滤器来完成，对 pre 类型过滤器获得的路由地址进行转发。所以说，过滤器可以说是 Zuul 实现 API 网关功能最核心的部件，每一个进入 Zuul 的 http 请求都会经过一系列的过滤器处理链得到请求响应并返回给客户端。</p><h3 id="8-1-过滤器概述"><a href="#8-1-过滤器概述" class="headerlink" title="8.1 过滤器概述"></a>8.1 过滤器概述</h3><p>Zuul 的中心是一系列过滤器，能够在 HTTP 请求和响应的路由过程中执行一系列操作。<br>以下是 Zuul 过滤器的主要特征：  </p><ul><li><strong>类型</strong>：定义路由流程中应用过滤器的阶段。共 <code>pre、routing、post、error</code>4 个类型。  </li><li><strong>执行顺序</strong>： 在同类型中，定义过滤器执行的顺序。比如多个 pre 类型的执行顺序。  </li><li><strong>标准</strong>：执行过滤器所需的条件。true 开启，false 关闭。  </li><li><strong>行动</strong>：如果符合条件，将执行的动作。具体操作。<h3 id="8-2-过滤器类型"><a href="#8-2-过滤器类型" class="headerlink" title="8.2 过滤器类型"></a>8.2 过滤器类型</h3>PRE：请求被路由到源服务器之前执行的过滤器  </li><li>身份认证  </li><li>选路由  </li><li>请求日志</li></ul><p>ROUTING：处理将请求发送到源服务器的过滤器<br>POST：响应从源服务器返回时执行的过滤器</p><ul><li>对响应增加 HTTP 头</li><li>收集统计和度量指标</li><li>将响应以流的方式发送回客户端  </li></ul><p>ERROR：上述阶段中出现错误时执行的过滤器</p><h3 id="8-3-创建过滤器"><a href="#8-3-创建过滤器" class="headerlink" title="8.3 创建过滤器"></a>8.3 创建过滤器</h3><p>Spring Cloud Netflix Zuul 中实现过滤器必须包含 4 个基本特征：过滤器类型，执行顺序，执行条件，动作（具体操作）。这些步骤都是 ZuulFilter 接口中定义的 4 个抽象方法:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网关过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PRE"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行顺序</span></span><br><span class="line"><span class="comment">     *      数值越小，优先级越高</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行条件</span></span><br><span class="line"><span class="comment">     *      true 开启</span></span><br><span class="line"><span class="comment">     *      false 关闭</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动作（具体操作）</span></span><br><span class="line"><span class="comment">     *      具体逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求上下文</span></span><br><span class="line">        RequestContext rc = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = rc.getRequest();</span><br><span class="line">        log.info(<span class="string">"CustomFilter...method=&#123;&#125;, url=&#123;&#125;"</span>,</span><br><span class="line">                request.getMethod(),</span><br><span class="line">                request.getRequestURL().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问测试</strong><br>访问 <a href="http://localhost:9000/api/product-service/product/1" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1</a> 控制台输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-10-09 21:23:43.031  INFO 10624 --- [nio-9000-exec-2] c.springcloud.demo.filter.CustomFilter   : CustomFilter...method=GET, url=http://localhost:9000/api/product-service/product/1</span><br></pre></td></tr></table></figure><h3 id="8-4-统一鉴权"><a href="#8-4-统一鉴权" class="headerlink" title="8.4 统一鉴权"></a>8.4 统一鉴权</h3><p>接下来我们在网关过滤器中通过 token 判断用户是否登录，完成一个统一鉴权案例。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限验证过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AccessFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求上下文</span></span><br><span class="line">        RequestContext rc = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = rc.getRequest();</span><br><span class="line">        <span class="comment">// 获取表单中的 token</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="comment">// 业务逻辑处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == token) &#123;</span><br><span class="line">            logger.warn(<span class="string">"token is null..."</span>);</span><br><span class="line">            <span class="comment">// 请求结束，不在继续向下请求。</span></span><br><span class="line">            rc.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 响应状态码，HTTP 401 错误代表用户没有访问权限</span></span><br><span class="line">            rc.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            <span class="comment">// 响应类型</span></span><br><span class="line">            rc.getResponse().setContentType(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">            PrintWriter writer = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer = rc.getResponse().getWriter();</span><br><span class="line">                <span class="comment">// 响应内容</span></span><br><span class="line">                writer.print(<span class="string">"&#123;\"message\":\""</span> + HttpStatus.UNAUTHORIZED.getReasonPhrase() + <span class="string">"\"&#125;"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != writer)</span><br><span class="line">                    writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 使用 token 进行身份验证</span></span><br><span class="line">            logger.info(<span class="string">"token is OK!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问测试</strong><br>访问 <a href="http://localhost:9000/api/product-service/product/1" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1</a>, 结果如下：<br><img src="%E7%BB%9F%E4%B8%80%E9%89%B4%E6%9D%83.png" alt="统一鉴权"><br>访问 <a href="http://localhost:9000/api/product-service/product/1?token=123" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1?token=123</a> ，结果如下：<br><img src="%E7%BB%9F%E4%B8%80%E9%89%B4%E6%9D%8301.png" alt="统一鉴权">  </p><h2 id="9-Zuul的生命周期"><a href="#9-Zuul的生命周期" class="headerlink" title="9. Zuul的生命周期"></a>9. Zuul的生命周期</h2><p><img src="zuul%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="zuul生命周期">  </p><ol><li>HTTP 发送请求到 Zuul 网关  </li><li>Zuul 网关首先经过 pre filter</li><li>验证通过后进入 routing filter，接着将请求转发给远程服务，远程服务执行完返回结果，如果出错，则执行 error filter</li><li>继续往下执行 post filter</li><li>最后返回响应给 HTTP 客户端</li></ol><h2 id="10-网关过滤器异常统一处理"><a href="#10-网关过滤器异常统一处理" class="headerlink" title="10. 网关过滤器异常统一处理"></a>10. 网关过滤器异常统一处理</h2><h3 id="10-1-创建异常过滤器"><a href="#10-1-创建异常过滤器" class="headerlink" title="10.1 创建异常过滤器"></a>10.1 创建异常过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext rc = RequestContext.getCurrentContext();</span><br><span class="line">        Throwable throwable = rc.getThrowable();</span><br><span class="line">        log.error(<span class="string">"ErrorFilter..."</span> + throwable.getCause().getMessage(), throwable);</span><br><span class="line">        <span class="comment">// 响应状态码，HTTP 500 服务器错误</span></span><br><span class="line">        rc.setResponseStatusCode(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        <span class="comment">// 响应类型</span></span><br><span class="line">        rc.getResponse().setContentType(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">        PrintWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = rc.getResponse().getWriter();</span><br><span class="line">            <span class="comment">// 响应内容</span></span><br><span class="line">            writer.print(<span class="string">"&#123;\"message\":\""</span> + HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase() + <span class="string">"\"&#125;"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != writer)</span><br><span class="line">                writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2-模拟异常"><a href="#10-2-模拟异常" class="headerlink" title="10.2 模拟异常"></a>10.2 模拟异常</h3><p>在 pre 过滤器中添加模拟异常代码。<br><img src="%E6%A8%A1%E6%8B%9F%E5%BC%82%E5%B8%B8.png" alt="模拟异常"></p><h3 id="10-3-禁用默认的异常处理器"><a href="#10-3-禁用默认的异常处理器" class="headerlink" title="10.3 禁用默认的异常处理器"></a>10.3 禁用默认的异常处理器</h3><p>禁用 Zuul 默认的异常处理 filter：<code>SendErrorFilter</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment"># 禁用 Zuul 默认的异常处理 filter</span></span><br><span class="line"><span class="attr">  SendErrorFilter:</span></span><br><span class="line"><span class="attr">    error:</span></span><br><span class="line"><span class="attr">      disable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="10-4-访问测试"><a href="#10-4-访问测试" class="headerlink" title="10.4 访问测试"></a>10.4 访问测试</h3><p>访问<a href="http://localhost:9000/api/product-service/product/1?token=123" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1?token=123</a><br>结果如下<br><img src="%E6%A8%A1%E6%8B%9F%E5%BC%82%E5%B8%B8%E7%BB%93%E6%9E%9C.png" alt="模拟异常结果"></p><h2 id="11-Zuul-和-Hystrix-无缝结合"><a href="#11-Zuul-和-Hystrix-无缝结合" class="headerlink" title="11. Zuul 和 Hystrix 无缝结合"></a>11. Zuul 和 Hystrix 无缝结合</h2><p>在 Spring Cloud 中，Zuul 启动器中包含了 Hystrix 相关依赖，在 Zuul 网关工程中，默认是提供了 Hystrix Dashboard 服务监控数据的(hystrix.stream)，但是不会提供监控面板的界面展示。在 Spring Cloud 中，Zuul 和 Hystrix 是无缝结合的，我们可以非常方便的实现网关容错处理。</p><h3 id="11-1-网关监控"><a href="#11-1-网关监控" class="headerlink" title="11.1 网关监控"></a>11.1 网关监控</h3><p>Zuul 的依赖中包含了 Hystrix 的相关 jar 包，所以我们不需要在项目中额外添加 Hystrix 的依赖。<br>但是需要开启数据监控的项目中要添加 dashboard 依赖。</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 度量指标监控与健康检查</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">hystrix.stream</span></span><br></pre></td></tr></table></figure><h4 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启数据监控注解</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="comment">// 开启 EurekaClient 注解，目前版本如果配置了 Eureka 注册中心，默认会开启该注解</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">// 开启 Zuul 注解</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问并查看数据"><a href="#访问并查看数据" class="headerlink" title="访问并查看数据"></a>访问并查看数据</h4><p>访问：<a href="http://localhost:9000/hystrix" target="_blank" rel="noopener">http://localhost:9000/hystrix</a> 监控中心界面如下：<br><img src="hystrix_dashboard.png" alt="hystrix dashboard"></p><p>请求多次<a href="http://localhost:9000/api/product-service/product/1?token=123，结果如下" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1?token=123，结果如下</a><br><img src="hystrix_dashboard_01.png" alt="hystrix_dashboard_01">  </p><h3 id="11-2-网关熔断"><a href="#11-2-网关熔断" class="headerlink" title="11.2 网关熔断"></a>11.2 网关熔断</h3><p>在 Edgware 版本之前，Zuul 提供了接口 ZuulFallbackProvider 用于实现 fallback 处理。从 Edgware 版本开始，Zuul 提供了接口 FallbackProvider 来提供 fallback 处理。<br>　　Zuul 的 fallback 容错处理逻辑，只针对 timeout 异常处理，当请求被 Zuul 路由后，只要服务有返回（包括异常），都不会触发 Zuul 的 fallback 容错逻辑。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对商品服务做服务容错处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductProviderFallback</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * return - 返回 fallback 处理哪一个服务。返回的是服务的名称。</span></span><br><span class="line"><span class="comment">     * 推荐 - 为指定的服务定义特性化的 fallback 逻辑。</span></span><br><span class="line"><span class="comment">     * 推荐 - 提供一个处理所有服务的 fallback 逻辑。</span></span><br><span class="line"><span class="comment">     * 好处 - 某个服务发生超时，那么指定的 fallback 逻辑执行。如果有新服务上线，未提供 fallback 逻辑，有一个通用的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"service-provider"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对商品服务做服务容错处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> route 容错服务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 服务异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 设置响应的头信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders header = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                header.setContentType(<span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"json"</span>, Charset.forName(<span class="string">"utf-8"</span>)));</span><br><span class="line">                <span class="keyword">return</span> header;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 设置响应体</span></span><br><span class="line"><span class="comment">             * Zuul 会将本方法返回的输入流数据读取，并通过 HttpServletResponse 的输出流输出到客户端。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(<span class="string">"&#123;\"message\":\"商品服务不可用，请稍后再试。\"&#125;"</span>.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * ClientHttpResponse 的 fallback 的状态码 返回 HttpStatus</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * ClientHttpResponse 的 fallback 的状态码 返回 int</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getStatusCode().value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * ClientHttpResponse 的 fallback 的状态码 返回 String</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getStatusCode().getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 回收资源方法</span></span><br><span class="line"><span class="comment">             * 用于回收当前 fallback 逻辑开启的资源对象。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问测试-2"><a href="#访问测试-2" class="headerlink" title="访问测试"></a>访问测试</h4><p>访问 <a href="http://localhost:9000/api/product-service/product/1?token=123" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1?token=123</a> 结果如下：<br><img src="%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD.png" alt="服务熔断"></p><h3 id="11-3-网关限流"><a href="#11-3-网关限流" class="headerlink" title="11.3 网关限流"></a>11.3 网关限流</h3><p>顾名思义，限流就是限制流量，就像你宽带包有 1 个 G 的流量，用完了就没了。通过限流，我们可以很好地控制系统的 QPS，从而达到保护系统的目的。Zuul 网关组件也提供了限流保护。当请求并发达到阀值，自动触发限流保护，返回错误结果。只要提供 error 错误处理机制即可。</p><h4 id="为什么需要限流"><a href="#为什么需要限流" class="headerlink" title="为什么需要限流"></a>为什么需要限流</h4><p>比如 Web 服务、对外 API，这种类型的服务有以下几种可能导致机器被拖垮：</p><ul><li>用户增长过快（好事）</li><li>因为某个热点事件（微博热搜）</li><li>竞争对象爬虫</li><li>恶意的请求</li></ul><p>这些情况都是无法预知的，不知道什么时候会有 10 倍甚至 20 倍的流量打进来，如果真碰上这种情况，扩容是根本来不及的。<br><img src="%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81.png" alt="服务限流"><br>从上图可以看出，对内而言：上游的 A、B 服务直接依赖了下游的基础服务 C，对于 A，B 服务都依赖的基础服务 C 这种场景，服务 A 和 B 其实处于某种竞争关系，如果服务 A 的并发阈值设置过大，当流量高峰期来临，有可能直接拖垮基础服务 C 并影响服务 B，即<strong>雪崩效应</strong>。</p><h4 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h4><p>常见的限流算法有：</p><ul><li>计数器算法</li><li>漏桶（Leaky Bucket）算法</li><li>令牌桶（Token Bucket）算法</li></ul><h5 id="计数器算法"><a href="#计数器算法" class="headerlink" title="计数器算法"></a>计数器算法</h5><p>计数器算法是限流算法里最简单也是最容易实现的一种算法。比如我们规定，对于 A 接口来说，我们 1 分钟的访问次数不能超过 100 个。那么我们可以这么做：在一开始的时候，我们可以设置一个计数器 counter，每当一个请求过来的时候，counter 就加 1，如果 counter 的值大于 100 并且该请求与第一个请求的间隔时间还在 1 分钟之内，触发限流；如果该请求与第一个请求的间隔时间大于 1 分钟，重置 counter 重新计数，具体算法的示意图如下：<br><img src="%E8%AE%A1%E6%95%B0%E5%99%A8%E7%AE%97%E6%B3%9501.jpg" alt="计数器算法"><br>这个算法虽然简单，但是有一个十分致命的问题，那就是临界问题，我们看下图：<br><img src="%E8%AE%A1%E6%95%B0%E5%99%A8%E7%AE%97%E6%B3%9502.jpg" alt="计数器算法"><br>从上图中我们可以看到，假设有一个恶意用户，他在 0:59 时，瞬间发送了 100 个请求，并且 1:00 又瞬间发送了 100 个请求，那么其实这个用户在 1 秒里面，瞬间发送了 200 个请求。我们刚才规定的是 1 分钟最多 100 个请求，也就是每秒钟最多 1.7 个请求，用户通过在时间窗口的重置节点处突发请求， 可以瞬间超过我们的速率限制。用户有可能通过算法的这个漏洞，瞬间压垮我们的应用。<br>还有资料浪费的问题存在，我们的预期想法是希望 100 个请求可以均匀分散在这一分钟内，假设 30s 以内我们就请求上限了，那么剩余的半分钟服务器就会处于闲置状态，比如下图：<br><img src="%E8%AE%A1%E6%95%B0%E5%99%A8%E7%AE%97%E6%B3%9503.jpg" alt="计数器算法">  </p><h5 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h5><p>漏桶算法其实也很简单，可以粗略的认为就是注水漏水的过程，往桶中以任意速率流入水，以一定速率流出水，当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。<br><img src="%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%9501.jpg" alt="漏桶算法"><br>漏桶算法是使用队列机制实现的。<br><img src="%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%9502.jpg" alt="漏桶算法"><br>漏桶算法主要用途在于保护它人（服务），假设入水量很大，而出水量较慢，则会造成网关的资源堆积可能导致网关瘫痪。而目标服务可能是可以处理大量请求的，但是漏桶算法出水量缓慢反而造成服务那边的资源浪费。<br>漏桶算法无法应对突发调用。不管上面流量多大，下面流出的速度始终保持不变。因为处理的速度是固定的，请求进来的速度是未知的，可能突然进来很多请求，没来得及处理的请求就先放在桶里，既然是个桶，肯定是有容量上限，如果桶满了，那么新进来的请求就会丢弃。</p><h5 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h5><p>令牌桶算法是对漏桶算法的一种改进，漏桶算法能够限制请求调用的速率，而令牌桶算法能够在限制调用的平均速率的同时还允许一定程度的突发调用。在令牌桶算法中，存在一个桶，用来存放固定数量的令牌。算法中存在一种机制，以一定的速率往桶中放令牌。每次<strong>请求调用需要先获取令牌</strong>，只有<strong>拿到令牌</strong>，才有机会<strong>继续执行</strong>，否则选择选择等待可用的令牌、或者直接拒绝。放令牌这个动作是持续不断的进行，如果桶中令牌数达到上限，就丢弃令牌。</p><blockquote><p>场景大概是这样的：桶中一直有大量的可用令牌，这时进来的请求可以直接拿到令牌执行，比如设置 QPS 为 100/s，那么限流器初始化完成一秒后，桶中就已经有 100 个令牌了，等服务启动完成对外提供服务时，该限流器可以抵挡瞬时的 100 个请求。当桶中没有令牌时，请求会进行等待，最后相当于以一定的速率执行。<br>Zuul 内部使用 Ratelimit 组件实现限流，使用的就是该算法，大概描述如下：  </p></blockquote><ul><li>所有的请求在处理之前都需要拿到一个可用的令牌才会被处理；</li><li>根据限流大小，设置按照一定的速率往桶里添加令牌；</li><li>桶设置最大的放置令牌限制，当桶满时、新添加的令牌就被丢弃或者拒绝；</li><li>请求到达后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理完业务逻辑之后，将令牌直接删除；</li><li>令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除令牌，以此保证足够的限流。<br><img src="%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95.png" alt="令牌桶算法"><br>漏桶算法主要用途在于保护它人，而令牌桶算法主要目的在于保护自己，将请求压力交由目标服务处理。假设突然进来很多请求，只要拿到令牌这些请求会瞬时被处理调用目标服务。 <h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4>Zuul 的限流保护需要额外依赖 <code>spring-cloud-zuul-ratelimit</code> 组件，限流数据采用 <code>Redis</code> 存储所以还要添加 <code>Redis</code> 组件。<br><a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit" target="_blank" rel="noopener">RateLimit 官网文档</a>  </li></ul><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud zuul ratelimit 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.marcosbarbero.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-zuul-ratelimit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring boot data redis 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- commons-pool2 对象池依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="全局限流配置"><a href="#全局限流配置" class="headerlink" title="全局限流配置"></a>全局限流配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span> <span class="comment"># 端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul-server</span> <span class="comment"># 应用名称</span></span><br><span class="line">  <span class="comment"># redis 缓存</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">10000</span>        <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">120.27</span><span class="number">.212</span><span class="number">.13</span>  <span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span>            <span class="comment"># Redis服务器端口</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span>        <span class="comment"># Redis服务器密码</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span>           <span class="comment"># 选择哪个库，默认0库</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">1024</span>  <span class="comment"># 最大连接数，默认 8</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="number">10000</span>   <span class="comment"># 最大连接阻塞等待时间，单位毫秒，默认 -1</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">200</span>     <span class="comment"># 最大空闲连接，默认 8</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">5</span>       <span class="comment"># 最小空闲连接，默认 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    product-service: # 路由 id 自定义</span></span><br><span class="line"><span class="comment">#      path: /product-service/**   # 配置请求 url 的映射路径</span></span><br><span class="line"><span class="comment">#      url: http://localhost:7071/ # 映射路径对应的微服务地址</span></span><br><span class="line"><span class="comment">#    order-service:</span></span><br><span class="line"><span class="comment">#      path: /order-service/**</span></span><br><span class="line"><span class="comment">#      url: http://localhost:9091/</span></span><br><span class="line"><span class="comment">#  ignored-patterns: /**/order/**</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span>  <span class="comment"># 路由前缀</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product-service:</span>              <span class="comment"># 路由 id 自定义</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-provider</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">    order-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/order-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-consumer</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">service-consumer</span></span><br><span class="line">  <span class="comment"># 禁用 Zuul 默认的异常处理 filter</span></span><br><span class="line"><span class="comment">#  SendErrorFilter:</span></span><br><span class="line"><span class="comment">#    error:</span></span><br><span class="line"><span class="comment">#      disable: true</span></span><br><span class="line">  <span class="comment"># 服务限流</span></span><br><span class="line"><span class="attr">  ratelimit:</span></span><br><span class="line">    <span class="comment"># 开启限流保护</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 限流数据存储方式</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="string">REDIS</span></span><br><span class="line">    <span class="comment"># default-policy-list 默认配置，全局生效</span></span><br><span class="line"><span class="attr">    default-policy-list:</span></span><br><span class="line"><span class="attr">      - limit:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">        refresh-interval:</span> <span class="number">60</span>    <span class="comment"># 60s 内请求超过 3 次，服务端就抛出异常，60s 后可以恢复正常请求</span></span><br><span class="line"><span class="attr">        type:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">origin</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">url</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">user</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Eureka Server 注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>       <span class="comment"># 是否使用 ip 地址注册</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment"># ip:port</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span>                  <span class="comment"># 设置服务注册中心地址</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://root:123456@localhost:8762/eureka/,http://root:123456@localhost:8763/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 度量指标监控与健康检查</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  health:</span></span><br><span class="line"><span class="attr">    redis:</span>  <span class="comment"># 系统使用spring-boot-starter-actuator这个依赖后, SpringBoot会默认去监测一些信息。其中就包括redis、 会根据redis的默认初始配置， localhost:6379 尝试连接redis。</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">hystrix.stream</span></span><br><span class="line"><span class="comment"># hystrix</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  dashboard:</span></span><br><span class="line"><span class="attr">    proxy-stream-allow-list:</span> <span class="string">"localhost"</span></span><br></pre></td></tr></table></figure><p>Zuul-RateLimiter 基本配置项：</p><table><thead><tr><th>配置项</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>enabled</td><td>true/false</td><td>是否启用限流</td></tr><tr><td>repository</td><td>REDIS: 基于Redis，使用时必须引入Redis相关依赖 CONSUL: 基于Consul JPA: 基于SpringDataJPA，需要用到数据库 使用Java编写的基于令牌桶算法的限流库：  BUCKET4J_JCACHE BUCKET4J_HAZELCAST BUCKET4J_IGNITE BUCKET4J_INFINISPAN</td><td>限流数据的存储方式，无默认值必填项</td></tr><tr><td>key-prefix</td><td>String</td><td>限流 key 前缀</td></tr><tr><td>default-policy-list</td><td>List of Policy</td><td>默认策略</td></tr><tr><td>policy-list</td><td>Map of Lists of Policy</td><td>自定义策略</td></tr><tr><td>post-filter-order</td><td>-</td><td>postFilter 过滤顺序</td></tr><tr><td>pre-filter-order</td><td>-</td><td>preFilter 过滤顺序</td></tr></tbody></table><blockquote><p>Bucket4j 实现需要相关的 bean @Qualifier(“RateLimit”):<br>JCache - javax.cache.Cache<br>Hazelcast - com.hazelcast.core.IMap<br>Ignite - org.apache.ignite.IgniteCache<br>Infinispan - org.infinispan.functional.ReadWriteMap</p></blockquote><p>Policy 限流策略配置项说明：</p><table><thead><tr><th>项</th><th>说明</th></tr></thead><tbody><tr><td>limit</td><td>单位时间内请求次数限制</td></tr><tr><td>quota</td><td>单位时间内累计请求时间限制（秒），非必要参数</td></tr><tr><td>refresh-interval</td><td>单位时间（秒），默认 60 秒</td></tr><tr><td>type</td><td>限流方式：<br>ORGIN: 访问IP限流  <br>URL: 访问URL限流  <br>USER: 特定用户或用户组限流（比如：非会员用户限制每分钟只允许下载一个文件）  <br>URL_PATTERN  <br>ROLE  <br>HTTP_METHOD</td></tr></tbody></table><p>访问测试 <a href="http://localhost:9000/api/product-service/product/1?token=123" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1?token=123</a><br>结果如下<br><img src="Zuul%E9%99%90%E6%B5%81.png" alt="zuul限流"><br>查看redis<br><img src="redis.png" alt="redis">  </p><h4 id="局部限流配置"><a href="#局部限流配置" class="headerlink" title="局部限流配置"></a>局部限流配置</h4><p>使用局部限流配置，Zuul 仅针对配置的服务提供限流保护。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span>  <span class="comment"># 路由前缀</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product-service:</span>              <span class="comment"># 路由 id 自定义</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-provider</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">    order-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/order-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-consumer</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">service-consumer</span></span><br><span class="line">  <span class="comment"># 禁用 Zuul 默认的异常处理 filter</span></span><br><span class="line"><span class="comment">#  SendErrorFilter:</span></span><br><span class="line"><span class="comment">#    error:</span></span><br><span class="line"><span class="comment">#      disable: true</span></span><br><span class="line">  <span class="comment"># 服务限流</span></span><br><span class="line"><span class="attr">  ratelimit:</span></span><br><span class="line">    <span class="comment"># 开启限流保护</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 限流数据存储方式</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="string">REDIS</span></span><br><span class="line">    <span class="comment"># default-policy-list 默认配置，全局生效</span></span><br><span class="line"><span class="comment">#    default-policy-list:</span></span><br><span class="line"><span class="comment">#      - limit: 3</span></span><br><span class="line"><span class="comment">#        refresh-interval: 60    # 60s 内请求超过 3 次，服务端就抛出异常，60s 后可以恢复正常请求</span></span><br><span class="line"><span class="comment">#        type:</span></span><br><span class="line"><span class="comment">#          - origin</span></span><br><span class="line"><span class="comment">#          - url</span></span><br><span class="line"><span class="comment">#          - user</span></span><br><span class="line">    <span class="comment"># policy-list 自定义配置，局部生效</span></span><br><span class="line"><span class="attr">    policy-list:</span></span><br><span class="line">      <span class="comment"># 指定需要被限流的服务名称</span></span><br><span class="line"><span class="attr">      order-service:</span></span><br><span class="line"><span class="attr">        - limit:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          refresh-interval:</span> <span class="number">60</span>  <span class="comment"># 60s 内请求超过 5 次，服务端就抛出异常，60s 后可以恢复正常请求</span></span><br><span class="line"><span class="attr">          type:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">origin</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">url</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">user</span></span><br></pre></td></tr></table></figure><p>连续多次访问<a href="http://localhost:9000/api/order-service/order/get/1?token=123，结果如下：" target="_blank" rel="noopener">http://localhost:9000/api/order-service/order/get/1?token=123，结果如下：</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ErrorFilter...com.netflix.zuul.exception.ZuulException: 429 <span class="title">TOO_MANY_REQUESTS</span></span></span><br></pre></td></tr></table></figure><p>查看Redis<br><img src="redis01.png" alt="redis"></p><p>连续多次访问 <a href="http://localhost:9000/api/product-service/product/1?token=123" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1?token=123</a> ，结果正常。</p><h4 id="自定义限流配置"><a href="#自定义限流配置" class="headerlink" title="自定义限流配置"></a>自定义限流配置</h4><p>如果希望自己控制限流策略，可以通过自定义 RateLimitKeyGenerator 的实现来增加自己的策略逻辑。<br>修改商品服务控制层代码如下，添加 <code>/product/single</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据主键查询商品</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/single"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Product <span class="title">selectProductSingle</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> productService.selectProductById(id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>自定义限流策略类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo.ratelimit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.config.RateLimitUtils;</span><br><span class="line"><span class="keyword">import</span> com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.config.properties.RateLimitProperties;</span><br><span class="line"><span class="keyword">import</span> com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.support.DefaultRateLimitKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.Route;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义限流策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitKeyGenerator</span> <span class="keyword">extends</span> <span class="title">DefaultRateLimitKeyGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RateLimitKeyGenerator</span><span class="params">(RateLimitProperties properties, RateLimitUtils rateLimitUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(properties, rateLimitUtils);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> route</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> policy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">key</span><span class="params">(HttpServletRequest request, Route route, RateLimitProperties.Policy policy)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对请求参数中相同的 id 值进行限流</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.key(request, route, policy) + <span class="string">":"</span> + request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span> <span class="comment"># 端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul-server</span> <span class="comment"># 应用名称</span></span><br><span class="line">  <span class="comment"># redis 缓存</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">10000</span>        <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">120.27</span><span class="number">.212</span><span class="number">.13</span>  <span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span>            <span class="comment"># Redis服务器端口</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span>        <span class="comment"># Redis服务器密码</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span>           <span class="comment"># 选择哪个库，默认0库</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">1024</span>  <span class="comment"># 最大连接数，默认 8</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="number">10000</span>   <span class="comment"># 最大连接阻塞等待时间，单位毫秒，默认 -1</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">200</span>     <span class="comment"># 最大空闲连接，默认 8</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">5</span>       <span class="comment"># 最小空闲连接，默认 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="comment">#zuul:</span></span><br><span class="line"><span class="comment">#  routes:</span></span><br><span class="line"><span class="comment">#    product-service: # 路由 id 自定义</span></span><br><span class="line"><span class="comment">#      path: /product-service/**   # 配置请求 url 的映射路径</span></span><br><span class="line"><span class="comment">#      url: http://localhost:7071/ # 映射路径对应的微服务地址</span></span><br><span class="line"><span class="comment">#    order-service:</span></span><br><span class="line"><span class="comment">#      path: /order-service/**</span></span><br><span class="line"><span class="comment">#      url: http://localhost:9091/</span></span><br><span class="line"><span class="comment">#  ignored-patterns: /**/order/**</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span>  <span class="comment"># 路由前缀</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product-service:</span>              <span class="comment"># 路由 id 自定义</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-provider</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">    order-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/order-service/**</span>   <span class="comment"># 配置请求 url 的映射路径</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">service-consumer</span>  <span class="comment"># 根据 serviceId 自动从注册中心获取服务地址并转发请求</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">service-consumer</span></span><br><span class="line">  <span class="comment"># 禁用 Zuul 默认的异常处理 filter</span></span><br><span class="line"><span class="comment">#  SendErrorFilter:</span></span><br><span class="line"><span class="comment">#    error:</span></span><br><span class="line"><span class="comment">#      disable: true</span></span><br><span class="line">  <span class="comment"># 服务限流</span></span><br><span class="line"><span class="attr">  ratelimit:</span></span><br><span class="line">    <span class="comment"># 开启限流保护</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 限流数据存储方式</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="string">REDIS</span></span><br><span class="line">    <span class="comment"># default-policy-list 默认配置，全局生效</span></span><br><span class="line"><span class="attr">    default-policy-list:</span></span><br><span class="line"><span class="attr">      - limit:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">        refresh-interval:</span> <span class="number">60</span>    <span class="comment"># 60s 内请求超过 3 次，服务端就抛出异常，60s 后可以恢复正常请求</span></span><br><span class="line"><span class="attr">        type:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">origin</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">url</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">user</span></span><br><span class="line">    <span class="comment"># policy-list 自定义配置，局部生效</span></span><br><span class="line"><span class="comment">#    policy-list:</span></span><br><span class="line"><span class="comment">#      # 指定需要被限流的服务名称</span></span><br><span class="line"><span class="comment">#      order-service:</span></span><br><span class="line"><span class="comment">#        - limit: 5</span></span><br><span class="line"><span class="comment">#          refresh-interval: 60  # 60s 内请求超过 5 次，服务端就抛出异常，60s 后可以恢复正常请求</span></span><br><span class="line"><span class="comment">#          type:</span></span><br><span class="line"><span class="comment">#            - origin</span></span><br><span class="line"><span class="comment">#            - url</span></span><br><span class="line"><span class="comment">#            - user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Eureka Server 注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>       <span class="comment"># 是否使用 ip 地址注册</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment"># ip:port</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span>                  <span class="comment"># 设置服务注册中心地址</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://root:123456@localhost:8762/eureka/,http://root:123456@localhost:8763/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 度量指标监控与健康检查</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  health:</span></span><br><span class="line"><span class="attr">    redis:</span>  <span class="comment"># 系统使用spring-boot-starter-actuator这个依赖后, SpringBoot会默认去监测一些信息。其中就包括redis、 会根据redis的默认初始配置， localhost:6379 尝试连接redis。</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">hystrix.stream</span></span><br><span class="line"><span class="comment"># hystrix</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  dashboard:</span></span><br><span class="line"><span class="attr">    proxy-stream-allow-list:</span> <span class="string">"localhost"</span></span><br></pre></td></tr></table></figure><p>多次访问：<a href="http://localhost:9000/api/product-service/product/single/?token=123&amp;id=1" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/single/?token=123&amp;id=1</a> 被限流后，马上更换 id=2 重新访问发现服务任然可用，再继续多次访问，发现更换过的 id=2 也被限流了。</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>配置 <code>error</code> 类型的网关过滤器进行处理即可。修改之前的 <code>ErrorFilter</code> 让其变的通用。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.util.ZuulRuntimeException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext rc = RequestContext.getCurrentContext();</span><br><span class="line">        Throwable throwable = rc.getThrowable();</span><br><span class="line"></span><br><span class="line">        ZuulException zuulException = <span class="keyword">this</span>.findZuulException(throwable);</span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">"ErrorFilter..."</span> + throwable.getCause().getMessage(), throwable);</span><br><span class="line">        <span class="comment">// 响应状态码，HTTP 500 服务器错误</span></span><br><span class="line">        <span class="comment">// rc.setResponseStatusCode(HttpStatus.INTERNAL_SERVER_ERROR.value());</span></span><br><span class="line"></span><br><span class="line">        HttpStatus httpStatus = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">429</span> == zuulException.nStatusCode)</span><br><span class="line">            httpStatus = HttpStatus.TOO_MANY_REQUESTS;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">500</span> == zuulException.nStatusCode)</span><br><span class="line">            httpStatus = HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应类型</span></span><br><span class="line">        rc.getResponse().setContentType(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">        PrintWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = rc.getResponse().getWriter();</span><br><span class="line">            <span class="comment">// 响应内容</span></span><br><span class="line">            <span class="comment">// writer.print("&#123;\"message\":\"" + HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase() + "\"&#125;");</span></span><br><span class="line">            <span class="comment">// 响应内容</span></span><br><span class="line">            writer.print(<span class="string">"&#123;\"message\":\""</span> + httpStatus.getReasonPhrase() + <span class="string">"\"&#125;"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != writer)</span><br><span class="line">                writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ZuulException <span class="title">findZuulException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (throwable.getCause() <span class="keyword">instanceof</span> ZuulRuntimeException)</span><br><span class="line">            <span class="keyword">return</span> (ZuulException) throwable.getCause().getCause();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (throwable.getCause() <span class="keyword">instanceof</span> ZuulException)</span><br><span class="line">            <span class="keyword">return</span> (ZuulException) throwable.getCause();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> ZuulException)</span><br><span class="line">            <span class="keyword">return</span> (ZuulException) throwable;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulException(throwable, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还有一种方法是实现 org.springframework.boot.web.servlet.error.ErrorController 重写 getErrorPath() 本文中不做重点讲解。  </p></blockquote><p>多次访问 <a href="http://localhost:9000/api/product-service/product/single/?token=123&amp;id=1" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/single/?token=123&amp;id=1</a> 结果如下：<br><img src="%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="异常处理">  </p><h3 id="11-4-网关调优"><a href="#11-4-网关调优" class="headerlink" title="11.4 网关调优"></a>11.4 网关调优</h3><p>使用 Zuul 的 Spring Cloud 微服务结构图：<br><img src="zuul_cloud.jpg" alt="zuul Spring Cloud"><br>从上图中可以看出。整体请求逻辑还是比较复杂的，在没有 <code>Zuul</code> 网关的情况下，<code>client</code> 请求 <code>service</code> 的时候，也有请求超时的可能。那么当增加了 <code>Zuul</code> 网关的时候，请求超时的可能就更明显了。<br>当请求通过 <code>Zuul</code> 网关路由到服务，并等待服务返回响应，这个过程中 <code>Zuul</code> 也有超时控制。<code>Zuul</code> 的底层使用的是 <code>Hystrix + Ribbon</code> 来实现请求路由。<br><img src="zuul_03.png" alt="zuul"><br><code>Zuul</code> 中的 <code>Hystrix</code> 内部使用<strong>线程池隔离</strong>机制提供请求路由实现，其默认的超时时长为 <code>1000</code> 毫秒。<code>Ribbon</code> 底层默认超时时长为 <code>5000</code> 毫秒。<strong>如果 <code>Hystrix</code> 超时，直接返回超时异常。如果 <code>Ribbon</code> 超时，同时 <code>Hystrix</code> 未超时，<code>Ribbon</code> 会自动进行服务集群轮询重试，直到 <code>Hystrix</code> 超时为止。如果 <code>Hystrix</code> 超时时长小于 <code>Ribbon</code> 超时时长，<code>Ribbon</code> 不会进行服务集群轮询重试</strong>。</p><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment"># 开启 Zuul 网关重试</span></span><br><span class="line"><span class="attr">  retryable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hystrix 超时时间设置</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">10000</span>  <span class="comment"># 线程池隔离，默认超时时间 1000ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ribbon 超时时间设置：建议设置小于 Hystrix</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  ConnectTimeout:</span> <span class="number">5000</span>                    <span class="comment"># 请求连接的超时时间: 默认超时时间 1000ms</span></span><br><span class="line"><span class="attr">  ReadTimeout:</span> <span class="number">5000</span>                       <span class="comment"># 请求处理的超时时间: 默认超时时间 1000ms</span></span><br><span class="line">  <span class="comment"># 重试次数</span></span><br><span class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">1</span>                       <span class="comment"># MaxAutoRetries 表示访问服务集群下原节点（同路径访问）</span></span><br><span class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">1</span>             <span class="comment"># MaxAutoRetriesNextServer表示访问服务集群下其余节点（换台服务器）</span></span><br><span class="line">  <span class="comment"># Ribbon 开启重试</span></span><br><span class="line"><span class="attr">  OkToRetryOnAllOperations:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>Spring Cloud Netflix Zuul 网关重试机制需要使用 spring-retry 组件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring retry 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类-2"><a href="#启动类-2" class="headerlink" title="启动类"></a>启动类</h4><p>启动类需要开启 <code>@EnableRetry</code> 重试注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.EnableRetry;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启重试注解</span></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="comment">// 开启数据监控注解</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="comment">// 开启 EurekaClient 注解，目前版本如果配置了 Eureka 注册中心，默认会开启该注解</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">// 开启 Zuul 注解</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模拟超时"><a href="#模拟超时" class="headerlink" title="模拟超时"></a>模拟超时</h4><p>商品服务模拟超时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键查询商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">selectProductById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="comment">// 模拟超时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> productService.selectProductById(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="访问测试-3"><a href="#访问测试-3" class="headerlink" title="访问测试"></a>访问测试</h4><p>配置前访问 <a href="http://localhost:9000/api/product-service/product/1?token=123" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1?token=123</a><br>结果如下：<br><img src="%E9%85%8D%E7%BD%AE%E9%87%8D%E8%AF%95%E5%89%8D.png" alt="配置重试前"><br>配置后访问 <a href="http://localhost:9000/api/product-service/product/1?token=123" target="_blank" rel="noopener">http://localhost:9000/api/product-service/product/1?token=123</a><br>结果如下：<br><img src="%E9%85%8D%E7%BD%AE%E9%87%8D%E8%AF%95%E5%90%8E.png" alt="配置重试后"> </p><h2 id="12-Zuul-和-Sentinel-整合"><a href="#12-Zuul-和-Sentinel-整合" class="headerlink" title="12. Zuul 和 Sentinel 整合"></a>12. Zuul 和 Sentinel 整合</h2><p>Sentinel 支持对 Spring Cloud Gateway、Netflix Zuul 等主流的 API Gateway 进行限流。<br><img src="sentinel.png" alt="sentinel"><br>官方文档</p><ul><li><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></li><li><a href="https://github.com/alibaba/Sentinel/wiki/网关限流#zuul-1x" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/网关限流#zuul-1x</a><h3 id="12-1-网关限流"><a href="#12-1-网关限流" class="headerlink" title="12.1 网关限流"></a>12.1 网关限流</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4>创建<code>spring-cloud-demo-zuul-sentinel-server</code>项目<h4 id="添加依赖-2"><a href="#添加依赖-2" class="headerlink" title="添加依赖"></a>添加依赖</h4></li><li>单独使用添加 <code>sentinel-zuul-adapter</code> 依赖即可。</li><li>若想跟 <code>Sentinel Starter</code> 配合使用，需要加上 <code>spring-cloud-alibaba-sentinel-gateway</code> 依赖，同时需要添加 <code>spring-cloud-starter-netflix-zuul</code> 依赖来让 <code>spring-cloud-alibaba-sentinel-gateway</code> 模块里的 <code>Zuul</code> 自动化配置类生效。</li><li>同时请将 <code>spring.cloud.sentinel.filter.enabled</code> 配置项置为 <code>false</code>（若在网关流控控制台上看到了 URL 资源，就是此配置项没有置为 false）。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springcloud.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo-zuul-sentinel-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring cloud netflix zuul 依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- netflix eureka client 依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单独使用 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sentinel zuul adapter 依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-zuul-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 和 Sentinel Starter 配合使用 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-cloud-alibaba-sentinel-gateway&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9001</span> <span class="comment"># 端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul-server-sentinel</span> <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    sentinel:</span></span><br><span class="line"><span class="attr">      filter:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Eureka Server 注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>       <span class="comment"># 是否使用 ip 地址注册</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment"># ip:port</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span>                  <span class="comment"># 设置服务注册中心地址</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://root:123456@localhost:8762/eureka/,http://root:123456@localhost:8763/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="网关服务配置类"><a href="#网关服务配置类" class="headerlink" title="网关服务配置类"></a>网关服务配置类</h4><p>配置网关服务过滤器和网关限流规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.zuul.filters.SentinelZuulErrorFilter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.zuul.filters.SentinelZuulPostFilter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.zuul.filters.SentinelZuulPreFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网关服务配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底层继承了 ZuulFilter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulFilter <span class="title">sentinelZuulPreFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// We can also provider the filter order in the constructor.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelZuulPreFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底层继承了 ZuulFilter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulFilter <span class="title">sentinelZuulPostFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelZuulPostFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底层继承了 ZuulFilter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulFilter <span class="title">sentinelZuulErrorFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelZuulErrorFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring 容器初始化的时候执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载网关限流规则</span></span><br><span class="line">        initGatewayRules();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关限流规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            resource：资源名称，可以是网关中的 route 名称或者用户自定义的 API 分组名称</span></span><br><span class="line"><span class="comment">            count：限流阈值</span></span><br><span class="line"><span class="comment">            intervalSec：统计时间窗口，单位是秒，默认是 1 秒</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"service-consumer"</span>)</span><br><span class="line">                .setCount(<span class="number">3</span>) <span class="comment">// 限流阈值</span></span><br><span class="line">                .setIntervalSec(<span class="number">60</span>)); <span class="comment">// 统计时间窗口，单位是秒，默认是 1 秒</span></span><br><span class="line">        <span class="comment">// 加载网关限流规则</span></span><br><span class="line">        GatewayRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动类-3"><a href="#启动类-3" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启 Zuul 注解</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="comment">// 开启 EurekaClient 注解，目前版本如果配置了 Eureka 注册中心，默认会开启该注解</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>多次访问：<a href="http://localhost:9001/service-consumer/order/1" target="_blank" rel="noopener">http://localhost:9001/service-consumer/order/1</a> 触发限流后会返回固定的提示：<br><img src="sentinel_exception.png" alt="Sentinel Exception">  </p><h4 id="自定义限流"><a href="#自定义限流" class="headerlink" title="自定义限流"></a>自定义限流</h4><p>发生限流之后的处理流程 ：  </p><ul><li>发生限流之后可自定义返回参数，通过实现 <code>ZuulBlockFallbackProvider</code> 接口，默认的实现是 <code>DefaultBlockFallbackProvider</code>。</li><li>默认的 <code>fallback route</code> 的规则是 <code>route ID</code> 或自定义的 <code>API</code> 分组名称。<h5 id="编写限流处理类"><a href="#编写限流处理类" class="headerlink" title="编写限流处理类"></a>编写限流处理类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.demo.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.zuul.fallback.BlockResponse;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.zuul.fallback.ZuulBlockFallbackProvider;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderBlockFallbackProvider</span> <span class="keyword">implements</span> <span class="title">ZuulBlockFallbackProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"service-consumer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlockResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"&#123;&#125; 服务触发限流"</span>, route);</span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> BlockException) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BlockResponse(<span class="number">429</span>, <span class="string">"服务访问压力过大，请稍后再试。"</span>, route);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BlockResponse(<span class="number">500</span>, <span class="string">"系统错误，请联系管理员。"</span>, route);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="将限流处理类注册至-Zuul-容器"><a href="#将限流处理类注册至-Zuul-容器" class="headerlink" title="将限流处理类注册至 Zuul 容器"></a>将限流处理类注册至 Zuul 容器</h5><p>ZuulConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring 容器初始化的时候执行该方法</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册 FallbackProvider</span></span><br><span class="line">    ZuulBlockFallbackManager.registerProvider(<span class="keyword">new</span> OrderBlockFallbackProvider());</span><br><span class="line">    <span class="comment">// 加载网关限流规则</span></span><br><span class="line">    initGatewayRules();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次访问 <a href="http://localhost:9001/service-consumer/order/1" target="_blank" rel="noopener">http://localhost:9001/service-consumer/order/1</a>  触发限流后返回自定义提示：<br><img src="zuul_exception01.png" alt="Zuul Exception"></p><h2 id="13-高可用网关"><a href="#13-高可用网关" class="headerlink" title="13. 高可用网关"></a>13. 高可用网关</h2><p>业内通常用多少 9 来衡量网站的可用性，例如 QQ 的可用性是 4 个 9，就是说 QQ 能够保证在一年里，服务在 99.99% 的时间是可用的，只有 0.01% 的时间不可用，大约最多 53 分钟。<br>对于大多数网站，2 个 9 是基本可用；3 个 9 是叫高可用；4 个 9 是拥有自动恢复能力的高可用。<br>实现高可用的主要手段是数据的冗余备份和服务的失效转移，这两种手段具体可以怎么做呢，在网关里如何体现？主要有以下几个方向：  </p><ul><li>集群部署</li><li>负载均衡</li><li>健康检查</li><li>节点自动重启</li><li>熔断</li><li>服务降级</li><li>接口重试<h3 id="Nginx-网关集群实现高可用网关"><a href="#Nginx-网关集群实现高可用网关" class="headerlink" title="Nginx + 网关集群实现高可用网关"></a>Nginx + 网关集群实现高可用网关</h3><img src="nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E7%BD%91%E5%85%B3.png" alt="nginx高可用网关"></li></ul><h4 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h4><p><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">下载nginx</a>(根据自己的需要下载对应的版本，这里下载Windows版本)</p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>解压文件后直接运行根路径下的 <code>nginx.exe</code> 文件即可。<br>Nginx 默认端口为 80，访问：<a href="http://localhost:80/" target="_blank" rel="noopener">http://localhost:80/</a> 看到下图说明安装成功。<br><img src="nginx01.png" alt="nginx"></p><h4 id="配置网管集群"><a href="#配置网管集群" class="headerlink" title="配置网管集群"></a>配置网管集群</h4><p>进入 <code>Nginx</code> 的 <code>conf</code> 目录，打开 <code>nginx.conf</code> 文件，配置网关集群：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    # 网关集群</span><br><span class="line">upstream gateway &#123;</span><br><span class="line">server 127.0.0.1:9000;</span><br><span class="line">server 127.0.0.1:9001;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        # 代理网关集群，负载均衡调用</span><br><span class="line">location / &#123;</span><br><span class="line">            proxy_pass http://gateway;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h4><p>启动两台网关服务器 <a href="http://localhost:9000/，http://localhost:9001/" target="_blank" rel="noopener">http://localhost:9000/，http://localhost:9001/</a> 和相关服务。<br>访问：<a href="http://localhost/api/product-service/product/1?token=123" target="_blank" rel="noopener">http://localhost/api/product-service/product/1?token=123</a> 实现高可用网关。<br><img src="nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E7%BD%91%E5%85%B301.png" alt="nginx高可用网关"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>一个请求过来，首先经过 Nginx 的一层负载，到达网关，然后由网关负载到真实后端，若后端有问题，网关会进行重试访问，多次访问后仍返回失败，可以通过熔断或服务降级立即返回结果。而且，由于是负载均衡，网关重试时不一定会访问到出错的后端。</p><hr><p>参考资料：<br><a href="https://netflix.github.io/" target="_blank" rel="noopener">Netflix Open Source Software Center</a><br><a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">Zuul</a><br><a href="https://mrhelloworld.com/zuul/" target="_blank" rel="noopener">Spring Cloud 系列之 Netflix Zuul 服务网关</a><br><a href="https://www.zhihu.com/question/309582197/answer/578705309" target="_blank" rel="noopener">到底什么是API网关？</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI4MTY5NTk4Ng==&mid=2247489382&idx=1&sn=18f4b4f6129177190713220eaff8da9a&source=41#wechat_redirect" target="_blank" rel="noopener">深入浅出聊聊企业级API网关</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI4MTY5NTk4Ng==&mid=2247489613&idx=1&sn=dea60a05e7ceda68323aa9014f5814f8&source=41#wechat_redirect" target="_blank" rel="noopener">谈API网关的背景、架构以及落地方案</a><br><a href="https://cloud.tencent.com/developer/article/1527119" target="_blank" rel="noopener">一文带你了解什么是Zuul网关</a><br><a href="https://blog.csdn.net/huangshulang1234/article/details/79185579" target="_blank" rel="noopener">微服务网关解决方案和使用总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="https://10veU.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/tags/Spring-Cloud/"/>
    
      <category term="服务网关" scheme="https://10veU.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud之Consul 服务注册中心</title>
    <link href="https://10veU.github.io/2021/09/01/Spring-Cloud%E4%B9%8BConsul-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>https://10veU.github.io/2021/09/01/Spring-Cloud之Consul-服务注册中心/</id>
    <published>2021-09-01T19:30:44.000Z</published>
    <updated>2022-06-17T05:59:24.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Cloud之Consul-服务注册中心"><a href="#Spring-Cloud之Consul-服务注册中心" class="headerlink" title="Spring Cloud之Consul 服务注册中心"></a>Spring Cloud之Consul 服务注册中心</h1><h2 id="1-什么是Consul"><a href="#1-什么是Consul" class="headerlink" title="1.什么是Consul?"></a>1.什么是Consul?</h2><p>Consul 是 HashiCorp 公司推出的开源产品，是一种服务网格(Service Mesh)解决方案。用于实现分布式系统的服务发现、服务隔离、服务配置，这些功能中的每一个都可以根据需要单独使用，也可以同时使用所有功能以构建完整的服务网格(Service Mesh)。Consul 官网目前主要推 Consul 在服务网格(Service Mesh)中的使用。</p><p>与其它分布式服务注册与发现的方案相比，Consul 的方案更“一站式”——内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具。Consul 本身使用 go 语言开发，具有跨平台、运行高效等特点，也非常方便和 Docker 配合使用。</p><blockquote><p>Service Mesh可参考下面的文章<br><a href="https://zhuanlan.zhihu.com/p/61901608" target="_blank" rel="noopener">什么是Service Mesh？</a></p></blockquote><h2 id="2-Consul的主要特性"><a href="#2-Consul的主要特性" class="headerlink" title="2. Consul的主要特性"></a>2. Consul的主要特性</h2><p>Consul 的主要特点是：</p><ul><li><strong>服务发现</strong>：Consul 的客户端可以注册一个服务，例如 api 或 mysql，其他客户端可以使用 Consul 来发现给定服务的提供者。使用 DNS 或 HTTP，应用程序可以轻松找到它们所依赖的服务。</li><li><strong>健康检查</strong>：Consul 客户端可以提供任意数量的健康检查，或者与给定的服务相关联（“网络服务器是否返回 200 OK”），或者与本地节点（“内存利用率是否低于 90%”）相关联。操作员可以使用此信息来监控集群健康状况，并且服务发现组件可以使用它来将流量路由到不健康的主机之外。  </li><li><strong>KV 存储</strong>：应用程序可以将 Consul 的分层键/值存储用于多种目的，包括动态配置、功能标记、协调、领导选举等。简单的 HTTP API 使其易于使用。</li><li><strong>安全的服务通信</strong>：Consul 可以为服务生成和分发 TLS 证书，以建立相互的 TLS 连接。意图可用于定义允许哪些服务进行通信。可以通过实时更改意图轻松管理服务分段，而不是使用复杂的网络拓扑和静态防火墙规则。</li><li><strong>多数据中心</strong>：Consul 支持开箱即用的多个数据中心。这意味着 Consul 的用户不必担心构建额外的抽象层以扩展到多个区域。</li></ul><p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其非常适合现代、弹性的基础设施。</p><h2 id="3-Consul的基础架构"><a href="#3-Consul的基础架构" class="headerlink" title="3. Consul的基础架构"></a>3. Consul的基础架构</h2><p>Consul是一个分布式系统，设计用于在一组节点上运行。节点可以是物理服务器、云实例、虚拟机或容器。连接在一起，运行在上面的节点集称为<strong>数据中心</strong>。在数据中心中，Consul可以在两种模式下运行: <strong>服务端模式</strong>和<strong>客户端模式</strong>。服务器代理为Consul维护一致的状态。客户端是一个运行在每个服务运行节点上的轻量级进程。一个数据中心将有3-5个服务器和许多客户机。<br><img src="DataCenter.png" alt="数据中心">  </p><h3 id="从大视角分析Consul的架构"><a href="#从大视角分析Consul的架构" class="headerlink" title="从大视角分析Consul的架构"></a>从大视角分析Consul的架构</h3><p><img src="consul-arch.png" alt="consul-arch"><br>首先，图中有两个数据中心，分别为 Datacenter1 和 Datacenter2 。Consul 非常好的支持多个数据中心，每个数据中心内，有客户端和服务器端，服务器一般为 3~5 个，这样可以在稳定和性能上达到平衡，因为更多的机器会使数据同步很慢。不过客户端是没有限制的，可以有成千上万个。</p><p>　　数据中心内的所有节点都会加入到 Gossip (流言)协议。这就意味着有一个 Gossip 池，其中包含这个数据中心所有的节点。客户端不需要去配置服务器地址信息，发现服务工作会自动完成。检测故障节点的工作不是放在服务器端，而是分布式的；这使得失败检测相对于本地化的心跳机制而言，更具可拓展性。在选择 leader 这种重要的事情发生的时候，数据中心被用作消息层来做消息广播。</p><p>　　每个数据中心内的服务器都是单个 Raft 中节点集的一部分。这意味着他们一起工作，选择一个单一的领导者——一个具有额外职责的选定的服务器。leader 负责处理所有查询和事物。事物也必须作为同步协议的一部分复制到节点集中的所有节点。由于这个要求，当非 leader 服务器接收到 RPC 请求时，就会将请求其转发给集群 leader。</p><p>　　服务器端节点同时也作为 WAN Gossip 池的一部分，WAN 池和 LAN 池不同的是，它针对网络高延迟做了优化，而且只包含其他Consul 服务器的节点。这个池的目的是允许数据中心以最少的消耗方式发现对方。启动新的数据中心与加入现有的 WAN Gossip 一样简单。因为这些服务器都在这个池中运行，它还支持跨数据中心请求。当服务器收到对不同数据中心的请求时，它会将其转发到正确数据中心中的随机服务器。那个服务器可能会转发给本地的 leader。</p><p>　　这样会使数据中心的耦合非常低。但是由于故障检测，连接缓存和复用，跨数据中心请求相对快速可靠。</p><p>　　总的来说，数据不会在不同的数据中心之间做复制备份。当收到一个请求处于别的数据中心的资源时，本地的 Consul 服务器会发一个 RPC 请求到远端的 Consul 服务器，然后返回结果。如果远端数据中心处于不可用状态，那么这么资源也会不可用，但这不影响本地的数据中心。在一些特殊的情况下，有限的数据集会被跨数据中心复制备份，比如说 Consul 内置的 ACL 复制能力，或者像 consul-replicate 这样的外部工具。</p><h2 id="4-Consul的工作原理"><a href="#4-Consul的工作原理" class="headerlink" title="4. Consul的工作原理"></a>4. Consul的工作原理</h2><p><img src="consul_service.png" alt="consul_service"></p><h3 id="服务发现以及注册"><a href="#服务发现以及注册" class="headerlink" title="服务发现以及注册"></a>服务发现以及注册</h3><p>当服务 Producer 启动时，会将自己的 Ip/host 等信息通过发送请求告知 Consul，Consul 接收到 Producer 的注册信息后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康。</p><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>当 Consumer 请求 Product 时，会先从 Consul 中拿到存储 Product 服务的 IP 和 Port 的临时表(temp table)，从temp table 表中任选一个· Producer 的 IP 和 Port， 然后根据这个 IP 和 Port，发送访问请求；temp table 表只包含通过了健康检查的 Producer 信息，并且每隔 10s（默认）更新。</p><h2 id="5-Consul的安装"><a href="#5-Consul的安装" class="headerlink" title="5. Consul的安装"></a>5. Consul的安装</h2><p>Eureka 其实就是个 Servlet 程序，跑在 Servlet 容器中；Consul 则是用 go 语言编写的第三方工具需要单独安装使用。<br><a href="https://www.consul.io/downloads" target="_blank" rel="noopener">Download Consul</a></p><h3 id="Windows下单节点安装"><a href="#Windows下单节点安装" class="headerlink" title="Windows下单节点安装"></a>Windows下单节点安装</h3><p>下载一个Consul的windows安装包<br><img src="consul_package.png" alt="consul_package"><br>cd到对应的目录下，使用cmd启动Consul。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -dev表示开发模式运行，另外还有 -server 表示服务模式运行</span><br><span class="line">consul agent -dev -client=0.0.0.0</span><br></pre></td></tr></table></figure><blockquote><p>Consul在开发模式下启动本地代理，这是一种内存服务器模式，为了方便使用，启用了一些常见特性(尽管存在安全风险) ，并且关闭了所有持久性选项。这种模式不安全也不可伸缩，但是不需要额外的配置就可以轻松地实验大多数领事的功能。</p></blockquote><p>为了方便启动，也可以在 consul.exe 同级目录下创建一个脚本来启动，脚本内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev -client=0.0.0.0</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>执行脚本之后看到如下信息：<br><img src="consul_run.png" alt="consul run"><br>访问管理后台：<a href="http://localhost:8500/" target="_blank" rel="noopener">http://localhost:8500/</a> 看到下图意味着我们的 Consul 服务启动成功了。</p><h2 id="6-Consul入门案例"><a href="#6-Consul入门案例" class="headerlink" title="6. Consul入门案例"></a>6. Consul入门案例</h2><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p><a href="https://gitee.com/I10veU/springcloud-demo" target="_blank" rel="noopener">基础环境</a><br><strong>注册中心</strong><br> <code>consule.exe</code>（从Consul官网下载）<br><strong>服务提供者</strong><br><code>spring-cloud-demo-service-provider</code><br><strong>服务消费者</strong><br><code>spring-cloud-demo-service-consumer</code>  </p><h4 id="服务接入注册中心"><a href="#服务接入注册中心" class="headerlink" title="服务接入注册中心"></a>服务接入注册中心</h4><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud consul 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring boot actuator 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置 Consul 注册中心</span></span><br><span class="line"><span class="attr">  consul:</span></span><br><span class="line">    <span class="comment"># 注册中心的访问地址</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8500</span></span><br><span class="line">    <span class="comment"># 服务发现相关配置</span></span><br><span class="line"><span class="attr">    discovery:</span></span><br><span class="line"><span class="attr">      register:</span> <span class="literal">false</span>                               <span class="comment"># 是否需要注册</span></span><br><span class="line"><span class="attr">      instance-id:</span> <span class="string">$&#123;spring.application.name&#125;</span>    <span class="comment"># 注册实例 id（必须唯一）</span></span><br><span class="line"><span class="attr">      service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span>      <span class="comment"># 服务名称</span></span><br><span class="line"><span class="attr">      port:</span> <span class="string">$&#123;server.port&#125;</span>                          <span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span>                       <span class="comment"># 是否使用 ip 地址注册</span></span><br><span class="line"><span class="attr">      ip-address:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span> <span class="comment"># 服务请求 ip</span></span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>访问<a href="http://localhost:9090/order/1" target="_blank" rel="noopener">http://localhost:9090/order/1</a>结果如下：<br><img src="service_result.png" alt="service_result"></p><h2 id="7-Consul集群部署"><a href="#7-Consul集群部署" class="headerlink" title="7. Consul集群部署"></a>7. Consul集群部署</h2><p><a href="https://learn.hashicorp.com/tutorials/consul/deployment-guide?in=consul/production-deploy" target="_blank" rel="noopener">Deployment Guide</a></p><hr><p>参考资料：<br><a href="https://www.consul.io/" target="_blank" rel="noopener">Consul官网</a><br><a href="https://blog.csdn.net/qwe86314/article/details/95094751" target="_blank" rel="noopener">Consul注册中心介绍</a><br><a href="https://zhuanlan.zhihu.com/p/61901608" target="_blank" rel="noopener">什么是Service Mesh</a><br><a href="https://www.servicemesher.com/" target="_blank" rel="noopener">Service Mesh中文社区</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="https://10veU.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://10veU.github.io/tags/Spring-Cloud/"/>
    
      <category term="注册中心" scheme="https://10veU.github.io/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建免费个人博客</title>
    <link href="https://10veU.github.io/2019/10/09/Hexo-GitHub%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://10veU.github.io/2019/10/09/Hexo-GitHub搭建免费个人博客/</id>
    <published>2019-10-09T16:42:07.000Z</published>
    <updated>2022-06-17T05:59:24.198Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head><meta name="generator" content="Hexo 3.9.0">     <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script>     <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js"></script> </head> <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.11.2/css/all.css">  <h1 id="Hexo-GitHub免费搭建个人博客"><a href="#Hexo-GitHub免费搭建个人博客" class="headerlink" title="Hexo+GitHub免费搭建个人博客"></a>Hexo+GitHub免费搭建个人博客</h1><blockquote><p>作者：大大蜡笔小小新    </p></blockquote><h2 id="1-Hexo框架的介绍"><a href="#1-Hexo框架的介绍" class="headerlink" title="1.  Hexo框架的介绍"></a>1. <i class="fas fa-blog"></i> Hexo框架的介绍</h2><p><code>Hexo</code>的官方介绍：<code>A fast,simple&amp;powerful blog framework</code>。  </p><p><code>Hexo</code>框架具有以下特点：  </p><ul><li>快速搭建</li><li>支持<code>Markdown</code>语法  </li><li>支持一键部署  </li><li>丰富的主题和插件  </li></ul><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.  环境准备"></a>2. <i class="fas fa-home"></i> 环境准备</h2><h3 id="2-1申请一个GitHub账户"><a href="#2-1申请一个GitHub账户" class="headerlink" title="2.1申请一个GitHub账户"></a>2.1申请一个<code>GitHub</code>账户</h3><p>  <a href="https://github.com/" target="_blank" rel="noopener"><code>GitHub</code>账户申请</a></p><p>  <a href="https://help.github.com/cn" target="_blank" rel="noopener"><code>GitHub</code>疑问解答</a></p><h3 id="2-2搭建Hexo需要的环境"><a href="#2-2搭建Hexo需要的环境" class="headerlink" title="2.2搭建Hexo需要的环境"></a>2.2搭建<code>Hexo</code>需要的环境</h3><p>  如何安装<code>Hexo</code>及安装<code>Hexo</code>需要的环境，可以参考<code>Hexo</code>官方文档  </p><p>  <a href="https://hexo.io/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a>  </p><h3 id="2-3环境验证"><a href="#2-3环境验证" class="headerlink" title="2.3环境验证"></a>2.3环境验证</h3><p><code>Node.js</code>和<code>Git</code>安装是否成功?  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 <span class="number">10</span>.<span class="number">0</span>.<span class="number">17134</span>.<span class="number">590</span>]  </span><br><span class="line">(c) <span class="number">2018</span> Microsoft Corporation。保留所有权利。    </span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">lenovopc</span>&gt;<span class="title">node</span> -<span class="title">v</span>  </span></span><br><span class="line"><span class="function"><span class="title">v8</span>.11.2    </span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">lenovopc</span>&gt;<span class="title">npm</span> -<span class="title">v</span>  </span></span><br><span class="line"><span class="function">5.6.0</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">E</span>:\<span class="title">Git</span>&gt;<span class="title">git</span> --<span class="title">version</span>  </span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">version</span> 2.16.2.<span class="title">windows</span>.1  </span></span><br><span class="line"><span class="function"><span class="title">E</span>:\<span class="title">Git</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Node.js</code>和<code>npm</code>的关系  </p><blockquote><p><i class="fas fa-quote-left fa-3x fa-pull-left"></i><code>Node.js</code>是<code>javascript</code>的一种运行环境，是对<code>Google V8</code>引擎进行的封装。是一个服务器端的<code>javascript</code>的解释器。<br> 包含关系:<code>Node.js</code>中含有<code>npm</code>，比如说你安装好<code>Node.js</code>，你打开<code>cmd</code>输入<code>npm -v</code>会发现npm的版本号，说明<code>npm</code>已经安装好。<br>引用大神的总结:<br>其实<code>npm</code>是<code>Node.js</code>的包管理器（<code>package manager</code>）。我们在<code>Node.js</code>上开发时，会用到很多别人已经写好的<code>javascript</code>代码，<br>如果每当我们需要别人的代码时，都根据名字搜索一下，下载源码，解压，再使用，会非常麻烦。于是就出现了包管理器<code>npm</code>。<br>大家把自己写好的源码上传到<code>npm</code>官网上，如果要用某个或某些个，直接通过<code>npm</code>安装就可以了，不用管那个源码在哪里。<br>并且如果我们要使用模块<code>A</code>，而模块<code>A</code>又依赖模块<code>B</code>，模块<code>B</code>又依赖模块<code>C</code>和<code>D</code>，此时<code>npm</code>会根据依赖关系， 把所有依赖的包都下载下来并且管理起来。试想如果这些工作全靠我们自己去完成会多么麻烦！其实就是类似于<code>Java</code>中的<code>Maven</code>。  </p></blockquote><h2 id="3-下载及安装Hexo"><a href="#3-下载及安装Hexo" class="headerlink" title="3.  下载及安装Hexo"></a>3. <i class="fas fa-cloud-download-alt"></i> 下载及安装Hexo</h2><h3 id="3-1下载及安装Hexo"><a href="#3-1下载及安装Hexo" class="headerlink" title="3.1下载及安装Hexo"></a>3.1下载及安装<code>Hexo</code></h3><p>  在<code>cmd</code>终端窗口执行下载安装命令  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>  安装完成如下图：  </p><p>  <img src="%E5%AE%89%E8%A3%85Hexo.png" alt="安装Hexo"></p><p>  执行命令判断<code>Hexo</code>安装是否成功</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>  安装成功如下：  </p><p>  <img src="%E5%AE%89%E8%A3%85Hexo%E6%88%90%E5%8A%9F.png" alt="安装Hexo成功"></p><h3 id="3-2初始化博客"><a href="#3-2初始化博客" class="headerlink" title="3.2初始化博客"></a>3.2初始化博客</h3><blockquote><p>以下操作尽可能都在<code>Git</code>终端操作</p></blockquote><p>  首先在自己本地磁盘创建一个安装目录，这里以<code>Hexo</code>为例；</p><p>  <img src="Hexo%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.png" alt="Hexo安装目录"></p><p>  切换到此文件夹目录下执行初始化命令  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>  <img src="Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%AD.png" alt="Hexo初始化中"></p><p>  如果你未自己手动创建文件夹，也可通过以下的命令去初始化<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="comment">// 进入博客文件夹，&lt;folder&gt;为文件夹的名称</span></span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line"><span class="comment">// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>  初始化完成  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">// 生成网页。</span></span><br><span class="line">hexo s <span class="comment">// 将生成的网页放在了本地服务器。</span></span><br></pre></td></tr></table></figure><p>  <img src="%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%8C%E6%88%90.png" alt="初始化完成"></p><p>  通过提示的信息，访问本地服务器  </p><p>  <img src="%E5%8D%9A%E5%AE%A2.png" alt="博客"></p><h2 id="4-配置博客"><a href="#4-配置博客" class="headerlink" title="4.  配置博客"></a>4. <i class="fas fa-cog fa-spin"></i> 配置博客</h2><p>当然，目前的博客界面不是很美观，如果想做的比较有点逼格，当然还是得个性化定制下，我们可以去<code>Hexo</code>官网下载自己喜欢的主题。  </p><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官方主题</a></p><p>选择你喜欢的主题，复制它的链接，<code>clone</code>到本地博客的<code>themes</code>目录下  </p><p><img src="%E5%85%8B%E9%9A%86%E4%B8%BB%E9%A2%98%E4%B8%AD.png" alt="克隆主题中"></p><p><img src="%E4%B8%BB%E9%A2%98%E5%85%8B%E9%9A%86%E5%AE%8C%E6%88%90.png" alt="主题克隆完成"></p><p><img src="%E5%85%8B%E9%9A%86%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%B8%BB%E9%A2%98.png" alt="克隆到本地的主题"></p><p>配置博客我们首先就得了解博客文件结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|node_modules:node.js的相关组件</span><br><span class="line">|scaddolds: 定义的一些东西，固定的</span><br><span class="line">|soorce: Markdown博客文档</span><br><span class="line">|themes: 一些主题</span><br><span class="line">|主题名-|</span><br><span class="line">       |主题内容（包含README.md,config.yml）</span><br><span class="line">|config: 配置文件（博客全局配置）</span><br><span class="line">|db.json: 生成的一些东西</span><br><span class="line">|package.json:  当前npm的相关的包</span><br><span class="line">|package-lock.json: npm管理的一些东西</span><br></pre></td></tr></table></figure><p>按照主题的<code>README.md</code>文档进行配置。<br>例如我使用的博客主题是<a href="https://github.com/Sariay/hexo-theme-Annie" target="_blank" rel="noopener">Annie</a>  </p><h2 id="5-博客个性化设置"><a href="#5-博客个性化设置" class="headerlink" title="5.  博客个性化设置"></a>5. <i class="fas fa-user-cog"></i> 博客个性化设置</h2><p>我们按照自己选择的<code>Hexo</code>主题进行配置后，如果想根据自己的喜好做相应的修改当然也是可以的。比如可以给博客添加图片、视频、音乐播放器等等。  </p><h3 id="5-1博客中添加图片1"><a href="#5-1博客中添加图片1" class="headerlink" title="5.1博客中添加图片1"></a>5.1博客中添加图片<a href="https://vwin.github.io/2018/08/07/Hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">1</a></h3><p>博客中的图片添加有以下几种方式：</p><h4 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h4><ul><li>绝对路径<br>直接在主题下的<code>img</code>（存储图片文件夹，不同的主题存储图片的名称可能不同）文件夹下(themes/所选主题文件夹/source/img),<code>/img/图片名称.jpg</code>这张图片，就可以使用以下方式访问： <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](/img/图片名称.jpg)</span><br></pre></td></tr></table></figure></li></ul><p>eg:<br><img src="/img/wechat.jpg" alt="wechat">   </p><ul><li>相对路径<br>图片除了可以放在统一的<code>img</code>文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置博客根目录下的<code>_config.yml</code>来生成。  </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将_config.yml文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>文件夹中，文章就可以使用相对路径引用图片资源了。<code>_posts/post_name/图片名称.jpg</code>这张图片可以用以下方式访问：  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](图片名称.jpg)</span><br></pre></td></tr></table></figure><p>eg:<br><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="微信公众号">  </p><h4 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h4><p>除了在本地存储图片，还可以将图片上传到一些免费的 <code>CDN</code>服务中。因国内访问<code>GitHub</code>速度较慢，所以将突破放到国内图床上，然后引用外链接是常用的方法。<br>常用图床总结：<a href="https://sspai.com/post/40499" target="_blank" rel="noopener">https://sspai.com/post/40499</a><br>常用的图床有：七牛云、腾讯云、微博图床等。  </p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>使用<code>github</code>存储博客图片</p><ol><li>创建一个空的仓库  </li><li>将图片<code>push</code>到仓库中</li><li>点击图片进去，有个<code>download</code>，右键复制链接</li><li>将链接插入文章<br>引用格式：  </li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![logo](https://github.com/xxxx/xx.jpg)</span><br><span class="line">```  </span><br><span class="line">#### 使用插件  </span><br><span class="line"> <span class="number">1</span>. 首先把`blog（hexo）`目录下的`_config.yml`里的`psot_asset_folder:`设置为`true`</span><br><span class="line"> <span class="number">2</span>. 在`blog（hexo）`目录下执行:  </span><br><span class="line">```<span class="built_in">cmd</span>  </span><br><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>blog（hexo）</code>目录下<code>Git Bash Here</code>，运行<code>hexo n &quot;博客文章名&quot;</code>来生成<code>md</code>博客时，会在<code>_post</code>目录下看到一个与博客同名的文件夹。  </li><li>将想要上传的图片先扔到文件夹下，然后在博客中使用<code>markdown</code>的格式引入图片：  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![你想要输入的替代文字](xxxx/图片名.jpg)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p></blockquote><h3 id="5-2博客中添加视频2"><a href="#5-2博客中添加视频2" class="headerlink" title="5.2博客中添加视频2"></a>5.2博客中添加视频<a href="https://baijiahao.baidu.com/s?id=1623914788952059989&wfr=spider&for=pc" target="_blank" rel="noopener">2</a></h3><blockquote><p>以<code>bilibili</code>为例，B站无广告   </p></blockquote><ul><li>去B站获取视频外链<br><img src="%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E5%A4%96%E9%93%BE.png" alt="获取视频外链">  </li><li>在文章中插入视频外链<br>我们知道在<code>md</code>中可以直接插入<code>html</code>代码。这里我们就插入视频外链。代码如下：  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=68662896&amp;cid=118997493&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到效果令人很不满意。  </p><ul><li>修改代码，美化播放器样式。<br>代码如下：  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative; width: 100%; height: 0;padding-bottom: 75%;"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=68662896&amp;cid=118997493&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"position: absolute; width: 100%; height: 100%; left: 0; top: 0;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3博客中添加网易云音乐歌单"><a href="#5-3博客中添加网易云音乐歌单" class="headerlink" title="5.3博客中添加网易云音乐歌单"></a>5.3博客中添加网易云音乐歌单</h3><ul><li>（以 Chrome 为例，其他浏览器类似）打开歌单页面，在“生成外链播放器”上右击，点击检查（审查元素 <code>ctrl+shift+i</code>）；<br><img src="%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE.png" alt="网易云音乐外链"></li><li>接着找到生成外链播放器这段文字直接双击复制前面的<code>/outchain/0/170792779/</code><br><img src="%E5%A4%96%E9%93%BEid.png" alt="外链id">  </li><li>然后修改歌单链接示例：<a href="http://music.163.com/#/outchain/0/170792779/（可以修改自己喜欢的播放器尺寸，播放模式后再复制代码）" target="_blank" rel="noopener">http://music.163.com/#/outchain/0/170792779/（可以修改自己喜欢的播放器尺寸，播放模式后再复制代码）</a><br><img src="%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95.png" alt="网易云音乐歌单">    </li></ul><blockquote><p>由于版权限制，好多歌曲可能在播放器中无法播放，毕竟没有收费，将就用吧！😂</p></blockquote><h3 id="5-4博客中实现在线联系功能"><a href="#5-4博客中实现在线联系功能" class="headerlink" title="5.4博客中实现在线联系功能"></a>5.4博客中实现在线联系功能</h3><p>在线联系功能可以使访客及时，快捷的与博主交流，也能帮助博主及时的解决访客提出的博文中的问题。<code>Hexo</code>实现在线联系功能主要有以下两种方式:  </p><h4 id="DaoVoice实现在线联系"><a href="#DaoVoice实现在线联系" class="headerlink" title="DaoVoice实现在线联系"></a>DaoVoice实现在线联系</h4><ul><li><p>注册登录<code>DaoVoice</code><br><a href="http://dashboard.daovoice.io/get-started?invite_code=75159429" target="_blank" rel="noopener">注册登录DaoVoice</a>  </p></li><li><p><code>DaoVoice</code>接入<br><a href="http://guide.daocloud.io/daovoice/daovoice-9151028.html" target="_blank" rel="noopener"><code>DaoVoice</code>接入</a>  </p></li><li><p><code>Daovoice</code>绑定微信（可选）<br><code>DaoVoice</code>虽然可以很好的与访客交流，但是还是不能像微信聊天一样方便，所以我们绑定微信，瞬间秒回访客消息，不再等待！<br><img src="DaoVoice%E7%BB%91%E5%AE%9A%E5%BE%AE%E4%BF%A1.png" alt="DaoVoice绑定微信"></p><h4 id="HEXO的博客添加gitter在线交流"><a href="#HEXO的博客添加gitter在线交流" class="headerlink" title="HEXO的博客添加gitter在线交流"></a>HEXO的博客添加gitter在线交流</h4><p><a href="https://blog.csdn.net/u011606307/article/details/89504541" target="_blank" rel="noopener">给基于HEXO的博客添加gitter在线交流</a></p><h2 id="6-持续集成Hexo博客"><a href="#6-持续集成Hexo博客" class="headerlink" title="6.  持续集成Hexo博客"></a>6. <i class="fab fa-dev"></i> 持续集成Hexo博客</h2><h4 id="6-1使用Jenkins持续集成Hexo博客3"><a href="#6-1使用Jenkins持续集成Hexo博客3" class="headerlink" title="6.1使用Jenkins持续集成Hexo博客3"></a>6.1使用Jenkins持续集成Hexo博客<a href="https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/" target="_blank" rel="noopener">3</a></h4><p><a href="http://www.sevenyuan.cn/2019/03/18/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90Hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">使用Jenkins持续集成Hexo博客</a>  </p><h4 id="6-2用TravisCI持续集成Hexo博客"><a href="#6-2用TravisCI持续集成Hexo博客" class="headerlink" title="6.2用TravisCI持续集成Hexo博客"></a>6.2用TravisCI持续集成Hexo博客</h4><p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI个人免费站点</a><br><a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI企业收费站点</a>  </p><h5 id="6-2-1核心概念"><a href="#6-2-1核心概念" class="headerlink" title="6.2.1核心概念"></a>6.2.1核心概念</h5></li><li><p>什么是持续集成（CI）？<a href="https://docs.travis-ci.com/user/for-beginners/#breaking-the-build" target="_blank" rel="noopener">4</a><br>CI(<code>Continuous Integration</code>)翻译为持续集成。<br>持续集成是经常合并小的代码更改的实践，而不是在开发周期结束时合并大的更改。目的是通过以较小的增量开发和测试来构建更健康的软件。这就是<code>Travis CI</code>出现的地方。<br>作为一个持续集成平台，<code>Travis CI</code>通过自动构建和测试代码更改来支持您的开发过程，并提供有关更改成功的即时反馈。<code>Travis CI</code>还可以通过管理部署和通知来自动化开发过程的其他部分。  </p><h5 id="6-2-2准备条件"><a href="#6-2-2准备条件" class="headerlink" title="6.2.2准备条件"></a>6.2.2准备条件</h5><p>要开始使用Travis CI，请确保您具有：</p></li><li><p>一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>的帐户。  </p></li><li><p><a href="https://help.github.com/en/github/importing-your-projects-to-github" target="_blank" rel="noopener">托管在GitHub上的项目</a>的所有者权限。  </p><ul><li>博客源码仓库  </li><li>博客部署仓库  <h5 id="6-2-3-关联仓库"><a href="#6-2-3-关联仓库" class="headerlink" title="6.2.3 关联仓库"></a>6.2.3 关联仓库</h5>使用GitHub登录到<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI个人免费站点</a><br><img src="travis_login.png" alt="travis login"><br>关联到持续集成的仓库<br><img src="repo.png" alt="持续集成的仓库">  </li></ul></li></ul><p><strong>配置 Access Token</strong><br>如下图，Environment Variables 区域就是用来添加权限信息的。我们需要填写一个Token的名称和值，该名称可以在配置文件中以 ${变量名} 来引用，该Token我们需要从Github中获取。<br><img src="travis_setting.png" alt><br><strong>从Github获取Access Token</strong><br>在Github的setting页面，左侧面板选择Developer settings然后Personal access tokens, 右上角点击Generate new token。生成token时候需要确定访问scope，这里我们选择我们的repo即可。<br><img src="travis_token.png" alt><br>重要：生成的token只有第一次可见，一定要保存下来备用。<br><img src="token.png" alt="token"><br><strong>在Travis CI中配置</strong><br>将上面获取到的token添加到 Environment Variables 部分，值为该 token ,而名称即为上面设置的 Travis_Token (请更改为个人所设置名称)。不勾选后面的 Display value in build log . 否则会在日志文件中暴露你的 token 信息，而日志文件是公开可见的。</p><p>至此我们已经配置好了要构建的仓库和访问的token，接下来就是如何构建的问题了。<br><strong>配置.travis.yml（如果没有，新建)</strong><br>我个人的.travis.yml 可供参考</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定构建环境是Node.js，当前版本是稳定版</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr"> global:</span></span><br><span class="line"><span class="attr">   - URL_REPO:</span> <span class="string">github.com/10veU/10veU.github.io.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置钩子只检测blog-source分支的push变动</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置缓存文件</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在构建之前安装hexo环境</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装git插件和搜索功能插件</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清缓存，生成网页操作</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  github_token:</span> <span class="string">$GH_TOKEN</span>  <span class="comment"># Set in the settings page of your repository, as a secure variable</span></span><br><span class="line"><span class="attr">  keep_history:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  local-dir:</span> <span class="string">public</span></span><br><span class="line"><span class="comment"># configure notifications (email, IRC, campfire etc)</span></span><br><span class="line"><span class="comment"># please update this section to your needs!</span></span><br><span class="line"><span class="comment"># https://docs.travis-ci.com/user/notifications/</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">514084647</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">  on_success:</span> <span class="string">change</span></span><br><span class="line"><span class="attr">  on_failure:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>注意：需要将配置文件中的 GH_TOKEN 换成我们自己设定的名称，这里我的配置应该是 Travis_token 即 - git push –force –quiet “https://${Travis_token}@${GH_REF}” master:master # GH_TOKEN是在Travis中配置token的名称。 还要更改 GH_REF 中我们的博客仓库的地址。<br><img src="travis_success.png" alt="travis_success"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo博客" scheme="https://10veU.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="GitHub" scheme="https://10veU.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://10veU.github.io/tags/Hexo/"/>
    
      <category term="博客" scheme="https://10veU.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
